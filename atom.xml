<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Marsen&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/be6152866ede00bca9d8f92aa352c938</icon>
  <subtitle>waiting to load</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.marsen.me/"/>
  <updated>2020-04-28T15:56:11.243Z</updated>
  <id>https://blog.marsen.me/</id>
  
  <author>
    <name>Marsen L.</name>
    <email>thisismysoul@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[實作筆記] Github 結合 SonarCloud 作代碼質量檢查</title>
    <link href="https://blog.marsen.me/2020/04/27/2020/sonarqube_run_with_github_action/"/>
    <id>https://blog.marsen.me/2020/04/27/2020/sonarqube_run_with_github_action/</id>
    <published>2020-04-27T09:01:46.000Z</published>
    <updated>2020-04-28T15:56:11.243Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>大概一年前我曾寫過一篇 Blog <a href="https://blog.marsen.me/2019/05/16/2019/opensource_with_sonarcloud/">[實作筆記] 讓 SonarQube 檢查你的代碼</a>，<br>沒什麼含金量，只是我個人用來記錄的筆記。<br>當初有一些問題沒有排除，加上工作一忙就沒有後續了。  </p><p>我的理想目標是，每當我上 Code 到線上 Repo 時(Github)，<br>SonarCloud 可以幫我檢查代碼，跑跑測試覆蓋率，刷新一下 Budget，<br>如果有異常(覆蓋率下降、壞味道等…)最好再發個通知給我。<br>這些功能要怎麼作到呢 ?</p><p>然後我會實際用在我的<a href="https://github.com/marsen/Marsen.NetCore.Dojo" target="_blank" rel="noopener">SideProject</a>上，<br>這個 Project 單純只是為了練習而生，<br>專注於我個人的測試項目，主要語言為 Csharp 也有一些 TypeScript 。</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先先排序一下優先序吧。</p><ol><li>一定要可以執行代碼檢查</li><li>要能結合 CI ，我以 Github Action 作為我的主要 CI 工具</li><li>能夠跑測試並輸出測試報告</li><li>Buget 刷新</li><li>發通知</li></ol><p>這篇主要會說明如何結合 CI 執行代碼檢查。<br>執行代碼檢查就發現有一個問題， SonarCloud 一次只能對一種語言作檢查，<br>雖然我的專案裡有兩種語言，但是以 C# 佔大宗(93%)，所以調整一下目標，<br>先優先完成 C# 的代碼檢查、結合 CI 與輸出測試報告。<br>之後再進行 Typescript 的檢查與測試，最後通知有的話很棒，沒有也沒關係啦 :)。  </p><h2 id="本機執行代碼檢查"><a href="#本機執行代碼檢查" class="headerlink" title="本機執行代碼檢查"></a>本機執行代碼檢查</h2><p>我本機的環境有兩個，一個是 Windows 一個 macOS，我這裡只討論 Windows 的作法，<br>然後我就要直上 CI 了，Github Action 我並不熟悉，但是我知道上面應該是執行 Linux like 的作業系統。  </p><p>首先要在 SonarCloud 上建立 Project ，<br>可以參考<a href="https://sonarcloud.io/documentation/integrations/github/" target="_blank" rel="noopener">Get started with GitHub.com</a>快速建立。  </p><p>Administrator &gt; Analysis Method  </p><p><img src="/images/2020/4/sonarqube_run_with_github_action_02.jpg" alt="Analysis Methodn">  </p><p>這裡要把 SonarCloud Automatic Analysis 的功能關掉。<br>SonarCloud 支援自動分析語言只有以下</p><p>ABAP, Apex, CSS, Flex, Go, HTML, JS, Kotlin, PHP, Python, Ruby, Scala, Swift, TypeScript, XML.  </p><p>雖然有很多，但可惜並沒有 C# ，所以要先關掉，不然 Github Action 執行時會收到下面的錯誤。</p><p><code>You are running CI analysis while Automatic Analysis is enabled. Please consider disabling one or the other.</code></p><p>另外目前支援的 CI 服務有 Circle CI 與 Travis CI ，<br>一樣殘念的是沒有支援 Github Action 。<br>另外兩個選項目是 Other CI 與 Manunlly(手動) 。<br>我的前一篇文章就是使用手動的方式把檢查報告打到 SonarCloud。<br>雖然只隔一年，但 UI 介面上已經有些差距，我還是再作一次介紹。</p><p><img src="/images/2020/4/sonarqube_run_with_github_action_01.jpg" alt="Analysis Methodn"></p><p>首先先下載 SonarScanner，選擇正確的語言(Others)與OS(Windows)後下載，<br>接著設定環境變數  </p><p><img src="/images/2020/4/sonarqube_run_with_github_action_03.jpg" alt="Setting Path">  </p><p>最後開啟 CMD 切換到專案目錄底下後。<br>執行語法，如果照著上述步驟，你可以在 Download 的按鈕下方找到語法，同時它會幫你填好 Token。  </p><p>Begin</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet sonarscanner begin /k:"$ProjectKey" /o:"$Oragnization" /d:"sonar.host.url=https://sonarcloud.io" /d:"sonar.login="$Sonar_Login</span><br></pre></td></tr></table></figure><p>MSBuild</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet build ".\Marsen.NetCore.Dojo.Integration.Test.sln"</span><br></pre></td></tr></table></figure><p>End</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet sonarscanner end /d:"sonar.login="$Sonar_Login</span><br></pre></td></tr></table></figure><p><code>$ProjectKey</code> 與 <code>$Oragnization</code> 這兩個變數可以在 SonarCloud 的 Overview 介面的右下角找到，<br><code>$Sonar_Login</code> 則可以透過 <a href="https://sonarcloud.io/account/security" target="_blank" rel="noopener">Security</a> 設定。</p><p>執行命名完成後，大概幾秒內就可以在 SonarCloud 中看到結果了。</p><p>簡單總結一下</p><ol><li>你要有 SonarCloud</li><li>要下載 SonarSanner</li><li>依序執行 Begin &gt; MSBuild &gt; End</li></ol><p>另外有一些雷包，在這裡也記錄一下</p><ul><li>要安裝 Java (Java8)</li><li>執行語法的目錄底下不能有<code>sonar-project.properties</code><ul><li>不然會報錯 (sonar-project.properties files are not understood by the SonarScanner for MSBuild.)</li><li>我覺得應該是我的檔案內容有誤，但是還不知道怎麼修正。總之直接移除對我來說是可以 work 的。  </li></ul></li></ul><h2 id="CI-執行代碼檢查"><a href="#CI-執行代碼檢查" class="headerlink" title="CI 執行代碼檢查"></a>CI 執行代碼檢查</h2><p>同上面的概念，只要讓你的 CI Server 在執行的過程中依序執行 Begin &gt; MSBuild &gt; End 即可，<br>參考 Github Action 的 yaml 檔</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#上略</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Dotnet</span> <span class="string">Sonarscanner</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">dotnet</span> <span class="string">tool</span> <span class="string">install</span> <span class="string">--global</span> <span class="string">dotnet-sonarscanner</span> <span class="string">--version</span> <span class="number">4.8</span><span class="number">.0</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SonarScanner</span> <span class="string">Begin</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">dotnet</span> <span class="string">sonarscanner</span> <span class="string">begin</span> <span class="string">/k:"marsen_Marsen.NetCore.Dojo"</span> <span class="string">/o:"marsen-github"</span> <span class="string">/d:"sonar.host.url=https://sonarcloud.io"</span> <span class="string">/d:"sonar.login="$SONAR_LOGIN</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Build</span> <span class="string">with</span> <span class="string">dotnet</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">dotnet</span> <span class="string">build</span> <span class="string">".\Marsen.NetCore.Dojo.Integration.Test.sln"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">SonarScanner</span> <span class="string">End</span></span><br><span class="line">      <span class="attr">run:</span> <span class="string">dotnet</span> <span class="string">sonarscanner</span> <span class="string">end</span> <span class="string">/d:"sonar.login="$SONAR_LOGIN</span></span><br><span class="line">    <span class="attr">env:</span></span><br><span class="line">      <span class="attr">GITHUB_TOKEN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">      <span class="attr">SONAR_LOGIN:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.SONAR_LOGIN</span> <span class="string">&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>這裡要注意的是，<br>首先每次你都需要安裝 Dotnet Sonarscanner ，<br>其實我不清楚 Github Action 背後的機制，但是我猜測應該是用到容器化的技術，<br>每次 CI 執行時都會起一個實體(這個可設定，<del>但是 Linux Like 的 OS 又快又便宜，就別考慮 Windows了吧</del>請<a href="https://help.github.com/en/actions/reference/virtual-environments-for-github-hosted-runners" target="_blank" rel="noopener">參考</a>)<br>所以每次都要重頭安裝相關的軟體，比如 : Dotnet Sonarscanner  。</p><p>另外一點是，環境變數的設定，可以看到最後面的 <code>env</code> 變數。<br>這個是機制是將 CI 的設定傳到實體的環境變數之中。<br>在 yaml 中綁定要使用 <code>$+變數名</code> EX: <code>SONAR_LOGIN</code><br>其它的變數，你可以在 Github 的 <a href="https://github.com/marsen/Marsen.NetCore.Dojo/settings/secrets" target="_blank" rel="noopener">Secrets</a> 頁面設定。<br>另外 Github 有些預設的<a href="https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables" target="_blank" rel="noopener">變數</a>。<br>更多資訊可以<a href="https://help.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets#in-this-article" target="_blank" rel="noopener">參考</a></p><p>設定成功後，每次進 Code 就能看到代碼的壞味道、重複或是資安風險等資訊囉。<br>可以參觀一下<a href="https://sonarcloud.io/dashboard?id=marsen_Marsen.NetCore.Dojo" target="_blank" rel="noopener">我的專案</a>。</p><p><a href="https://sonarcloud.io/dashboard?id=marsen_Marsen.NetCore.Dojo" target="_blank" rel="noopener"><img src="https://sonarcloud.io/api/project_badges/quality_gate?project=marsen_Marsen.NetCore.Dojo" alt="Quality gate"></a></p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://sonarcloud.io/documentation/integrations/github/" target="_blank" rel="noopener">Get started with GitHub.com</a></li><li><a href="https://github.com/marketplace/actions/sonarcloud-scan" target="_blank" rel="noopener">SonarCloud Scan</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;大概一年前我曾寫過一篇 Blog &lt;a href=&quot;https://blog.marsen.me/2019/05/16/20
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[實作筆記] 使用 IIS 作為 Reverse Proxy Server</title>
    <link href="https://blog.marsen.me/2020/04/24/2020/iis_reverse_proxy/"/>
    <id>https://blog.marsen.me/2020/04/24/2020/iis_reverse_proxy/</id>
    <published>2020-04-24T02:31:22.000Z</published>
    <updated>2020-04-25T07:49:49.695Z</updated>
    
    <content type="html"><![CDATA[<h2 id="情境"><a href="#情境" class="headerlink" title="情境"></a>情境</h2><ol><li>作業系統為 Windows 10</li><li>IIS 的版本為 10.0.18362.1</li><li>前端使用 nodejs 開發了一個網站，會在 localhost:3000 執行，提供 UI</li><li>使用 dotnet core 開發了一個網站，在 IIS 上執行，用來提供 Api</li><li>透過鎖 Host 的方式 dotnet core 的網站綁定在 <code>http://dev.api.test</code></li></ol><h2 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h2><ol><li>即使只有開發階段，我也不想看到 localhost:3000 作為我的網址</li><li>我想看到 <code>http://dev.site.test</code> 作為我的站台</li></ol><h2 id="本文"><a href="#本文" class="headerlink" title="本文"></a>本文</h2><p>首先，鎖 Host <code>127.0.0.1 dev.site.test</code>，<br>Host 的檔案路徑為 <code>C:\Windows\System32\drivers\etc</code>。</p><p>接下來請下載並安裝 <a href="https://www.iis.net/downloads/microsoft/url-rewrite" target="_blank" rel="noopener">URL Rewrite</a> 與 <a href="https://www.iis.net/downloads/microsoft/application-request-routing" target="_blank" rel="noopener">Application Request Routing</a>。</p><p>IIS 建立網站，繫結我設定為 <code>dev.site.test:80</code>，<br>應用程式集區我沒有特別處。<br>到 IIS 選取站台的 Url Rewrite 新增規則<br><img src="/images/2020/4/iis_reverse_proxy_01.jpg" alt="到 IIS 選取站台的 Url Rewrite 新增規則"><br>選取 Reverse Proxy 規則  </p><p><img src="/images/2020/4/iis_reverse_proxy_02.jpg" alt="選取 Reverse Proxy 規則">  </p><p>填寫 <code>localhost:3000</code></p><p><img src="/images/2020/4/iis_reverse_proxy_03.jpg" alt="填寫 `localhost:3000`">  </p><p>這個時候前往 dev.site.test 就可以看到站台囉。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.iis.net/downloads/microsoft/url-rewrite" target="_blank" rel="noopener">URL Rewrite</a></li><li><a href="https://www.iis.net/downloads/microsoft/application-request-routing" target="_blank" rel="noopener">Application Request Routing</a></li><li><a href="https://dev.to/petereysermans/hosting-a-node-js-application-on-windows-with-iis-as-reverse-proxy-397b" target="_blank" rel="noopener">Hosting a Node.js application on Windows with IIS as reverse proxy</a></li><li><a href="https://tecadmin.net/set-up-reverse-proxy-using-iis/" target="_blank" rel="noopener">How to Setup Reverse Proxy on IIS with URL-Rewrite</a></li><li><a href="https://blog.miniasp.com/post/2009/04/13/Using-ARR-to-implement-Reverse-Proxy" target="_blank" rel="noopener">如何利用 IIS7 的 ARR 模組實做 Reverse Proxy 機制</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;情境&quot;&gt;&lt;a href=&quot;#情境&quot; class=&quot;headerlink&quot; title=&quot;情境&quot;&gt;&lt;/a&gt;情境&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;作業系統為 Windows 10&lt;/li&gt;
&lt;li&gt;IIS 的版本為 10.0.18362.1&lt;/li&gt;
&lt;li&gt;前端使用 no
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[實作筆記] 從 TDD 到 TDD ，Todo 到 Test 趨動開發(二)</title>
    <link href="https://blog.marsen.me/2020/04/04/2020/todo_driven_develop_to_test_driven_develop_2/"/>
    <id>https://blog.marsen.me/2020/04/04/2020/todo_driven_develop_to_test_driven_develop_2/</id>
    <published>2020-04-04T10:22:40.000Z</published>
    <updated>2020-04-04T10:34:54.580Z</updated>
    
    <content type="html"><![CDATA[<p>承<a href="https://blog.marsen.me/2020/02/26/2020/todo_driven_develop_to_test_driven_develop_1/">上篇</a></p><h2 id="異常處理的-Todo-項目"><a href="#異常處理的-Todo-項目" class="headerlink" title="異常處理的 Todo 項目"></a>異常處理的 Todo 項目</h2><p>異常處理有幾種狀況，<br>一種是回傳的狀態有異常，<br>一種是回傳的資料有異常，<br>最後一種是超乎預期的異常，<br>比如說 Http 通訊上本身有問題。</p><p>再進一步分析這三種狀況，<br>我會寫下以下幾種情境</p><ol><li>回傳的狀態有異常，記錄回傳的異常狀態，拋出 Exception</li><li>回傳的資料有異常，記錄回傳的異常資料，回傳空資料</li><li>超乎預期的異常，記錄異常資料, 拋出 Exception</li></ol><h2 id="測試案例-回傳的狀態有異常，記錄回傳的異常狀態，拋出-Exception"><a href="#測試案例-回傳的狀態有異常，記錄回傳的異常狀態，拋出-Exception" class="headerlink" title="測試案例 回傳的狀態有異常，記錄回傳的異常狀態，拋出 Exception"></a>測試案例 回傳的狀態有異常，記錄回傳的異常狀態，拋出 Exception</h2><p>新增測試案例<br>這裡複製之前的測試案例，<br>再透過 inline Method 還原 arrange 部份的代碼，<br>再修改成我們想要的測試案例。</p><p>這裡我們先驗証拋出 Exception</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Case6_Query_Error_Result</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    _configService.GetAppSetting(<span class="string">"pickup.service.url"</span>)</span><br><span class="line">        .Returns(UrlMockResultError);</span><br><span class="line">    _storeSettingService.GetValue(_testStoreId, <span class="string">"pickup.service"</span>, <span class="string">"loginId"</span>).Returns(<span class="string">"testId"</span>);</span><br><span class="line">    _storeSettingService.GetValue(_testStoreId, <span class="string">"pickup.service"</span>, <span class="string">"auth"</span>).Returns(<span class="string">"testAuth"</span>);</span><br><span class="line">    target = <span class="keyword">new</span> PickupService(_configService, _storeSettingService);</span><br><span class="line"></span><br><span class="line">    Action act = () =&gt; target.GetUpdateStatus(_testStoreId, _testWaybillNo);</span><br><span class="line">    act.Should().Throw&lt;Exception&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Production Code 就單純很多了</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj.result == <span class="string">"error"</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下一步我要驗証記錄 Log 的行為<br>出錯的時候應該呼叫 LogError 的方法</p><p>原本想直接驗証 LogError 有沒有被呼叫</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Case7_Query_Error_Result_Should_LogError</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GetPickupServiceWith(UrlMockResultError);</span><br><span class="line">    target.GetUpdateStatus(_testStoreId, _testWaybillNo);</span><br><span class="line">    _logger.Received().LogError(Arg.Any&lt;<span class="keyword">string</span>&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因為這裡會拋出 Exception ，<br>所以無法直接呼叫  GetUpdateStatus<br>要修改前一個測試</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Case6_Query_Error_Result</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GetPickupServiceWith(UrlMockResultError);</span><br><span class="line">    Action act = () =&gt; target.GetUpdateStatus(_testStoreId, _testWaybillNo);</span><br><span class="line">    act.Should().Throw&lt;Exception&gt;();</span><br><span class="line">    _logger.ReceivedWithAnyArgs().LogError(<span class="keyword">default</span>(<span class="keyword">string</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 Produciton Code 很單純的加上 Logger 並調整建構子</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">-   <span class="function"><span class="keyword">public</span> <span class="title">PickupService</span>(<span class="params">IConfigService configService, IStoreSettingService storeSettingService</span>)</span></span><br><span class="line"><span class="function">+   <span class="keyword">public</span> <span class="title">PickupService</span>(<span class="params">IConfigService configService, IStoreSettingService storeSettingService, ILogger logger</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>._configService = configService;</span><br><span class="line">        <span class="keyword">this</span>._storeSettingService = storeSettingService;</span><br><span class="line">+       <span class="keyword">this</span>._logger = logger;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (obj.result == <span class="string">"error"</span>)</span><br><span class="line">    &#123;</span><br><span class="line">+       <span class="keyword">this</span>._logger.LogError(obj.result);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="回傳的資料有異常，記錄回傳的異常資料，回傳空資料"><a href="#回傳的資料有異常，記錄回傳的異常資料，回傳空資料" class="headerlink" title="回傳的資料有異常，記錄回傳的異常資料，回傳空資料"></a>回傳的資料有異常，記錄回傳的異常資料，回傳空資料</h2><p>測試案例</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Case7_Query_Error_Content</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     GetPickupServiceWith(UrlMockContentError);</span><br><span class="line">     <span class="keyword">var</span> actual = target.GetUpdateStatus(_testStoreId, _testWaybillNo);</span><br><span class="line">     actual.Should().BeEmpty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>調整代碼以通過測試</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">+    <span class="keyword">if</span> (<span class="keyword">string</span>.IsNullOrEmpty(c.ErrorCode))</span><br><span class="line">+    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (c.Status)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment"><span class="doctag">///</span>/略…</span></span><br><span class="line">        &#125;</span><br><span class="line">+    &#125;</span><br></pre></td></tr></table></figure><h2 id="超乎預期的異常，記錄異常資料-拋出-Exception"><a href="#超乎預期的異常，記錄異常資料-拋出-Exception" class="headerlink" title="超乎預期的異常，記錄異常資料, 拋出 Exception"></a>超乎預期的異常，記錄異常資料, 拋出 Exception</h2><p>測試</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Case8_Query_Exception</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GetPickupServiceWith(UrlMockException);</span><br><span class="line">    Action act = () =&gt; target.GetUpdateStatus(_testStoreId, _testWaybillNo);</span><br><span class="line">    act.Should().Throw&lt;Exception&gt;();</span><br><span class="line">    _logger.ReceivedWithAnyArgs().LogError(<span class="keyword">default</span>(<span class="keyword">string</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Production Code 就直接整個用 try Catch 包起來再記 Log</p><h2 id="實務上的案例"><a href="#實務上的案例" class="headerlink" title="實務上的案例"></a>實務上的案例</h2><p>這裡補充一些實務上的情境，</p><ol><li>呼叫狀態查詢時，對方的 API 只允許同查詢 100 筆 WayBillNo</li><li>呼叫 API 後多了幾種文件外的狀態需要處理<ul><li>D → Finish</li><li>F → Finish</li><li>E → Abnormal</li></ul></li></ol><h2 id="單元測試現身"><a href="#單元測試現身" class="headerlink" title="單元測試現身"></a>單元測試現身</h2><p>現在我已經有一些整合測試作保護了，<br>但是想要修改或重構仍然很麻煩，<br>原因是我每次有新的情境就需要準備新的 Mock API(實務上我需要準備符合情境的 WayBillNo)，<br>透過 Todo 與整合測試，已經讓我們的代碼有了雛型。<br>在一切太晚之前，我們需撰寫單元測試。</p><h3 id="Do-TODO-建立單元測試"><a href="#Do-TODO-建立單元測試" class="headerlink" title="Do TODO 建立單元測試"></a>Do TODO 建立單元測試</h3><p>這裡小小提個 Visual Studio 2019 的小問題 ，<br>預設只會安裝 MSTest 的 Generator ，<br>這裡我要安裝 <a href="https://marketplace.visualstudio.com/items?itemName=YowkoTsai.xUnitnetTestGenerator" target="_blank" rel="noopener">XUnit 的 Generator</a> ，<br>安裝完成後再透過 Code Generator 產生第一個測試，紅燈。</p><p>當然這種 Generator 產生的 Code 不是實際要的測試案例<br>調整一下測試案例</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">ILogger logger = Substitute.For&lt;ILogger&gt;();</span><br><span class="line">IStoreSettingService storeSettingService = Substitute.For&lt;IStoreSettingService&gt;();</span><br><span class="line">storeSettingService.GetValue(Arg.Any&lt;<span class="keyword">long</span>&gt;(), <span class="string">"pickup.service"</span>, <span class="string">"auth"</span>).Returns(<span class="string">"FakeAuth"</span>);</span><br><span class="line">IConfigService configService = Substitute.For&lt;IConfigService&gt;();</span><br><span class="line">configService.GetAppSetting(<span class="string">"pickup.service.url"</span>).Returns(<span class="string">"https://test.com/"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> target = <span class="keyword">new</span> PickupService(configService, storeSettingService, logger);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> actual = target.GetUpdateStatus(<span class="number">2</span>, <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt; &#123;<span class="string">"TestWayBillNo"</span>&#125;);</span><br><span class="line">actual.Should().BeEquivalentTo(<span class="keyword">new</span> List&lt;ShippingOrderUpdateEntity&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">new</span> ShippingOrderUpdateEntity</span><br><span class="line">    &#123;</span><br><span class="line">        AcceptTime = <span class="keyword">new</span> DateTime(<span class="number">2020</span>, <span class="number">03</span>, <span class="number">03</span>, <span class="number">17</span>, <span class="number">51</span>, <span class="number">20</span>),</span><br><span class="line">        OuterCode = <span class="string">"TestWayBillNo"</span>,</span><br><span class="line">        Status = StatusEnum.Finish</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Legacy-Code-相依-HttpClient"><a href="#Legacy-Code-相依-HttpClient" class="headerlink" title="Legacy Code 相依 HttpClient"></a>Legacy Code 相依 HttpClient</h3><p>大部份的功能我都可以透過 DI 的手段隔離，<br>但是之前的 Test Driven Develop 的方法並沒有將 HttpClient 轉換成可以隔離的物件。<br>另外一部份代碼是透過 Copy Paste 手法產生的代碼，所以也有可能會有 Legacy Code。<br>這裡我優先處理 HttpClient 。</p><p>首先我要重構一小段代碼，所幸之前的整合測試可以保護我這段重構</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">+       <span class="keyword">internal</span> HttpClient HttpClient;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> <span class="keyword">string</span> DeliveryOrder = <span class="string">"DeliveryOrder"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> result = <span class="keyword">new</span> List&lt;ShippingOrderUpdateEntity&gt;();</span><br><span class="line">-           <span class="keyword">var</span> httpClient = <span class="keyword">new</span> HttpClient();</span><br><span class="line">+           <span class="keyword">this</span>.HttpClient?? = <span class="keyword">new</span> HttpClient();</span><br></pre></td></tr></table></figure><p>在測試的保護下，我要逐步修改我的 HttpClient ，<br>好讓我的單元測能夠通過。<br>其實我目前的單元測試還未完成，所以可以先 Skip 掉，<br>等 HttpClient 隔離完成後再回頭完成單元測試。</p><h3 id="隔離-HttpClient"><a href="#隔離-HttpClient" class="headerlink" title="隔離 HttpClient"></a>隔離 HttpClient</h3><p>這裡我要回顧一下，之前在作 <a href="https://blog.marsen.me/2020/01/29/2020/tdd_pay_api/">Kata_Api_Pay</a> 的時候，<br>我在 Production Code 建立了 <code>IHttpClient</code> 的介面，<br>用於隔離 <code>HttpClient</code> 。<br>我可以延用 HttpClient 但是因為我未實作 <code>DefaultRequestHeaders</code> 欄位，<br>這會導致一些錯誤;<br>雖然我可以一併調整但是這樣我要同時面對兩份遺留代碼，<br>我認為這樣的風險太大，而且使用 <code>IHttpClient</code> 目前看起來出現一些問題。</p><ol><li>雖然抽出介面，但依賴在 <code>HttpClient</code> 之上，未來有功能不足或未實作 HttpClient 的功能就仍需要調整。</li><li>最初的目的其實是為了隔離，而隔離的目的是為了好測試，這些代碼卻放在 Production Code 上實在很奇怪。</li></ol><p>基於以上種種理由，我要重新作一次隔離。<br>要達到幾個目地。</p><ol><li>真正的與 <code>HttpClient</code> 解耦，未來再有用到 HttpClient 的任何方法/欄位皆不影響即有代碼。</li><li>將這類的工具放到正確專案 <code>TestingToolkit</code> 之下，不再影響 Production Code</li></ol><p>首先允許測試專案存取 Production Code 的 Internal 欄位</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">+       [assembly: InternalsVisibleTo(<span class="string">"Marsen.NetCore.Dojo.Tests"</span>)]</span><br><span class="line">        <span class="keyword">namespace</span> <span class="title">Marsen.NetCore.Dojo.Kata_PickupService</span></span><br></pre></td></tr></table></figure><p>下一步，偽造 HttpClient 的回傳值，<br>我們可以透過 HttpClient 的建構子作到這件事。<br>參考這篇<a href="https://dev.to/n_develop/mocking-the-httpclient-in-net-core-with-nsubstitute-k4j" target="_blank" rel="noopener">文章</a></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">target.HttpClient =</span><br><span class="line">    <span class="keyword">new</span> HttpClient(</span><br><span class="line">    <span class="keyword">new</span> MockHttpMessageHandler(JsonSerializer.Serialize(</span><br><span class="line">    <span class="keyword">new</span> ResponseEntity</span><br><span class="line">    &#123;</span><br><span class="line">        Result = <span class="string">""</span>,</span><br><span class="line">        Content = <span class="keyword">new</span> List&lt;Content&gt;</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">new</span> Content</span><br><span class="line">            &#123;</span><br><span class="line">                ErrorCode = <span class="keyword">string</span>.Empty,</span><br><span class="line">                Status = Status.DONE,</span><br><span class="line">                lastStatusDate = <span class="string">"2020-03-03"</span>,</span><br><span class="line">                lastStatusTime = <span class="string">"17:51:20"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;),</span><br><span class="line">HttpStatusCode.OK));</span><br></pre></td></tr></table></figure><p>偽造 HttpClient 的回傳值後，我就可以把單元測試的部份完成，<br>案例蠻多的，但是大同小異也沒有什麼特別的技法，<br>就不多贅述。</p><p>稍微提一下，反而在寫 Unit Test 過程中，<br>發現了 Production Code 一些 Over Design 的代碼。</p><p>比如說，多餘的邏輯分支，在某些因果條件，跟本不可能被執行到的代碼。<br>我視作無用的代碼將他移除。</p><p>另外也有發現一些 Entity 在呼叫 API 的過程不會取用它的資料或欄位，<br>也許有得人會想要移除這些 Entity ，但我會傾向保留，<br>原因是這些 Entity 是在整合測試階段被趨動出來的，<br>雖然沒有用到而且會使代碼的覆蓋率下降，<br>但是我認為這些代碼很有可能再下一個階段就會被用到，<br>在不影響功能的情況我不會刻意移除。</p><p>整體而言，測試已 100% 覆蓋，<br>也記錄了如何從 Todo Driven 到 TDD 的想法與技巧。<br>最後整理一下代碼，<br>把 MockHttpMessageHandler 搬到 TestingToolkit。<br>最後回頭把 api Pay 對 HttpClient 的處理調整一下就大功告成啦。</p><h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><ul><li><a href="https://dev.to/n_develop/mocking-the-httpclient-in-net-core-with-nsubstitute-k4j" target="_blank" rel="noopener">https://dev.to/n_develop/mocking-the-httpclient-in-net-core-with-nsubstitute-k4j</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;承&lt;a href=&quot;https://blog.marsen.me/2020/02/26/2020/todo_driven_develop_to_test_driven_develop_1/&quot;&gt;上篇&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;異常處理的-Todo-項目&quot;&gt;&lt;a href
      
    
    </summary>
    
    
    
      <category term="Unit Testing" scheme="https://blog.marsen.me/tags/Unit-Testing/"/>
    
      <category term="TDD" scheme="https://blog.marsen.me/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記] Macbook SSH 設置與疑問 </title>
    <link href="https://blog.marsen.me/2020/03/10/2020/macbook_ssh_add_and_git_fork/"/>
    <id>https://blog.marsen.me/2020/03/10/2020/macbook_ssh_add_and_git_fork/</id>
    <published>2020-03-09T18:02:31.000Z</published>
    <updated>2020-04-20T15:54:21.509Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>最近轉換了一下跑道 ，<br>剛好又了一點時間就想說順便換一下 OS 學一點新東西，<br>就敗了一台 Macbook ， 這幾天就忙著整理開發環境 。<br>在 ssh 上卡住了點 ， 就作點記錄順便上來提問 。</p><h2 id="情境"><a href="#情境" class="headerlink" title="情境"></a>情境</h2><p>我安裝了 <a href="https://git-fork.com/" target="_blank" rel="noopener">git-fork</a> 作為我的 Git GUI 工具。<br>裡面有一個很方便的功能可以快速的設定 ssh ，  </p><p><img src="/images/2020/3/030901_fork_setting_ssh.png" alt="fork">  </p><p>於是我很輕鬆娛快的設定了一組 ssh key 我命名為 <code>Macbook</code><br>也可以很正常的在 fork 裡面作一些 git 的操作 ，<br>比如說 fetch push pull 等。</p><p>不過人在江湖飄， 哪有不挨刀。　　<br>身為一個開發者與一個 Git 的愛用者，<br>有很多情境是會離開 GUI 工具操作 Git 的 。<br>但是很奇怪，只要離開了 fork 我的 Git 部份指令就會失效，<br>錯誤訊息如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git@github.com: Permission denied (publickey).  </span><br><span class="line">fatal: Could not <span class="built_in">read</span> from remote repository.  </span><br><span class="line">Please make sure you have the correct access rights and the repository exists.</span><br></pre></td></tr></table></figure><p>很明顯是權限不足的原因。<br>但是我查找了 <code>~/.ssh</code> 資料夾 ，<br>我設定的 private key <code>Macbook</code> 確實存在。  </p><p>所以我透過一個指令來取得更多資訊</p><p><code>ssh -vT git@github.com</code></p><p>輸出如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">marsen@MarsendeMacBook-Pro ~ % ssh -vT git@github.com</span><br><span class="line">OpenSSH_7.9p1， LibreSSL 2.7.3</span><br><span class="line">debug1: Reading configuration data &#x2F;etc&#x2F;ssh&#x2F;ssh_config</span><br><span class="line">debug1: &#x2F;etc&#x2F;ssh&#x2F;ssh_config line 48: Applying options for *</span><br><span class="line">debug1: Connecting to github.com [192.30.253.112] port 22.</span><br><span class="line">debug1: Connection established.</span><br><span class="line">debug1: identity file &#x2F;Users&#x2F;marsen&#x2F;.ssh&#x2F;id_rsa type -1</span><br><span class="line">debug1: identity file &#x2F;Users&#x2F;marsen&#x2F;.ssh&#x2F;id_rsa-cert type -1</span><br><span class="line">中間省略...  </span><br><span class="line">debug1: Trying private key: &#x2F;Users&#x2F;marsen&#x2F;.ssh&#x2F;id_ecdsa</span><br><span class="line">debug1: Trying private key: &#x2F;Users&#x2F;marsen&#x2F;.ssh&#x2F;id_ed25519</span><br><span class="line">debug1: Trying private key: &#x2F;Users&#x2F;marsen&#x2F;.ssh&#x2F;id_xmss</span><br><span class="line">debug1: No more authentication methods to try.</span><br><span class="line">git@github.com: Permission denied (publickey).</span><br></pre></td></tr></table></figure><p>幾個奇怪的地方<br>一個是 identity file 或是 Trying private key 的檔案我都找不到 ，<br>另一個奇怪的點是 <code>~/.ssh/Macbook</code> 這組我剛剛建立的 private key 明明存在 ，<br>我確找不到他顯示在 identity file 或是 Trying private key 的記錄之中<br>總而言之，最後的訊息仍然是</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git@github.com: Permission denied (publickey).</span><br></pre></td></tr></table></figure><h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h2><p>指令 <code>ssh-add -K Macbook</code> 執行後， 就可正常運作。<br>小小猜測一下 ， 應該是 fork 運作的環境與一般 terminal 的環境有所差異，<br>所以需要額外透過指令加上 private key 才能夠執行。</p><p>不過我仍有疑問， fork 的設定在什麼地方可以調整呢 ?<br>另一個問題是 log 裡面這些不存在 private key 是在哪裡設定的 ?<br>查找過 <code>/etc/ssh/ssh_config</code> 裡面並沒有相關的設定</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">debug1: Will attempt key: &#x2F;Users&#x2F;marsen&#x2F;.ssh&#x2F;id_rsa</span><br><span class="line">debug1: Will attempt key: &#x2F;Users&#x2F;marsen&#x2F;.ssh&#x2F;id_dsa</span><br><span class="line">debug1: Will attempt key: &#x2F;Users&#x2F;marsen&#x2F;.ssh&#x2F;id_ecdsa</span><br><span class="line">debug1: Will attempt key: &#x2F;Users&#x2F;marsen&#x2F;.ssh&#x2F;id_ed25519</span><br><span class="line">debug1: Will attempt key: &#x2F;Users&#x2F;marsen&#x2F;.ssh&#x2F;id_xmss</span><br></pre></td></tr></table></figure><p><del>希望有人能有答案或提供文件可以參考一下。<br>不求甚解繼續玩 Mac 去。</del></p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>20200407 : 在安裝 git-fork 的時候 ， 它會另外安裝一個 git 實體 ，<br>所以與 global 環境的 git 不會是同一個 ， 導致在 git-fork 的行為不一致 。<br>另外之所以使用 ssh 作為連線手段 ， 是因為以前使用 SourceTree 作為 Git Gui Tool 時<br>常常會 Https 的密碼過期而需要重新輸入 ， 如果信任 git-fork 的開發者 ，<br>可以考慮使用 Https 連線 ， 看起來 git-fork 會記錄你的連線資訊 ，<br>而不會在每次操作 git 時詢問你密碼。</p><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;最近轉換了一下跑道 ，&lt;br&gt;剛好又了一點時間就想說順便換一下 OS 學一點新東西，&lt;br&gt;就敗了一台 Macbook ， 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[實作筆記] 從 TDD 到 TDD ，Todo 到 Test 趨動開發(一)</title>
    <link href="https://blog.marsen.me/2020/02/26/2020/todo_driven_develop_to_test_driven_develop_1/"/>
    <id>https://blog.marsen.me/2020/02/26/2020/todo_driven_develop_to_test_driven_develop_1/</id>
    <published>2020-02-26T02:40:14.000Z</published>
    <updated>2020-04-04T10:19:05.417Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>上次作完金流後，這次換作物流，<br>在開發的過程中首次全程用 TDD 進行(?)，<br>因為某些因素，測試沒有進版控，所以稍微記錄一下心路歷程。<br>但是那個 T 是什麼? 就請各位看下去了…</p><h2 id="需求說明"><a href="#需求說明" class="headerlink" title="需求說明"></a>需求說明</h2><p>出貨流程為:</p><ol><li>訂單成立</li><li>透過物流服務配號</li><li>出貨</li><li>透過物流服務查詢物流狀態</li><li>狀態正確，通知消費者取貨</li><li>狀態不正確，通知商家，人工處理。</li></ol><p>這次 TDD 進行的部份為流程上的第 4 步，<br>往下看我怎麼做的  </p><p>整體流程如下</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>Step0 . 這次不是從無到有，而是在遺留代碼之中建立測試，<br>所以我會準備一些「<a href="https://github.com/marsen/Marsen.NetCore.Dojo/commit/2e4e5ecffe96043b2c442cf468d90fc4d95c9fa4" target="_blank" rel="noopener">遺留代碼</a>」來呈現我面臨的狀況。</p><p>Step1 . 這次 TDD 先不是 Test 而 TODO，<br>直接對 Production Code 寫下 Todo List，<br>這個 TODO 的過程其實就是一種分析，一種需求拆分。  </p><p>這裡我先簡單拆成兩步，</p><ol><li>打 API 問狀態</li><li>將問到的資料轉換成回傳資料</li></ol><p>Step 2 . <a href="https://github.com/marsen/Marsen.NetCore.Dojo/commit/aba8811b4b0a2c3888341997ad69183264f67ac8" target="_blank" rel="noopener">隨著過程把 TODO 拆的更細</a></p><ol><li>打 API 問狀態<ol><li>建立 HttpClient</li><li>建立 auth</li><li>準備 HttpContent 資料</li><li>指定 API URL</li><li>呼叫</li></ol></li></ol><p>以往這個時候，我就會進開發了，<br>這次我不打算刻意改變我的開發習慣，<br>但是我會多作一件事，寫測試。<br>這個測試會直接呼叫我即將開發的方法，<br>而我的方法會真的去打 API 存取 DB 讀 Config Files 諸如此類的事情。</p><h2 id="測試"><a href="#測試" class="headerlink" title="測試"></a>測試</h2><h3 id="第一個測試，但是沒有-Assert"><a href="#第一個測試，但是沒有-Assert" class="headerlink" title="第一個測試，但是沒有 Assert"></a>第一個測試，但是沒有 Assert</h3><p>我目前對測試案例沒有任何的想法(這是個壞味道)，<br>但是我打算直接<a href="https://github.com/marsen/Marsen.NetCore.Dojo/commit/12936d65ce60aec90c385716fe3fe90dfb8abad0" target="_blank" rel="noopener">透過測試呼叫我的 Prodction Code</a>  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Case1_Just_Run</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = <span class="keyword">new</span> PickupService();</span><br><span class="line">    <span class="keyword">long</span> storeId = <span class="number">0</span>;</span><br><span class="line">    List&lt;<span class="keyword">string</span>&gt; waybillNo = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;();</span><br><span class="line">    target.GetUpdateStatus(storeId, waybillNo);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因為沒有想法，所以沒有 <code>Assert</code><br>這不算是測試，頂多是<strong>一個小工具</strong>可以隨時呼叫我的 Prodcution Code 而已  </p><h3 id="Do-Todo-建立-HttpClient"><a href="#Do-Todo-建立-HttpClient" class="headerlink" title="Do Todo 建立 HttpClient"></a><a href="https://github.com/marsen/Marsen.NetCore.Dojo/commit/1c1102457355992c1e75fcf47846404d60310f3d" target="_blank" rel="noopener">Do Todo 建立 HttpClient</a></h3><p>這裡依造我以前的開發習慣，直接開幹，<br>把 HttpClient new 出來，刪除 Todo Comment<br>Commited 然後發 Pull Request</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-            <span class="comment"><span class="doctag">///</span>/ TODO 1.建立 HttpClient</span></span><br><span class="line">+            <span class="keyword">var</span> httpClient = <span class="keyword">new</span> HttpClient();</span><br></pre></td></tr></table></figure><h3 id="Do-Todo-建立-auth"><a href="#Do-Todo-建立-auth" class="headerlink" title="Do Todo 建立 auth"></a><a href="https://github.com/marsen/Marsen.NetCore.Dojo/commit/5f5b85ab3ff97170f5ce51fac71e01bac8779b9f" target="_blank" rel="noopener">Do Todo 建立 auth</a></h3><p>通常在串接第三方服務的過程中，<br>第三方會提供沙盒(SandBob)作開發人員測試使用<br>這裡我加了一點遮罩，但實務上如果是沙盒的 auth 資訊<br>我可能會直接 Commit 進去(壞味道)。</p><p>注意!! 這時候還是 Production Code 喔<br>我可以在測試加個 TODO ，<br>未來這段應該被 Mock 而不是 Hard Code 寫死。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-           <span class="comment"><span class="doctag">///</span>/ TODO 2.建立 auth</span></span><br><span class="line">+           <span class="comment"><span class="doctag">///</span>/ TODO login id 抽參數</span></span><br><span class="line">+           httpClient.DefaultRequestHeaders.Add(<span class="string">"login_id"</span>, <span class="string">"testId"</span>);</span><br><span class="line">+           <span class="comment"><span class="doctag">///</span>/ TODO authorization 抽參數</span></span><br><span class="line">+           httpClient.DefaultRequestHeaders.Add(<span class="string">"authorization"</span>, <span class="string">"testAuth"</span>);</span><br></pre></td></tr></table></figure><h3 id="Do-Todo-準備-HttpContent-資料"><a href="#Do-Todo-準備-HttpContent-資料" class="headerlink" title="Do Todo 準備 HttpContent 資料"></a><a href="https://github.com/marsen/Marsen.NetCore.Dojo/commit/cde2c5b36c5848e58feb499656ae4da81c7bd3fc" target="_blank" rel="noopener">Do Todo 準備 HttpContent 資料</a></h3><p>準備 HttpContent 有很多種方式，<br>這裡我選擇 StringContent 來實作。<br>所以要包含物件轉換成 Json String 的行為，<br>需要參考 JsonSerializer 。<br>如果是不太熟悉的開發人員可能會另開 TODO，<br>但是我這裡就一次性的作掉了 。  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-           <span class="comment"><span class="doctag">///</span>/ TODO 3.準備 HttpContent 資料</span></span><br><span class="line"></span><br><span class="line">+           <span class="keyword">var</span> requestContent = JsonSerializer.Serialize(<span class="keyword">new</span> &#123; Type = <span class="string">"DeliveryOrder"</span>, waybillNo &#125;);</span><br><span class="line">+           <span class="keyword">var</span> httpContent = <span class="keyword">new</span> StringContent(requestContent, Encoding.UTF8, <span class="string">"application/json"</span>);</span><br></pre></td></tr></table></figure><h3 id="Take-a-break"><a href="#Take-a-break" class="headerlink" title="Take a break"></a>Take a break</h3><p>稍微休息一下，這裡我的開發流程基本上沒有改變，<br>除了多寫一個(整合)測試，而且每次都會稍微跑一下測試，<br>這個測試其實沒有 Assert ，唯一的幫助只能驗証執行方法時沒有 Exception</p><h3 id="重構"><a href="#重構" class="headerlink" title="重構"></a>重構</h3><p>重構應該落在開發之中，我看到兩個小問題</p><ol><li>我會 inline 掉多餘的參數 requestContent</li><li>Type = “DeliveryOrder” 對我來說是個 magic variable ，我會加 TODO 預計未來抽成常數(壞味道，Why not now ?)</li></ol><h3 id="Do-TODO-4-指定-API-URL-amp-TODO-5-呼叫"><a href="#Do-TODO-4-指定-API-URL-amp-TODO-5-呼叫" class="headerlink" title="Do TODO 4.指定 API URL &amp; TODO 5.呼叫"></a><a href="https://github.com/marsen/Marsen.NetCore.Dojo/commit/fb3fb84442b074838785d3155c6d79969fd5ba30" target="_blank" rel="noopener">Do TODO 4.指定 API URL &amp; TODO 5.呼叫</a></h3><p>修改代碼如下，拿到第一個紅燈<br>因為我沒有指定 url</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"><span class="doctag">///</span>/ TODO 4.指定 API URL</span></span><br><span class="line"><span class="keyword">string</span> url=<span class="keyword">string</span>.Empty;</span><br><span class="line"><span class="keyword">var</span> responseMessage = httpClient.PostAsync(url, httpContent).Result;</span><br></pre></td></tr></table></figure><p>為了修正這個紅燈我會指定 url，<br>實務上我會使用沙盒的 url ，<br>這裡我先用 mock api 取代 ，<br>mock api 的服務為 <a href="https://www.mocky.io/" target="_blank" rel="noopener">mocky</a>，<br>類似的服務很多，也不是本篇的重點，就不贅述了。</p><p>這次一次處理掉兩個 TODO ，<br>表示當初我 TODO Task 切的過小，<br>下次可以切大一些。</p><p>不算壞味道，就當學個經驗。</p><h3 id="第一次-TODO-作完之後"><a href="#第一次-TODO-作完之後" class="headerlink" title="第一次 TODO 作完之後"></a>第一次 TODO 作完之後</h3><p>當初規劃的 TODO Task 都作完了，<br>但是其實工作並沒有完成。  </p><p>我會再作進一步的分析，<br>可以看到原本的 TODO 產生了更多的 TODO ，<br>另外打完 API 後的處理也是個問題。</p><p>這邊要用到 <a href="https://blog.marsen.me/2018/12/27/2018/csm/to_sum_up_scrum/">walking skeleton</a> 的概念，　　<br>簡單說就是，先打通再迭代。</p><p>前面產生的 TODO 項目並不是「最」重要的，<br>我應該先處理回傳的資料，讓整件事情串通。<br>開立 TODO 如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ <span class="comment"><span class="doctag">///</span>/ TODO Parse Response Entity</span></span><br><span class="line">+ <span class="comment"><span class="doctag">///</span>/ TODO Switch Status</span></span><br><span class="line">+ <span class="comment"><span class="doctag">///</span>/ TODO Return ShippingOrderUpdateEntity List</span></span><br></pre></td></tr></table></figure><p>可以得知，我最終會回傳一包 List，<br>這個時候我可以 Assert 了</p><h3 id="修改第一個測試案例"><a href="#修改第一個測試案例" class="headerlink" title="修改第一個測試案例"></a>修改第一個測試案例</h3><p>這個階段我開始撥雲見日，我要很明確的寫下第一個測試案例，<br>第一個案例我會直接作 Happy Case ，<br>也就是目前的呼叫的 API<br>只打一筆，回傳 Done 的資料。</p><p>這裡進一步作需求分析，<br>呼叫完 API 我會收到一大包 JSON 資料，<br>需要轉成我可以處理的物件，<br>其中最重要的欄位 lastStatusId 會回傳各種狀態，  </p><ul><li>DONE</li><li>FAIL</li><li>Arrived</li><li>Shipping</li><li>SMS</li><li>Expiry</li></ul><p>我只處理</p><ul><li>已取貨(DONE) 系統狀態為 Finish</li><li>失敗(FAIL、Expiry) 系統狀態為 Abnormal</li><li>貨到待取(Arrived) 系統狀態為 Arrived</li><li>出貨中(Shipping) 系統狀態為 Processing</li></ul><p>分析後，我的測項將會是向 API 循問一筆資料<br>且回傳一筆為 Done 的 ShippingOrderUpdateEntity 給我。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Case1_Query_Done_waybillNo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = <span class="keyword">new</span> PickupService();</span><br><span class="line">    <span class="keyword">long</span> storeId = <span class="number">1</span>;</span><br><span class="line">    List&lt;<span class="keyword">string</span>&gt; waybillNo = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt; &#123;<span class="string">"TEST2002181800010"</span>&#125;;</span><br><span class="line">    <span class="keyword">var</span> actual = target.GetUpdateStatus(storeId, waybillNo).FirstOrDefault().Status;</span><br><span class="line">    actual.Should().Be(StatusEnum.Finish);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="拿到紅燈-，Do-TODO-Parse-Response-Entity"><a href="#拿到紅燈-，Do-TODO-Parse-Response-Entity" class="headerlink" title="拿到紅燈 ，Do TODO Parse Response Entity"></a>拿到紅燈 ，<a href="https://github.com/marsen/Marsen.NetCore.Dojo/commit/38b41170115d3114953bfc91746ff3342c26dbc9" target="_blank" rel="noopener">Do TODO Parse Response Entity</a></h3><p>如果是 Test Driven 我可能會速解再加案例，<br>但是我現在是 Todo Driven 所以造著 Todo 作事，<br>透過 json2csharp 快速產生 Entity 來轉置 JSON 資料。</p><h3 id="如何從-T-odo-DD-到-T-est-DD"><a href="#如何從-T-odo-DD-到-T-est-DD" class="headerlink" title="如何從 T(odo)DD 到 T(est)DD"></a>如何從 T(odo)DD 到 T(est)DD</h3><p>寫到這裡我已經開始感覺 Todo 的挶限性了，<br>由於這個方法職責不分，所以要測試是困難的，<br>但是 Todo 的作法是無法趨動改變的。</p><p>現在開始，試著把每個 Todo Task 改變成 Test Case</p><h3 id="第二個測試案例開始之前"><a href="#第二個測試案例開始之前" class="headerlink" title="第二個測試案例開始之前"></a>第二個測試案例開始之前</h3><p>再次說明一下商務需求，我可以提供 waybillNo 向 API 循問物流的狀態。<br>理想上我會擁有一堆不同貨態的 waybillNo ，剛好可以作我測試的案例<br>但是在實務上，我拿不到這些案例， 我折衷的作法是透過 Dummy API 來偽裝回傳值。<br>這仍是整合測試的一種，雖然我可以 Mock API 的回傳值，<br>但在網路狀況異常下，測試仍會紅燈</p><p>在作 Dummy API 的前提下，要能抽換 URL<br>所以我會先作 TODO url 抽參數  </p><p>重構如下:</p><p>Production Code</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-        <span class="comment"><span class="doctag">///</span>/ TODO url 抽參數</span></span><br><span class="line">-        <span class="comment"><span class="doctag">///</span>/ string url= "http://www.mocky.io/v2/********";</span></span><br><span class="line">-        <span class="keyword">string</span> url = <span class="string">"http://www.mocky.io/v2/********"</span>;</span><br><span class="line">+        <span class="keyword">string</span> url = <span class="keyword">this</span>._configService.GetAppSetting(<span class="string">"pickup.service.url"</span>);</span><br></pre></td></tr></table></figure><p>Test Mock Return Value</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> configService = Substitute.For&lt;IConfigService&gt;();</span><br><span class="line">configService.GetAppSetting(<span class="string">"pickup.service.url"</span>)</span><br><span class="line">        .Returns(<span class="string">"http://www.mocky.io/v2/********"</span>);</span><br><span class="line"><span class="keyword">var</span> target = <span class="keyword">new</span> PickupService(configService);</span><br></pre></td></tr></table></figure><h3 id="進一步增新測試的可讀性"><a href="#進一步增新測試的可讀性" class="headerlink" title="進一步增新測試的可讀性"></a>進一步增新測試的可讀性</h3><p>可讀性真的是一個很抽象的觀念，之後有機會再深入探討<br>我的修改如下，主要的想法是「讓測試案例可以像對話般被閱讀」</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Case1_Query_Done_waybillNo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> actual = QueryWithDoneWaybillNo();</span><br><span class="line">    actual.Should().Be(StatusEnum.Finish);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第二個測試案例-出貨中-Shipping"><a href="#第二個測試案例-出貨中-Shipping" class="headerlink" title="第二個測試案例 - 出貨中(Shipping)"></a><a href="https://github.com/marsen/Marsen.NetCore.Dojo/commit/611c73975702605a7420c991327ca1e4ed45ad46" target="_blank" rel="noopener">第二個測試案例 - 出貨中(Shipping)</a></h3><p>這裡就是用簡單的 Test Case 趨動 Production Code 的代碼生成</p><p>Test Code</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Case2_Query_Shipping_waybillNo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> actual = QueryWithShippingWaybillNo();</span><br><span class="line">    actual.Should().Be(StatusEnum.Processing);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Production Code (部份)</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-           <span class="comment"><span class="doctag">///</span>/ TODO Switch Status</span></span><br><span class="line">-           <span class="comment"><span class="doctag">///</span>/ TODO Return ShippingOrderUpdateEntity List</span></span><br><span class="line">-           result.Add(<span class="keyword">new</span> ShippingOrderUpdateEntity &#123;Status = StatusEnum.Finish&#125;);</span><br><span class="line">+           <span class="keyword">foreach</span> (<span class="keyword">var</span> c <span class="keyword">in</span> obj.content)</span><br><span class="line">+           &#123;</span><br><span class="line">+               <span class="keyword">switch</span> (c.lastStatusId)</span><br><span class="line">+               &#123;</span><br><span class="line">+                   <span class="keyword">case</span> <span class="string">"DONE"</span>:</span><br><span class="line">+                       result.Add(<span class="keyword">new</span> ShippingOrderUpdateEntity &#123;Status = StatusEnum.Finish&#125;);</span><br><span class="line">+                       <span class="keyword">break</span>;</span><br><span class="line">+                   <span class="keyword">case</span> <span class="string">"Shipping"</span>:</span><br><span class="line">+                       result.Add(<span class="keyword">new</span> ShippingOrderUpdateEntity &#123;Status = StatusEnum.Processing&#125;);</span><br><span class="line">+                       <span class="keyword">break</span>;</span><br><span class="line">+               &#125;</span><br><span class="line">+           &#125;</span><br></pre></td></tr></table></figure><p>順手再重構了一下測試，<br>希望能提高可讀性</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Case2_Query_Shipping_waybillNo</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> actual = QueryWaybillNoWith(UrlMockShipping);</span><br><span class="line">    actual.Should().Be(StatusEnum.Processing);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="剩下的測試案例"><a href="#剩下的測試案例" class="headerlink" title="剩下的測試案例"></a>剩下的測試案例</h3><ul><li>失敗(FAIL) 系統狀態為 Abnormal</li><li>失敗(Expiry) 系統狀態為 Abnormal</li><li>貨到待取(Arrived) 系統狀態為 Arrived</li></ul><h3 id="剩下的-TODO-項目"><a href="#剩下的-TODO-項目" class="headerlink" title="剩下的 TODO 項目"></a>剩下的 TODO 項目</h3><p>這個時候基本的功能都好了，來收拾一下剩下的 TODO 項目吧<br>主要都是取得設定值的功能，實務上這些設定值可能來自不同的服務<br>Database、Config Service 或 Settring API 等…<br>我在這裡先簡化成 <code>IStoreSettingService</code> 取值就好。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-           <span class="comment"><span class="doctag">///</span>/ TODO login id 抽參數</span></span><br><span class="line">-           httpClient.DefaultRequestHeaders.Add(<span class="string">"login_id"</span>, <span class="string">"testId"</span>);</span><br><span class="line"></span><br><span class="line">+           <span class="keyword">var</span> loginId = <span class="keyword">this</span>._storeSettingService.GetValue(storeId,<span class="string">"pickup.service"</span>,<span class="string">"loginId"</span>);</span><br><span class="line">+           httpClient.DefaultRequestHeaders.Add(<span class="string">"login_id"</span>, loginId);</span><br></pre></td></tr></table></figure><p>同時測試代碼也要修改，<br>注意這裡的 testId 其實是 Pickup Service 提供給我們的測試 Id<br>在 Production 你需要整合進你的 Database、Config Service 或 Settring API 裡<br>在整合測試可以直接 mock 它</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_storeSettingService.GetValue(_testStoreId, <span class="string">"pickup.service"</span>, <span class="string">"loginId"</span>).Returns(<span class="string">"testId"</span>);</span><br></pre></td></tr></table></figure><p>Auth 也是相同的處理</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-           <span class="comment"><span class="doctag">///</span>/ TODO authorization 抽參數</span></span><br><span class="line">-           httpClient.DefaultRequestHeaders.Add(<span class="string">"authorization"</span>, <span class="string">"testAuth"</span>);</span><br><span class="line">+           <span class="keyword">var</span> auth = <span class="keyword">this</span>._storeSettingService.GetValue(storeId,<span class="string">"pickup.service"</span>,<span class="string">"auth"</span>);</span><br><span class="line">+           httpClient.DefaultRequestHeaders.Add(<span class="string">"authorization"</span>, auth);</span><br></pre></td></tr></table></figure><p>Testing Mock</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_storeSettingService.GetValue(_testStoreId, <span class="string">"pickup.service"</span>, <span class="string">"auth"</span>).Returns(<span class="string">"testAuth"</span>);</span><br></pre></td></tr></table></figure><h2 id="心得小結"><a href="#心得小結" class="headerlink" title="心得小結"></a>心得小結</h2><p>TDD 不一定要用單元測試,<br>你可以試著從 T(Todo) Driven Development 到 T(Test) Driven Development<br>思考一下你目前的開發方式，<br>不要急著 TDD ，想像一下你開發到什麼程度會想要驗証(測試)，<br>試著在這個時間點加上測試就好，<br>這樣的開發方式，會比較貼近你的開發方式，<br>同時也可以練習寫測試，你會發現很多問題。<br>比如說:  </p><ul><li>你跟本沒有足夠了解需求，導致你寫不出驗收條件。</li><li>你根本不熟悉測試框架或是相關的 Library。</li><li>甚至你跟本不熟悉你賴以為生的開發工具與程式語言。</li><li>或是你跟本不會 Debug 跟 Google 而且以前你一直以為你會。</li><li>你把代碼搞得一蹋糊塗，而且沒有人愛你</li></ul><p>下一次試著先寫測試吧，改變一下自已的工作方式。<br>平順把你的開發方式轉換成 TDD 吧 。</p><p>下一篇我會透過整合測試，發現一些異常狀況，<br>並試著加上測試案例，並試著趨動。</p><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;上次作完金流後，這次換作物流，&lt;br&gt;在開發的過程中首次全程用 TDD 進行(?)，&lt;br&gt;因為某些因素，測試沒有進版控，所
      
    
    </summary>
    
    
    
      <category term="Unit Testing" scheme="https://blog.marsen.me/tags/Unit-Testing/"/>
    
      <category term="TDD" scheme="https://blog.marsen.me/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記] 用 TDD 寫一個 API Pay </title>
    <link href="https://blog.marsen.me/2020/01/29/2020/tdd_pay_api/"/>
    <id>https://blog.marsen.me/2020/01/29/2020/tdd_pay_api/</id>
    <published>2020-01-29T04:46:14.000Z</published>
    <updated>2020-03-08T09:31:52.221Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求說明"><a href="#需求說明" class="headerlink" title="需求說明"></a>需求說明</h2><p>金流系統透過打 API 與第三方介接來進行付款，<br>為了追蹤金流，在打 API 的過程中，業務單位要求要帶著 RequestId 。<br>再進行付款。<br>而 RequestId 由另一個專門負責提供 RequestId 的 API 來提供。</p><p>整體流程如下:</p><ol><li><p>打 API 取得 RequestId</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET &#123;&#123;url&#125;&#125;/api/&#123;&#123;version&#125;&#125;/requestId</span><br></pre></td></tr></table></figure></li><li><p>組合付款資料與 RequestId</p></li><li><p>打 API 完成付款</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">POST &#123;&#123;url&#125;&#125;/api/&#123;&#123;version&#125;&#125;/pay/CreditCard/&#123;&#123;transationId&#125;&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="第一個-Case，Pay-的時候應該呼叫-GET-reguestId-1次"><a href="#第一個-Case，Pay-的時候應該呼叫-GET-reguestId-1次" class="headerlink" title="第一個 Case，Pay 的時候應該呼叫 GET reguestId 1次"></a>第一個 Case，Pay 的時候應該呼叫 GET reguestId 1次</h2><p>問題，我需要驗証 HttpClient 呼叫的 <code>url</code>與<code>次數</code>。</p><p>一開始會寫成這樣，</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay_should_Get_requestId</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = <span class="keyword">new</span> PaymentService();</span><br><span class="line">    target.Pay();</span><br><span class="line">    httpClient.Received().GetAsync(<span class="string">"https://testing.url/api/v1/requestId"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我本來就預計使用 HttpClient 來呼叫 API,<br>但是直接使用 HttpClient 會直接產生耦合，<br>所以我建立一個介面來包裝它。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IHttpClient</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接著馬上建立類別 <code>HttpClientProxy</code> 實作 <code>IHttpClient</code>,<br>這個時候我會知道我會使用 GetAsync 的方法，<br>所以我會讓 <code>IHttpClient</code> 長出這個同名方法，<br>實作很單純，就是呼叫  HttpClient().GetAsync 方法。</p><blockquote><p>幾個想法，<br>這樣算是 Proxy Pattern 嗎 ? 我覺得算是:P<br>另一點，這個階段我會擔心 HttpClient 的問題,<br>不處理是對的嗎 ?<br>如果不刻意處理的話 HttpClientProxy 好像會長不出來  </p></blockquote><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IHttpClient</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">Task&lt;HttpResponseMessage&gt; <span class="title">GetAsync</span>(<span class="params"><span class="keyword">string</span> requestUri</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HttpClientProxy</span> : <span class="title">IHttpClient</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Task&lt;HttpResponseMessage&gt; <span class="title">GetAsync</span>(<span class="params"><span class="keyword">string</span> requestUri</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HttpClient().GetAsync(requestUri);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完成這階段的修改後，我才可以透過 Framework 來 Mock IHttpClient，<br>寫好的測試如下，順利拿到第一個紅燈:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay_should_Get_requestId</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IHttpClient httpClient = Substitute.For&lt;IHttpClient&gt;();</span><br><span class="line">    <span class="keyword">var</span> target = <span class="keyword">new</span> PaymentService(httpClient);</span><br><span class="line">    target.Pay();</span><br><span class="line">    httpClient.Received().GetAsync(<span class="string">"https://testing.url/api/v1/requestId"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>馬上修改 Production Code ，拿到綠燈。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PaymentService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IHttpClient _httpClient;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PaymentService</span>(<span class="params">IHttpClient httpClient</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _httpClient = httpClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Pay</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _httpClient.GetAsync(<span class="string">"https://testing.url/api/v1/requestId"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二個-Case，Pay-的時候應該呼叫-POST-Pay-CreditCard-1-次"><a href="#第二個-Case，Pay-的時候應該呼叫-POST-Pay-CreditCard-1-次" class="headerlink" title="第二個 Case，Pay 的時候應該呼叫 POST Pay CreditCard 1 次"></a>第二個 Case，Pay 的時候應該呼叫 POST Pay CreditCard 1 次</h2><p>測試案例:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay_should_Post_Pay_CreditCard</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IHttpClient httpClient = Substitute.For&lt;IHttpClient&gt;();</span><br><span class="line">    <span class="keyword">var</span> target = <span class="keyword">new</span> PaymentService(httpClient);</span><br><span class="line">    target.Pay();</span><br><span class="line">    <span class="keyword">this</span>._httpClient.Received().PostAsync(<span class="string">"https://testing.url/api/v1/pay/CreditCard"</span>, Arg.Any&lt;HttpContent&gt;());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 Production Code</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Pay</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> readAsStringAsync = <span class="keyword">this</span>._httpClient.GetAsync(<span class="string">"https://testing.url/api/v1/requestId"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>._httpClient.PostAsync(<span class="string">"https://testing.url/api/v1/pay/CreditCard"</span>, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重構測試</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay_should_Get_requestId</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WhenPay();</span><br><span class="line">    ShouldGetRequestId();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay_should_Post_Pay_CreditCard</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WhenPay();</span><br><span class="line">    ShouldPayByCreditCard();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">WhenPay</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = <span class="keyword">new</span> PaymentService(_httpClient);</span><br><span class="line">    target.Pay();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ShouldGetRequestId</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._httpClient.Received(<span class="number">1</span>).GetAsync(<span class="string">$"<span class="subst">&#123;_testingApiUrl&#125;</span>requestId"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ShouldPayByCreditCard</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._httpClient.Received(<span class="number">1</span>).PostAsync(<span class="string">$"<span class="subst">&#123;_testingApiUrl&#125;</span>pay/CreditCard"</span>,</span><br><span class="line">        Arg.Any&lt;HttpContent&gt;()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第三個-Case，Pay-的時候應該先呼叫-Get-RequestId-再-POST-Pay-CreditCard"><a href="#第三個-Case，Pay-的時候應該先呼叫-Get-RequestId-再-POST-Pay-CreditCard" class="headerlink" title="第三個 Case，Pay 的時候應該先呼叫 Get RequestId 再 POST Pay CreditCard"></a>第三個 Case，Pay 的時候應該先呼叫 Get RequestId 再 POST Pay CreditCard</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pay_should_Get_RequestId_Before_Post_Pay_CreditCard</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WhenPay();</span><br><span class="line">    Received.InOrder(() =&gt;</span><br><span class="line">    &#123;</span><br><span class="line">        ShouldGetRequestId();</span><br><span class="line">        ShouldPayByCreditCard();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>想法，有了第三個案例，我還需要前面兩個案例嗎 ?</p></blockquote><p>下一步，調整 ShouldPayByCreditCard 的 Assert 邏輯，<br>原因是實務上我必須將 RequestId 帶入 Post Pay 時的 HttpContent 裡面。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ShouldPayByCreditCard</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._httpClient.Received(<span class="number">1</span>).PostAsync(<span class="string">$"<span class="subst">&#123;_testingApiUrl&#125;</span>pay/CreditCard"</span>,</span><br><span class="line">    Arg.Is&lt;HttpContent&gt;(x =&gt; x.ReadAsStringAsync().Result.Contains(_testRequestId)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Prodouction Code 因而長出 <code>PayEntity</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Pay</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> requestId = <span class="keyword">this</span>._httpClient.GetAsync(<span class="string">"https://testing.url/api/v1/requestId"</span>).Result.Content</span><br><span class="line">        .ReadAsStringAsync().Result;</span><br><span class="line">    HttpContent content = <span class="keyword">new</span> StringContent(</span><br><span class="line">    JsonSerializer.Serialize(</span><br><span class="line">        <span class="keyword">new</span> PayEntity</span><br><span class="line">        &#123;</span><br><span class="line">            RequestId = requestId</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>._httpClient.PostAsync(<span class="string">"https://testing.url/api/v1/pay/CreditCard"</span>, content);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PayEntity</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> RequestId &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Case4-組合資料邏輯"><a href="#Case4-組合資料邏輯" class="headerlink" title="Case4 組合資料邏輯"></a>Case4 組合資料邏輯</h2><h3 id="4-1-組合-PayEntity-的邏輯"><a href="#4-1-組合-PayEntity-的邏輯" class="headerlink" title="4.1 組合 PayEntity 的邏輯"></a>4.1 組合 PayEntity 的邏輯</h3><p>這次我假設外部的元件已組合好 <code>PayEntity</code> 傳入 PaymentService.Pay 方法，<br>唯一的組合邏輯就只剩 RequestId。<br>至於外部的 PayEntity 組合邏輯如何用 TDD 長出 Production Code 可以參考<a href="https://blog.marsen.me/2020/01/17/2020/tdd_with_parse_json/">這篇</a>。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">WhenPay</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = <span class="keyword">new</span> PaymentService(_httpClient);</span><br><span class="line">    target.Pay(<span class="keyword">new</span> PayEntity());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Pay</span>(<span class="params">PayEntity payEntity</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">var</span> requestId = <span class="keyword">this</span>._httpClient.GetAsync(<span class="string">"https://testing.url/api/v1/requestId"</span>).Result.Content</span><br><span class="line">         .ReadAsStringAsync().Result;</span><br><span class="line">     HttpContent content = <span class="keyword">new</span> StringContent(</span><br><span class="line">         JsonSerializer.Serialize(</span><br><span class="line">             payEntity.RequestId = requestId));</span><br><span class="line">      <span class="keyword">this</span>._httpClient.PostAsync(<span class="string">"https://testing.url/api/v1/pay/CreditCard"</span>, content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最後,將 api 的 url 也抽成可參數化。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PaymentServiceTests</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._httpClient = Substitute.For&lt;IHttpClient&gt;();</span><br><span class="line">    <span class="keyword">this</span>._httpClient.GetAsync(Arg.Any&lt;<span class="keyword">string</span>&gt;()).ReturnsForAnyArgs(</span><br><span class="line">        Task.FromResult(</span><br><span class="line">            <span class="keyword">new</span> HttpResponseMessage</span><br><span class="line">            &#123;</span><br><span class="line">                Content = <span class="keyword">new</span> StringContent(_testRequestId)</span><br><span class="line">            &#125;));</span><br><span class="line">    <span class="keyword">this</span>._configure = Substitute.For&lt;IConfigure&gt;();</span><br><span class="line">    <span class="keyword">this</span>._configure.Setting(<span class="string">"PayService.Url"</span>).Returns(_testingApiUrl);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Production Code</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PaymentService</span>(<span class="params">IHttpClient httpClient, IConfigure configure</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>._httpClient = httpClient;</span><br><span class="line">    <span class="keyword">this</span>._configure = configure;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Pay</span>(<span class="params">PayEntity payEntity</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> apiUrl = <span class="keyword">this</span>._configure.Setting(<span class="string">"PayService.Url"</span>);</span><br><span class="line">    <span class="keyword">var</span> requestId = <span class="keyword">this</span>._httpClient.GetAsync(<span class="string">$"<span class="subst">&#123;apiUrl&#125;</span>requestId"</span>).Result.Content</span><br><span class="line">        .ReadAsStringAsync().Result;</span><br><span class="line">    HttpContent content = <span class="keyword">new</span> StringContent(</span><br><span class="line">        JsonSerializer.Serialize(</span><br><span class="line">        payEntity.RequestId = requestId));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>._httpClient.PostAsync(<span class="string">$"<span class="subst">&#123;apiUrl&#125;</span>pay/CreditCard"</span>, content);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>在 HttpClient 那邊卡蠻久的，用介面的方法包裝起來也不知道是否合適。<br>網路上有提供許多不同的作法，單元測試的 TDD 好像趨動不太出來 Production Code<br>是否需要加入整合測試，甚至是透過呼叫 Production Code 去打 API 作端到端測試，來趨動開發 ?<br>TDD 的 T 是不是不只是 Unit Test 呢 ?</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://chrissainty.com/unit-testing-with-httpclient/" target="_blank" rel="noopener">https://chrissainty.com/unit-testing-with-httpclient/</a></li><li><a href="https://dotblogs.com.tw/jakeuj/2019/01/25/httpclient" target="_blank" rel="noopener">https://dotblogs.com.tw/jakeuj/2019/01/25/httpclient</a></li><li><a href="https://blog.darkthread.net/blog/httpclient-sigleton/" target="_blank" rel="noopener">https://blog.darkthread.net/blog/httpclient-sigleton/</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;需求說明&quot;&gt;&lt;a href=&quot;#需求說明&quot; class=&quot;headerlink&quot; title=&quot;需求說明&quot;&gt;&lt;/a&gt;需求說明&lt;/h2&gt;&lt;p&gt;金流系統透過打 API 與第三方介接來進行付款，&lt;br&gt;為了追蹤金流，在打 API 的過程中，業務單位要求要帶著 Reque
      
    
    </summary>
    
    
    
      <category term="Unit Testing" scheme="https://blog.marsen.me/tags/Unit-Testing/"/>
    
      <category term="TDD" scheme="https://blog.marsen.me/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title>[閱讀筆記] 開刀房裡的沉思 -- 一位外科醫師的精進</title>
    <link href="https://blog.marsen.me/2020/01/28/2020/book/better_by_atul_gawande/"/>
    <id>https://blog.marsen.me/2020/01/28/2020/book/better_by_atul_gawande/</id>
    <published>2020-01-28T05:18:10.000Z</published>
    <updated>2020-03-08T09:31:52.221Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因為<a href="https://blog.marsen.me/2019/08/07/2019/book/apprenticeship_patterns/">「學徒模式」</a>在最後的章節多次提到這本書，<br>於是去了圖書館借來翻了一下，內容大多與醫療與醫生相關，<br>作者在醫療上如何追求卓越，精益求精 ?<br>作為一個開發人員，能否借鏡不同產業的精進旅程帶來一些反思 ?  </p><p>簡單先作個小結，作者認為精進有三個基本要素</p><ol><li>努力不懈，簡單卻最困難，如何堅持?</li><li>務求正確, 這裡面臨了人性的挑戰，包含貪心、防衛心理和堅持與適時放棄</li><li>創新，勇於認錯、願意改變、見賢思齊</li></ol><p>引述一小段。</p><blockquote><p>我們不只是活在一個人的世界，<br>必須和別人一起工作，與科學一起進步，<br>也活在混亂、複雜的現實世界裡，而且任重道遠。<br>……<br>光是擔責任還不夠，選要想想如何能做得更好。</p></blockquote><h2 id="章節概要"><a href="#章節概要" class="headerlink" title="章節概要"></a>章節概要</h2><h3 id="CH-1-禍手"><a href="#CH-1-禍手" class="headerlink" title="CH 1 禍手"></a>CH 1 禍手</h3><p>簡單卻作不到的事。</p><h4 id="創新者的困境"><a href="#創新者的困境" class="headerlink" title="創新者的困境"></a>創新者的困境</h4><p>山姆維茲雖然推論出醫生不洗手是產婦致死的原兇，<br>但在同業同事間推動卻因批判與溝通而大大的失敗，<br>成為了悲劇英雄。</p><h4 id="現場執行的困境"><a href="#現場執行的困境" class="headerlink" title="現場執行的困境"></a>現場執行的困境</h4><ul><li>洗手的 SOP :首先缷下手錶，戒指…其次，用溫水潤濕雙手…最後沖水至少 30 秒…然後拿擦手紙…事實上沒有人能夠謹守這樣的步驟。</li><li>「不問你為什麼不洗手，而是問你為什麼不能洗手 ?」答案多半是:沒時間。</li><li>把病房變得像開刀房，使維持清潔變得容易，當他另謀高就後，原單位故態復萌、改革挫敗、白費功夫</li><li>「正向偏差」:透過內部推廣取代指示改變，詢問現場一線取代宣導與命令(現場改善、由下而上)</li></ul><blockquote><p>反思:<br>現場如何推動單元測試與 Clean Code ?<br>只靠個人 ? 明星開發者 ? 嚴格的規定 ? 無處不在的口號標語 ?  </p></blockquote><h3 id="Ch-6-薪事誰人知"><a href="#Ch-6-薪事誰人知" class="headerlink" title="Ch 6 薪事誰人知"></a>Ch 6 薪事誰人知</h3><p>醫師的困境是按件計酬，而存在與之對立的醫療保險業者，<br>原本醫療保險的立意是良善的，避免有的醫生漫天喊價。<br>但是時至今日，美國的醫療保險規則太過複雜，<br>引入第三方(保險業者)不但沒有幫助，反而變得更加複雜，<br>醫生無法得到合理的收費，沒有保險的病人無法得到醫療照護。</p><p>馬修．松頓保健計劃，在初期簡化與保險公司打交道的複雜性，<br>提昇了照護病人的成效，但在組織成長變大後，<br>諸多的規定與合約讓這個保險計劃也由保險集團接手，最終宣告結束。</p><h3 id="Ch-9-艾卜佳評分表"><a href="#Ch-9-艾卜佳評分表" class="headerlink" title="Ch 9 艾卜佳評分表"></a>Ch 9 艾卜佳評分表</h3><p>對人類來說，生產一直是一件困難的事。<br>對新生兒與孕婦在生產的過程中一不小心就有生命危險，<br>單鈎、產鉗、多達數十種的助產法、剖腹產等…</p><p>二十世紀複，隨著知識與器械的進步，研究卻表明醫院生產的新生兒死亡率高於產婆接生<br>生產流程的革新與標準化才進一步確保了新生兒的生存率<br>艾卜佳評分表在這當中擔任關鍵的角色，而且相當簡單。<br>膚色、哭聲、呼吸、四肢活動力、心跳次數等，簡單的分為 0、1、2 三種評分，<br>這讓主觀評量變成了客觀，有了評量才有改善的方向。<br>新生兒加護病房、產婦脊髓麻醉與胎兒心跳監視器也相應而生。</p><blockquote><p>反思 1 :<br>如何客觀評量績效 ?<br>書中說明產科的進步並不在嚴謹的「實證醫學」而是一個簡單的評分表。  </p><p>那麼如何評量代碼質量 ?  </p><ul><li>如何建立一個開發人員的評分表 ?  </li><li>如何建立代碼的艾卜佳評分表呢 ?</li></ul><p>反思 2 :<br>產鉗在上個世紀是一門技藝，<br>儘管有研究表明剖腹產未必優於產鉗，但這門技藝仍就消失了。<br>如果產鉗是因為標準化的流程而消失，那軟體工程呢 ?<br>TDD 會是軟體工程裡的產鉗嗎 ? 2014 年的 <a href="http://joe-dev.blogspot.com/2014/06/tdd-is-dead.html" target="_blank" rel="noopener">TDD is died</a> 仍值得回味再三。</p><p>績效又該如何轉換成<a href="https://earnings.dgbas.gov.tw/experience_sub_01.aspx" target="_blank" rel="noopener">合理的收入</a>呢 ?</p></blockquote><h3 id="Ch-10-醫師的成績單"><a href="#Ch-10-醫師的成績單" class="headerlink" title="Ch 10 醫師的成績單"></a>Ch 10 醫師的成績單</h3><p>辛辛那提的醫生全力以赴，仍然只是中等平庸的醫院，<br>在本書中，醫生的技藝是呈現鐘型曲線。<br>作者表達的意思是，病人都想找最好的醫生，但在醫療的這個領域，<br>大多數都是平庸的。<br>在學徒模式書中，工程師是左傾的曲線，暗示大多數工程師都是拙劣的。<br><img src="/images/2020/1/better_by_atul_gawande_02.jpg" alt="左傾的曲線"></p><blockquote><p>反思<br>雖然手頭上沒有完整數據佐証，但是一般醫生至少需要 7 年的專業訓練，<br>而軟體工程業界，中途出家的非本科工程師比比皆是，<br>一線從業人員的水平參疵不齊，甚至有達克效應</p><p>這個行業本身歷史很短也很年輕，<br>影響範圍卻相當的廣大，<br>整個世界各行各業軟體都能參予其中。<br>缺乏調研、認証相關機構，但是我相信在未來這點能夠逐步改善</p></blockquote><p><img src="/images/2020/1/better_by_atul_gawande_01.jpg" alt="Dunning-Kruger Effec">  </p><h2 id="其它章節"><a href="#其它章節" class="headerlink" title="其它章節"></a>其它章節</h2><ul><li>一個都不能漏</li><li>浴血</li><li>裸</li><li>纏訟</li><li>死刑室醫師</li><li>戰鬥</li><li>我的印度之旅</li></ul><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>2020 過年寫下這篇文章，幾個事件與書共鳴，<br>反思記錄一下。</p><p>先是 2020 年<a href="https://www.ptt.cc/bbs/Soft_Job/M.1579798528.A.0A9.html" target="_blank" rel="noopener">館長的新聞</a> 。  </p><p>館長已經揚言要提告了，他的需求是能同時十萬人上線的網站，<br>報價要 300 萬 + 30 萬壓測費，透過熟人介紹接案。<br>個人小小碎唸，在軟體業界常常有亂喊價，亂報時程的常態，<br>最後損失的往往是品質。</p><ul><li>盲信的後果，你沒有專業要如何相信對方呢 ? 反過來，你有專業要如何讓客戶相信你呢 ?  </li><li>本例中館長揚言要提告工程師，但我疑惑為什麼不是中間人、接案公司或業務而是工程師 ? 窗口真的是工程師嗎 ?  </li><li>壓測應該收多少錢 ? 10萬人同時上線搶購，要作到什麼程度 ?  </li><li>資安避險應收多少錢 ? 要作到什麼程度 ?  </li><li>功能的缺失(帳務、發票 etc…)。如何驗收呢 ?  為何驗收失敗仍要行銷 ?  </li></ul><p>第二個反思，公開透明的組織運作，將會成為組織是否能夠進步改善的關鍵<br>2020 的武漢肺炎是反向的例子，</p><ul><li>武漢市長表示未被授權, 依法不能批露疫情。</li><li>WHO 錯誤評估風險等級</li><li>ICAO 屏避支持台灣的帳號</li><li>陳秋實、面具人、口罩哥與黨與組織的各種輿情論戰。</li></ul><p>這件事還沒有結束，就不多作評論了。<br>後續再作追踪。</p><p>最後，今年我的侄子出生了，<br>因為剛好讀到產婦相關章節，所以特別有感<br>願他平安成長。</p><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;因為&lt;a href=&quot;https://blog.marsen.me/2019/08/07/2019/book/apprenticeship_
      
    
    </summary>
    
    
    
      <category term="閱讀筆記" scheme="https://blog.marsen.me/tags/%E9%96%B1%E8%AE%80%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記] 記錄用 TDD 寫一個 Entity Parser </title>
    <link href="https://blog.marsen.me/2020/01/17/2020/tdd_with_parse_json/"/>
    <id>https://blog.marsen.me/2020/01/17/2020/tdd_with_parse_json/</id>
    <published>2020-01-16T16:14:31.000Z</published>
    <updated>2020-03-08T09:31:52.222Z</updated>
    
    <content type="html"><![CDATA[<h2 id="如何用-TDD-寫一個-Entity-Parser"><a href="#如何用-TDD-寫一個-Entity-Parser" class="headerlink" title="如何用 TDD 寫一個 Entity Parser"></a>如何用 TDD 寫一個 Entity Parser</h2><p>情境，假設有一包 JSON 檔案如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"FirstName"</span>: <span class="string">"Tian"</span>,</span><br><span class="line">  <span class="attr">"LastName"</span>: <span class="string">"Tank"</span>,</span><br><span class="line">  <span class="attr">"BirthDate"</span>: <span class="string">"1989/06/04"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我想轉換成 C# Entity ，<br>這個 Entity 裡面包含兩個商業邏輯</p><ol><li>提供全名</li><li>提供年紀</li></ol><p>ex:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Name &#x3D; Tank Tian</span><br><span class="line">Age &#x3D; 35</span><br></pre></td></tr></table></figure><p>如何透過 TDD 的工序達到這個目標 ?</p><h3 id="Arrange"><a href="#Arrange" class="headerlink" title="Arrange"></a>Arrange</h3><p>傳入的 JSON 字串如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"FirstName"</span>: <span class="string">"Tian"</span>,</span><br><span class="line">  <span class="attr">"LastName"</span>: <span class="string">"Tank"</span>,</span><br><span class="line">  <span class="attr">"BirthDate"</span>: <span class="string">"1989/06/04"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Act"><a href="#Act" class="headerlink" title="Act"></a>Act</h3><p>執行 Parse 方法之後</p><h3 id="Assert"><a href="#Assert" class="headerlink" title="Assert"></a>Assert</h3><p>回傳一個 PersonEntity ，裡面的資料應該要是</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> PersonEntity &#123;</span><br><span class="line">    Name = <span class="string">"Tian Tank"</span></span><br><span class="line">    Age = <span class="number">30</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="工序"><a href="#工序" class="headerlink" title="工序"></a>工序</h3><h4 id="Step1"><a href="#Step1" class="headerlink" title="Step1"></a>Step1</h4><p>第一個案例，我會只驗証 Name 的組合邏輯  </p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CovertName</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/Arrange</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/Act</span></span><br><span class="line">    <span class="keyword">var</span> actual = _target.Parse(testJson).Name;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/Assert</span></span><br><span class="line">    actual.Should().BeEquivalentTo(<span class="string">"Tian Tank"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Production Code 簡單寫可以這樣,<br>這個可以說是極致的 Baby Step 吧 ?</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PersonaEntity <span class="title">Parse</span>(<span class="params"><span class="keyword">string</span> json</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PersonaEntity</span><br><span class="line">    &#123;</span><br><span class="line">        Name = <span class="string">"Tian Tank"</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不過這個階段可以透過 IDE 工具長出 PersnaEntity</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PersonaEntity</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Step1-1"><a href="#Step1-1" class="headerlink" title="Step1.1"></a>Step1.1</h4><p>透過分析過需求，我們應該可以理解到 PersonaEntity.Name<br>其實是 FirstName 與 LastName 的組合，<br>所以我們可重構一下 Production Code，<br>這個步伐會大步一點，如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PersonaEntity <span class="title">Parse</span>(<span class="params"><span class="keyword">string</span> json</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PersonaEntity</span><br><span class="line">    &#123;</span><br><span class="line">        Name = <span class="string">"Tian"</span> + <span class="string">"Tank"</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Step1-2"><a href="#Step1-2" class="headerlink" title="Step1.2"></a>Step1.2</h4><p>Oops !! 我拿到了一個紅燈，因為我忘了<strong>空白</strong>，<br>修改 Production Code 如下，得到綠燈</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PersonaEntity <span class="title">Parse</span>(<span class="params"><span class="keyword">string</span> json</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PersonaEntity</span><br><span class="line">    &#123;</span><br><span class="line">        Name = <span class="string">"Tian"</span> +<span class="string">" "</span>+ <span class="string">"Tank"</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Step1-3"><a href="#Step1-3" class="headerlink" title="Step1.3"></a>Step1.3</h4><p>開始重構，這樣的 Baby Step 會不會真的太小步了 ?</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PersonaEntity <span class="title">Parse</span>(<span class="params"><span class="keyword">string</span> json</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> firstName = <span class="string">"Tian"</span>;</span><br><span class="line">    <span class="keyword">var</span> lastName = <span class="string">"Tank"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PersonaEntity</span><br><span class="line">    &#123;</span><br><span class="line">        Name = firstName + <span class="string">" "</span> + lastName</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Step1-4"><a href="#Step1-4" class="headerlink" title="Step1.4"></a>Step1.4</h4><p>長出新的 Entity</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PersonaEntity <span class="title">Parse</span>(<span class="params"><span class="keyword">string</span> json</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> firstName = <span class="string">"Tian"</span>;</span><br><span class="line">    <span class="keyword">var</span> lastName = <span class="string">"Tank"</span>;</span><br><span class="line">    <span class="keyword">var</span> originEntity = <span class="keyword">new</span> PersonaOriginEntity</span><br><span class="line">    &#123;</span><br><span class="line">        FirstName = firstName,</span><br><span class="line">        LastName = lastName</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PersonaEntity</span><br><span class="line">    &#123;</span><br><span class="line">        Name = <span class="string">$"<span class="subst">&#123;originEntity.FirstName&#125;</span> <span class="subst">&#123;originEntity.LastName&#125;</span>"</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PersonaOriginEntity</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> LastName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> FirstName &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Step1-5"><a href="#Step1-5" class="headerlink" title="Step1.5"></a>Step1.5</h4><p>重構</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PersonaEntity <span class="title">Parse</span>(<span class="params"><span class="keyword">string</span> json</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> originEntity = <span class="keyword">new</span> PersonaOriginEntity</span><br><span class="line">    &#123;</span><br><span class="line">        FirstName = <span class="string">"Tian"</span>,</span><br><span class="line">        LastName = <span class="string">"Tank"</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PersonaEntity</span><br><span class="line">    &#123;</span><br><span class="line">        Name = <span class="string">$"<span class="subst">&#123;originEntity.FirstName&#125;</span> <span class="subst">&#123;originEntity.LastName&#125;</span>"</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Step1-6"><a href="#Step1-6" class="headerlink" title="Step1.6"></a>Step1.6</h4><p>改用 JSON Parser</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PersonaEntity <span class="title">Parse</span>(<span class="params"><span class="keyword">string</span> json</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">//var originEntity = new PersonaOriginEntity</span></span><br><span class="line">   <span class="comment">//&#123;</span></span><br><span class="line">   <span class="comment">//    FirstName = "Tian",</span></span><br><span class="line">   <span class="comment">//    LastName = "Tank"</span></span><br><span class="line">   <span class="comment">//&#125;;</span></span><br><span class="line">   <span class="keyword">var</span> originEntity = JsonSerializer.Deserialize&lt;PersonaOriginEntity&gt;(json);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> PersonaEntity</span><br><span class="line">   &#123;</span><br><span class="line">       Name = <span class="string">$"<span class="subst">&#123;originEntity.FirstName&#125;</span> <span class="subst">&#123;originEntity.LastName&#125;</span>"</span></span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Step1-7"><a href="#Step1-7" class="headerlink" title="Step1.7"></a>Step1.7</h4><p>移除無用代碼</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PersonaEntity <span class="title">Parse</span>(<span class="params"><span class="keyword">string</span> json</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="comment">//var originEntity = new PersonaOriginEntity</span></span><br><span class="line">   <span class="comment">//&#123;</span></span><br><span class="line">   <span class="comment">//    FirstName = "Tian",</span></span><br><span class="line">   <span class="comment">//    LastName = "Tank"</span></span><br><span class="line">   <span class="comment">//&#125;;</span></span><br><span class="line">   <span class="keyword">var</span> originEntity = JsonSerializer.Deserialize&lt;PersonaOriginEntity&gt;(json);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> <span class="keyword">new</span> PersonaEntity</span><br><span class="line">   &#123;</span><br><span class="line">       Name = <span class="string">$"<span class="subst">&#123;originEntity.FirstName&#125;</span> <span class="subst">&#123;originEntity.LastName&#125;</span>"</span></span><br><span class="line">   &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Step2"><a href="#Step2" class="headerlink" title="Step2"></a>Step2</h4><p>第二個案例，我會驗証 Age 的計算邏輯  </p><h4 id="Case-2-Age-是現在時間減去生日的年份差"><a href="#Case-2-Age-是現在時間減去生日的年份差" class="headerlink" title="Case 2. Age 是現在時間減去生日的年份差"></a>Case 2. Age 是現在時間減去生日的年份差</h4><p>首先，要如何處理 <strong>現在時間</strong>  ??<br>一般的 Production Code 會用 <code>DateTime.Now</code><br>這是一個 struct 的 static 方法。</p><h4 id="Step2-1"><a href="#Step2-1" class="headerlink" title="Step2.1"></a>Step2.1</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CovertAge</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/Arrange</span></span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/Act</span></span><br><span class="line">    <span class="keyword">var</span> actual = _target.Parse(testJson).Age;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/Assert</span></span><br><span class="line">    actual.Should().Be(<span class="number">30</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>透過測試逼出 Age 欄位</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">PersonaEntity</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> Age &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>快速讓測試綠燈</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PersonaEntity <span class="title">Parse</span>(<span class="params"><span class="keyword">string</span> json</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> originEntity = JsonSerializer.Deserialize&lt;PersonaOriginEntity&gt;(json);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PersonaEntity</span><br><span class="line">    &#123;</span><br><span class="line">        Name = <span class="string">$"<span class="subst">&#123;originEntity.FirstName&#125;</span> <span class="subst">&#123;originEntity.LastName&#125;</span>"</span>,</span><br><span class="line">        Age = <span class="number">30</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Step2-2"><a href="#Step2-2" class="headerlink" title="Step2.2"></a>Step2.2</h4><p>實作計算 Age</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> PersonaEntity <span class="title">Parse</span>(<span class="params"><span class="keyword">string</span> json</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> originEntity = JsonSerializer.Deserialize&lt;PersonaOriginEntity&gt;(json);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PersonaEntity</span><br><span class="line">    &#123;</span><br><span class="line">        Name = <span class="string">$"<span class="subst">&#123;originEntity.FirstName&#125;</span> <span class="subst">&#123;originEntity.LastName&#125;</span>"</span>,</span><br><span class="line">        Age = originEntity.BirthDate.Year - DateTime.Now.Year</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這個測試案例會在 2019 年為綠燈，而在 2020 年變為紅燈<br>這不是一個好的測試，好的測試應該符合可重複性(Repeatable)，<br>所以我們要試著 Mock 掉 DateTime.Now</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">struct</span> SystemDateTime</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DateTime? _mockDateTime = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DateTime Now</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> =&gt; _mockDateTime ?? DateTime.Now;</span><br><span class="line">        <span class="keyword">internal</span> <span class="keyword">set</span> =&gt; _mockDateTime = <span class="keyword">value</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">internal</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Reset</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        _mockDateTime = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Step2-3"><a href="#Step2-3" class="headerlink" title="Step2.3"></a>Step2.3</h4><p>改寫測試案例</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CovertAgeTodayIs2019</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/Arrange</span></span><br><span class="line">    SystemDateTime.Now = Convert.ToDateTime(<span class="string">"2019/12/28"</span>);</span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/Act</span></span><br><span class="line">    <span class="keyword">var</span> actual = _target.Parse(testJson).Age;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/Assert</span></span><br><span class="line">    actual.Should().Be(<span class="number">30</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Step2-4"><a href="#Step2-4" class="headerlink" title="Step2.4"></a>Step2.4</h4><p>Mock 時間後再寫一個測試案例</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">CovertAgeTodayIs2020</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/Arrange</span></span><br><span class="line">    SystemDateTime.Now = Convert.ToDateTime(<span class="string">"2020/12/28"</span>);</span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/Act</span></span><br><span class="line">    <span class="keyword">var</span> actual = _target.Parse(testJson).Age;</span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/Assert</span></span><br><span class="line">    actual.Should().Be(<span class="number">31</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h4 id="Step2-5"><a href="#Step2-5" class="headerlink" title="Step2.5"></a>Step2.5</h4><p>改用 Given When Then，<br>測試案例如下，這樣會比較<strong>好讀</strong>嗎?:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse_name</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    AfterParseJson().Name.Should().Be(<span class="string">"Tian Tank"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse_age_today_is_2019</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GiveTodayIs(<span class="string">"2019/12/28"</span>).Age.Should().Be(<span class="number">30</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">parse_age_today_is_2030</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    GiveTodayIs(<span class="string">"2030/05/06"</span>).Age.Should().Be(<span class="number">41</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="後續"><a href="#後續" class="headerlink" title="後續"></a>後續</h3><ul><li>如果未來有多新的欄位再逐步加上測試。  </li><li>但在實務上我極有可能會同時驗証大量的欄位 ，比如說欄位是一對一的 Mapping</li><li>想省略 PersonaOriginEntity ，有可能用 Dynamic 嗎 ?</li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;如何用-TDD-寫一個-Entity-Parser&quot;&gt;&lt;a href=&quot;#如何用-TDD-寫一個-Entity-Parser&quot; class=&quot;headerlink&quot; title=&quot;如何用 TDD 寫一個 Entity Parser&quot;&gt;&lt;/a&gt;如何用 TDD 寫一個
      
    
    </summary>
    
    
    
      <category term="Unit Testing" scheme="https://blog.marsen.me/tags/Unit-Testing/"/>
    
      <category term="TDD" scheme="https://blog.marsen.me/tags/TDD/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記] 使用 Request Bin 測試第三方 Webhook 與 Callback </title>
    <link href="https://blog.marsen.me/2020/01/14/2020/requestbin/"/>
    <id>https://blog.marsen.me/2020/01/14/2020/requestbin/</id>
    <published>2020-01-14T07:31:17.000Z</published>
    <updated>2020-03-08T09:31:52.221Z</updated>
    
    <content type="html"><![CDATA[<h2 id="案例說明"><a href="#案例說明" class="headerlink" title="案例說明"></a>案例說明</h2><p>最近串接 Stripe ，一個相當方便的國際化金流服務，<br>情境是主子帳號的綁定，<br>Stripe 可以透過 Oauth 的方式綁定不同的 Stripe 帳戶，<br>對於電子商務的平台來說，相當的方便，<br>它可以透過簡單的<a href="https://stripe.com/docs/connect/standard-accounts#revoked-access" target="_blank" rel="noopener">授權機制</a>，取得客戶的金流資訊，  </p><p><img src="/images/2020/1/requestbin_01.jpg" alt="Strip Oauth Flow"></p><p>這時候問題來了，營運部門發現有的時候客戶會不小心將授權解除，<br>這會導致帳務上的問題，所以需要在第一時間被通知，<br>而 Stripe 其實也有提供 Event Driven 的解決方案。</p><p>透過 Webhook 監聽指定的事件 (Event)，可以串接各種通知服務。<br>ex: Line、E-mail、簡訊甚至是電話，<br>開發這樣的通知服務並不難但是要時間的。</p><p>而其中最大的風險在於 Event 送到 Webhook 再到通知服務的這段流程。<br>如果這段不通，就算 Event 確實會發生，就算通知務服務是正常的，<br>仍然會收不到通知。</p><p><strong>有沒有辦法快速驗証Webhook呢?</strong><br><strong>有沒有辦法快速驗証Webhook呢?</strong><br><strong>有沒有辦法快速驗証Webhook呢?</strong></p><h2 id="網路上的-Solution"><a href="#網路上的-Solution" class="headerlink" title="網路上的 Solution"></a>網路上的 Solution</h2><p>這個時候就要推薦一下網路上的這個服務 <a href="https://requestbin.com/" target="_blank" rel="noopener">Request Bin</a><br>登入後只需要一鍵，就可以快速建立一個 EndPoint<br>而且立即生效，有任 Request 進來都會完整記錄。</p><h3 id="好處"><a href="#好處" class="headerlink" title="好處"></a>好處</h3><ol><li>快速建立 EndPoint</li><li>立即生效</li><li>免費</li></ol><p>如果有其它類似的服務，請推薦。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://stripe.com/docs/webhooks" target="_blank" rel="noopener">https://stripe.com/docs/webhooks</a></li><li><a href="https://stripe.com/docs/api/issuing/authorizations" target="_blank" rel="noopener">https://stripe.com/docs/api/issuing/authorizations</a></li><li><a href="https://requestbin.com/" target="_blank" rel="noopener">https://requestbin.com/</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;案例說明&quot;&gt;&lt;a href=&quot;#案例說明&quot; class=&quot;headerlink&quot; title=&quot;案例說明&quot;&gt;&lt;/a&gt;案例說明&lt;/h2&gt;&lt;p&gt;最近串接 Stripe ，一個相當方便的國際化金流服務，&lt;br&gt;情境是主子帳號的綁定，&lt;br&gt;Stripe 可以透過 Oau
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[實作筆記] Reshaper Code Template</title>
    <link href="https://blog.marsen.me/2020/01/08/2020/reshaper_tempalte/"/>
    <id>https://blog.marsen.me/2020/01/08/2020/reshaper_tempalte/</id>
    <published>2020-01-08T09:17:17.000Z</published>
    <updated>2020-03-08T09:31:52.221Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>我通常會作一些 Code Snippet 來加速開發，<br>避免同樣的代碼要重複的寫，<br>除了避免重複，能交給工具的儘量交給工具去作，<br>只要是人為的操作就有可能犯錯，就算是簡單的剪下貼上，<br>讓工具作事，用心去檢驗，這是我在 2019 練習的小心得。  </p><p>比如說我使用無蝦米輸入法、刻意練習英打速度，<br>購買 Reshaper 等…，都是為了提昇生產力。<br>今天就是要說說 Reshaper 的 Template ，<br>這是一個跟 Code Snippet 相同的功能 。  </p><h2 id="本文"><a href="#本文" class="headerlink" title="本文"></a>本文</h2><p>Template 與 Code Snippet 並不使用共同的範例檔，<br>所以要如何將已有的 Snippet 轉移過來呢 ? 如果有人知道請跟我說。<br>另一個問題是，他真的比原本的 Snippet 好用嗎 ?</p><p>因為我的 Snippet 並不多，大約 10 個左右<br>為了馬上增加生產力，我手動將主要有用到的 2個重建了<br>剩下的如果真的很少用，就讓他自然淘汰吧。<br>常用的如果有用到再來重建。</p><p>第二件事，我使用上手感是差不多的<br>據說 Resharper 會更智慧化，所以我會選用 Code Template  </p><h2 id="如何新增"><a href="#如何新增" class="headerlink" title="如何新增"></a>如何新增</h2><p>以 Visual Studio 2019 與 Resharper Ultimate 為例，<br>在搜尋框輸入 <code>Template</code> 找到 <code>Template Explorer</code><br>點擊新增圖示，進行編輯，<br>其它就跟原本的 Snippet 差不多，也可以提供參數化入與 short cut<br><img src="/images/2020/1/reshaper_tempalte_01.jpg" alt="Create Template"></p><h2 id="補充"><a href="#補充" class="headerlink" title="補充"></a>補充</h2><p>如果已經安裝了 Resharper Ultimate 但是 Template 不工作的話記得看一下設定</p><p>Resharper &gt; Option &gt; Intellisense &gt; General</p><p><img src="/images/2020/1/reshaper_tempalte_02.jpg" alt="Option"></p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://blog.darkthread.net/blog/vs-code-snippet-with-resharper/" target="_blank" rel="noopener">https://blog.darkthread.net/blog/vs-code-snippet-with-resharper/</a></li><li><a href="https://www.jetbrains.com/help/resharper/Creating_a_File_Template.html" target="_blank" rel="noopener">https://www.jetbrains.com/help/resharper/Creating_a_File_Template.html</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;我通常會作一些 Code Snippet 來加速開發，&lt;br&gt;避免同樣的代碼要重複的寫，&lt;br&gt;除了避免重複，能交給工具的儘
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[學習筆記] SQL 大小事 Isolation Level 與 SARGs</title>
    <link href="https://blog.marsen.me/2019/12/25/2019/about_sql_acid_and_srgs/"/>
    <id>https://blog.marsen.me/2019/12/25/2019/about_sql_acid_and_srgs/</id>
    <published>2019-12-24T18:25:55.000Z</published>
    <updated>2020-03-08T09:31:52.213Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ACID-與-Isolation-Level"><a href="#ACID-與-Isolation-Level" class="headerlink" title="ACID 與 Isolation Level"></a>ACID 與 Isolation Level</h2><h3 id="什麼是-ACID"><a href="#什麼是-ACID" class="headerlink" title="什麼是 ACID"></a>什麼是 ACID</h3><ul><li>Atomicity（原子性）：<br>  一個交易（transaction）中的所有操作，要嘛全部完成，要嘛全部不完成，<br>  不會在中間某個環節中斷。交易在執行過程中發生錯誤，會被回滾（Rollback）到交易開始前的狀態，<br>  就像這個交易從來沒有執行過一樣。即，交易不可分割、不可約簡。  </li><li>Consistency（一致性）：<br>  在交易開始之前和交易結束以後，資料庫的完整性沒有被破壞。<br>  這表示寫入的資料必須完全符合所有的預設約束、觸發器、級聯回滾等。  </li><li>Isolation（隔離性）：<br>  資料庫允許多個並發交易同時對其數據進行讀寫和修改的能力，<br>  隔離性可以防止多個交易並發執行時由於交叉執行而導致數據的不一致。<br>  交易隔離分為不同級別，<br>  包括未提交讀（Read uncommitted）、<br>  提交讀（read committed）、<br>  可重複讀（repeatable read）和串行化（Serializable）。</li><li>Durability（持久性）：<br>  交易處理結束後，對數據的修改就是永久的，即便系統故障也不會丟失。</li></ul><h3 id="問題，欄位-price-現在為-100，兩筆交易同時發生，A-交易為-price-10-B-交易為-price-15-請問最終的值為何"><a href="#問題，欄位-price-現在為-100，兩筆交易同時發生，A-交易為-price-10-B-交易為-price-15-請問最終的值為何" class="headerlink" title="問題，欄位 price 現在為 100，兩筆交易同時發生，A 交易為 price+10, B 交易為 price-15 請問最終的值為何"></a>問題，欄位 price 現在為 100，兩筆交易同時發生，A 交易為 price+10, B 交易為 price-15 請問最終的值為何</h3><p>MsSQL 預設的 Isolation Level 為 READ COMMITTED</p><p><img src="https://miro.medium.com/max/1438/1*zAaBTdOtFJzISu4KGcwtvQ.png" alt="Isolation Level"></p><h3 id="情境題-amp-SQL"><a href="#情境題-amp-SQL" class="headerlink" title="情境題 &amp; SQL"></a>情境題 &amp; SQL</h3><h4 id="建立測試資料"><a href="#建立測試資料" class="headerlink" title="建立測試資料"></a>建立測試資料</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[ACIDSample](</span><br><span class="line">    [ACIDSample_Id] [<span class="built_in">bigint</span>] <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    [ACIDSample_Name] [<span class="keyword">nvarchar</span>](<span class="number">100</span>) <span class="literal">NULL</span>,</span><br><span class="line">    [ACIDSample_Price] [<span class="built_in">Decimal</span>] <span class="literal">NULL</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> [dbo].[ACIDSample]</span><br><span class="line">           ([ACIDSample_Name]</span><br><span class="line">           ,[ACIDSample_Price])</span><br><span class="line">     <span class="keyword">VALUES</span></span><br><span class="line">        (<span class="string">'Toy'</span>,<span class="number">150</span>),</span><br><span class="line">        (<span class="string">'Shoes'</span>, <span class="number">120</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure><h4 id="Read-Committed-MsSQL-預設值-vs-Read-Uncommitted"><a href="#Read-Committed-MsSQL-預設值-vs-Read-Uncommitted" class="headerlink" title="Read Committed(MsSQL 預設值) vs Read Uncommitted"></a>Read Committed(MsSQL 預設值) vs Read Uncommitted</h4><p>差別在於會不會讀到髒資料，<br>Read Uncommitted 不會使用 locked 來避免未 commit 的資料被讀取，<br>參考以下範例:</p><p>假設目前 ACIDSample_Price = 100</p><h3 id="Sample-READ-COMMITTED"><a href="#Sample-READ-COMMITTED" class="headerlink" title="Sample READ COMMITTED"></a>Sample READ COMMITTED</h3><p>Session 1，執行 Update 後延遲 10 秒後 Rollback</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> <span class="keyword">TRANSACTION</span></span><br><span class="line"><span class="keyword">UPDATE</span> ACIDSample</span><br><span class="line"><span class="keyword">SET</span> ACIDSample_Price = ACIDSample_Price + <span class="number">10</span></span><br><span class="line"><span class="keyword">WHERE</span> ACIDSample_Id = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">WaitFor Delay <span class="string">'00:00:10'</span></span><br><span class="line"><span class="keyword">Rollback</span> <span class="keyword">Transaction</span></span><br></pre></td></tr></table></figure><p>Session 2，<br>設定 TRANSACTION ISOLATION LEVEL 為 READ COMMITTED，<br>目前 ACIDSample_Price = 100<br>執行查詢，在 READ COMMITTED 的情境況下，會等待延遲結束後取得資料  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- SET TRANSACTION ISOLATION LEVEL</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">TRANSACTION</span> <span class="keyword">ISOLATION</span> <span class="keyword">LEVEL</span> <span class="keyword">READ</span> COMMITTED</span><br><span class="line"><span class="keyword">SELECT</span> ACIDSample_Price <span class="keyword">FROM</span> ACIDSample <span class="keyword">WHERE</span> ACIDSample_ID = <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="Sample-READ-UNCOMMITTED"><a href="#Sample-READ-UNCOMMITTED" class="headerlink" title="Sample READ UNCOMMITTED"></a>Sample READ UNCOMMITTED</h3><p>Session 1，與前一個範例相同，執行 Update 後延遲 10 秒後 Rollback  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">BEGIN</span> <span class="keyword">TRANSACTION</span></span><br><span class="line"><span class="keyword">UPDATE</span> ACIDSample</span><br><span class="line"><span class="keyword">SET</span> ACIDSample_Price = ACIDSample_Price + <span class="number">10</span></span><br><span class="line"><span class="keyword">WHERE</span> ACIDSample_Id = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">WaitFor Delay <span class="string">'00:00:10'</span></span><br><span class="line"><span class="keyword">Rollback</span> <span class="keyword">Transaction</span></span><br></pre></td></tr></table></figure><p>Session 2，執行查詢，在 READ UNCOMMITTED 的情境況下，<br>會立即取得未 Commit 的資料(Dirty Data)，不需要等待10秒  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- SET TRANSACTION ISOLATION LEVEL</span></span><br><span class="line"><span class="keyword">SET</span> <span class="keyword">TRANSACTION</span> <span class="keyword">ISOLATION</span> <span class="keyword">LEVEL</span> <span class="keyword">READ</span> UNCOMMITTED</span><br><span class="line"><span class="keyword">SELECT</span> ACIDSample_Price <span class="keyword">FROM</span> ACIDSample <span class="keyword">WHERE</span> ACIDSample_ID = <span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="Sample-Repeatable-Read"><a href="#Sample-Repeatable-Read" class="headerlink" title="Sample Repeatable Read"></a>Sample Repeatable Read</h3><p>Session 1<br>設定 TRANSACTION ISOLATION LEVEL 為 Repeatable Read<br>執行以下SQL後，立即執行 Session 2 的 SQL，<br>等待 10 秒(Delay)後執行 Session 3 的 SQL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">TRANSACTION</span> <span class="keyword">ISOLATION</span> <span class="keyword">LEVEL</span> REPEATABLE <span class="keyword">READ</span></span><br><span class="line"><span class="keyword">BEGIN</span> <span class="keyword">TRANSACTION</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> ACIDSample</span><br><span class="line"></span><br><span class="line">WaitFor Delay <span class="string">'00:00:10'</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> ACIDSample</span><br><span class="line">WaitFor Delay <span class="string">'00:00:10'</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> ACIDSample</span><br><span class="line"><span class="keyword">COMMIT</span> <span class="keyword">Transaction</span></span><br></pre></td></tr></table></figure><p>Session 2 新增一筆資料</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ACIDSample (ACIDSample_Name,ACIDSample_Price)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'Cat'</span>,<span class="number">200</span>)</span><br></pre></td></tr></table></figure><p>Session 3 刪除一列資料</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> ACIDSample <span class="keyword">WHERE</span> ACIDSample_Name = <span class="string">'Cat'</span></span><br></pre></td></tr></table></figure><p>等待 Delay 結束後，可以看到查詢結果如下<br>第2次的查詢會與第3次一致，但是實際上的資料已經被刪除了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">ACIDSample_Id        ACIDSample_Name                                                                                      ACIDSample_Price</span><br><span class="line">-------------------- ---------------------------------------------------------------------------------------------------- ---------------------------------------</span><br><span class="line">1                    Toy                                                                                                  132</span><br><span class="line">2                    Shoes                                                                                                120</span><br><span class="line"></span><br><span class="line">(2 rows affected)</span><br><span class="line"></span><br><span class="line">ACIDSample_Id        ACIDSample_Name                                                                                      ACIDSample_Price</span><br><span class="line">-------------------- ---------------------------------------------------------------------------------------------------- ---------------------------------------</span><br><span class="line">1                    Toy                                                                                                  132</span><br><span class="line">2                    Shoes                                                                                                120</span><br><span class="line">7                    Cat                                                                                                  200</span><br><span class="line"></span><br><span class="line">(3 rows affected)</span><br><span class="line"></span><br><span class="line">ACIDSample_Id        ACIDSample_Name                                                                                      ACIDSample_Price</span><br><span class="line">-------------------- ---------------------------------------------------------------------------------------------------- ---------------------------------------</span><br><span class="line">1                    Toy                                                                                                  132</span><br><span class="line">2                    Shoes                                                                                                120</span><br><span class="line">7                    Cat                                                                                                  200</span><br><span class="line"></span><br><span class="line">(3 rows affected)</span><br></pre></td></tr></table></figure><p>試著把 Session 的 ISOLATION LEVEL 調成 READ COMMITTED</p><p>Session 1 (READ COMMITTED)</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">TRANSACTION</span> <span class="keyword">ISOLATION</span> <span class="keyword">LEVEL</span> <span class="keyword">READ</span> COMMITTED</span><br><span class="line"><span class="keyword">BEGIN</span> <span class="keyword">TRANSACTION</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> ACIDSample</span><br><span class="line"></span><br><span class="line">WaitFor Delay <span class="string">'00:00:10'</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> ACIDSample</span><br><span class="line">WaitFor Delay <span class="string">'00:00:10'</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> ACIDSample</span><br><span class="line"><span class="keyword">COMMIT</span> <span class="keyword">Transaction</span></span><br></pre></td></tr></table></figure><p>結果在同一筆交易內會相同的會查詢到不同的結果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">ACIDSample_Id        ACIDSample_Name                                                                                      ACIDSample_Price</span><br><span class="line">-------------------- ---------------------------------------------------------------------------------------------------- ---------------------------------------</span><br><span class="line">1                    Toy                                                                                                  132</span><br><span class="line">2                    Shoes                                                                                                120</span><br><span class="line"></span><br><span class="line">(2 rows affected)</span><br><span class="line"></span><br><span class="line">ACIDSample_Id        ACIDSample_Name                                                                                      ACIDSample_Price</span><br><span class="line">-------------------- ---------------------------------------------------------------------------------------------------- ---------------------------------------</span><br><span class="line">1                    Toy                                                                                                  132</span><br><span class="line">2                    Shoes                                                                                                120</span><br><span class="line">9                    Cat                                                                                                  200</span><br><span class="line"></span><br><span class="line">(3 rows affected)</span><br><span class="line"></span><br><span class="line">ACIDSample_Id        ACIDSample_Name                                                                                      ACIDSample_Price</span><br><span class="line">-------------------- ---------------------------------------------------------------------------------------------------- ---------------------------------------</span><br><span class="line">1                    Toy                                                                                                  132</span><br><span class="line">2                    Shoes                                                                                                120</span><br><span class="line"></span><br><span class="line">(2 rows affected)</span><br></pre></td></tr></table></figure><h3 id="Serializable"><a href="#Serializable" class="headerlink" title="Serializable"></a>Serializable</h3><p>上面的範例，雖然確保了查詢的一致性，但實際上會查詢到不存在的資料(Phantom)，<br>為了避免這樣的情況可以考慮使用 Serializable，但實際上會帶來效能的耗損，<br>在這樣嚴格的限制下，所有查詢將有序的執行。</p><p>Session 1</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SET</span> <span class="keyword">TRANSACTION</span> <span class="keyword">ISOLATION</span> <span class="keyword">LEVEL</span> <span class="keyword">Serializable</span></span><br><span class="line"><span class="keyword">BEGIN</span> <span class="keyword">TRANSACTION</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> ACIDSample</span><br><span class="line"></span><br><span class="line">WaitFor Delay <span class="string">'00:00:10'</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> ACIDSample</span><br><span class="line">WaitFor Delay <span class="string">'00:00:10'</span></span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> ACIDSample</span><br><span class="line"><span class="keyword">COMMIT</span> <span class="keyword">Transaction</span></span><br></pre></td></tr></table></figure><p>也就是說在執行了 Sesson 1 的 SQL 之後 ，<br>Sesson 2 即使在 Delay 的時間中執行也必須等待 Sesson 1 結束才會執行，<br>這樣確保了資料一致性同時也不會拿到 Dirty Data 或 Phantom</p><p>Session 2 新增一筆資料</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> ACIDSample (ACIDSample_Name,ACIDSample_Price)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="string">'Cat'</span>,<span class="number">200</span>)</span><br></pre></td></tr></table></figure><p>Session 3 刪除一列資料</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> ACIDSample <span class="keyword">WHERE</span> ACIDSample_Name = <span class="string">'Cat'</span></span><br></pre></td></tr></table></figure><h2 id="SARGs-Search-Arguments"><a href="#SARGs-Search-Arguments" class="headerlink" title="SARGs (Search Arguments)"></a>SARGs (Search Arguments)</h2><p>SQL 效能調校的一些 GuideLine</p><h3 id="建議使符合「查詢參數-Search-ARGument-SARGs-」規則"><a href="#建議使符合「查詢參數-Search-ARGument-SARGs-」規則" class="headerlink" title="建議使符合「查詢參數(Search ARGument SARGs)」規則"></a>建議使符合「查詢參數(Search ARGument SARGs)」規則</h3><ul><li><p>SARGs的格式：</p><ul><li>「資料欄位 部份運算子 &lt;常數或變數&gt;</li><li>常數或變數&gt; 部份運算子 資料欄位」</li><li>運算子：=、&lt;、&gt;、&gt;=、&lt;=、BETWEEN、LIKE ‘關鍵字%’</li></ul></li><li><p>非SARGs格式：</p><ul><li>對資料欄位做運算</li><li>負向查詢：NOT、!=、&lt;&gt;、!&gt;、!&lt;、NOT EXISTS、NOT IN、NOT LIKE</li><li>對資料欄位使用函數</li><li>使用OR運算子</li></ul></li></ul><hr><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://medium.com/getamis/database-transaction-isolation-a1e448a7736e" target="_blank" rel="noopener">https://medium.com/getamis/database-transaction-isolation-a1e448a7736e</a></li><li><a href="http://vito-note.blogspot.com/2013/05/blog-post_1930.html" target="_blank" rel="noopener">http://vito-note.blogspot.com/2013/05/blog-post_1930.html</a></li><li><a href="https://dotblogs.com.tw/ricochen/2011/07/31/32374" target="_blank" rel="noopener">https://dotblogs.com.tw/ricochen/2011/07/31/32374</a></li><li><a href="https://www.sqlservercentral.com/articles/isolation-levels-in-sql-server" target="_blank" rel="noopener">https://www.sqlservercentral.com/articles/isolation-levels-in-sql-server</a></li><li><a href="https://medium.com/@chester.yw.chu/%E5%B0%8D%E6%96%BC-mysql-repeatable-read-isolation-%E5%B8%B8%E8%A6%8B%E7%9A%84%E4%B8%89%E5%80%8B%E8%AA%A4%E8%A7%A3-7a9afbac65af" target="_blank" rel="noopener">https://medium.com/@chester.yw.chu/%E5%B0%8D%E6%96%BC-mysql-repeatable-read-isolation-%E5%B8%B8%E8%A6%8B%E7%9A%84%E4%B8%89%E5%80%8B%E8%AA%A4%E8%A7%A3-7a9afbac65af</a></li><li><a href="https://www.youtube.com/watch?v=7nv-7XQI7p0" target="_blank" rel="noopener">https://www.youtube.com/watch?v=7nv-7XQI7p0</a></li><li><a href="https://www.youtube.com/watch?v=ZtPj09tJjnQ" target="_blank" rel="noopener">https://www.youtube.com/watch?v=ZtPj09tJjnQ</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ACID-與-Isolation-Level&quot;&gt;&lt;a href=&quot;#ACID-與-Isolation-Level&quot; class=&quot;headerlink&quot; title=&quot;ACID 與 Isolation Level&quot;&gt;&lt;/a&gt;ACID 與 Isolation Lev
      
    
    </summary>
    
    
    
      <category term="Database" scheme="https://blog.marsen.me/tags/Database/"/>
    
      <category term="SQL" scheme="https://blog.marsen.me/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>[生活筆記] 2019 InterView 心得分享</title>
    <link href="https://blog.marsen.me/2019/11/26/2019/interview_log/"/>
    <id>https://blog.marsen.me/2019/11/26/2019/interview_log/</id>
    <published>2019-11-26T03:38:55.000Z</published>
    <updated>2020-03-08T09:31:52.219Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在 N 社 4 年了，一直以來都有一個習慣，就是每年都會定期開 CV，<br>有好的機會就去面試看看。<br>部門主管 C 哥在這部份相當開明。<br>我印象深刻是剛進公司時，他要大家寫 1 年後的履歷寄信給他再跟他 1-1。<br>他也鼓勵有好的機會就去試，重點是「以終為始」，搞清楚自已要的到底是什麼 ?  </p><h2 id="理由"><a href="#理由" class="headerlink" title="理由"></a>理由</h2><h3 id="有比沒有好一點的敏捷"><a href="#有比沒有好一點的敏捷" class="headerlink" title="有比沒有好一點的敏捷"></a>有比沒有好一點的敏捷</h3><p>我是一個理論的實踐者，如果有我認同的理想，<br>就會試著去實踐，可惜「理想很豐滿，現實很骨感」，<br>理論與實踐往往總是有一條橫溝。<br>這不是我想走的主因，但是如果我能找到橫溝一處較窄的地方。<br>我想我會毫不猶豫的走過去。  </p><h3 id="打不敗的通膨"><a href="#打不敗的通膨" class="headerlink" title="打不敗的通膨"></a>打不敗的通膨</h3><p>另一個理由就更現實了，「薪資」基本上4年來是沒有調整的，<br>當然我的計算方式比較特別。我是會考慮通膨率，<br>此外，在這個大前端的時代不知道為什麼我好像選錯了邊，<br>不得不說 F2E 的價金較高機會也較多。<br>而我在 C 社時期，其實是前後通吃的，但是不包含切版。<br>在 N 社我不止一次想轉換到 F2E 卻有以下幾個卡點，  </p><ol><li>缺乏實際行動，僅止於與 F2E主管聊聊的階段</li><li>切版在 N 社 F2E 是必備技能，但不是我職涯規劃中準備投資的項目</li><li>過舊的技術棧 Angular 1.0 與 KnockOutjS 還有 KendoUI 等…</li><li>F2E 與 RD 部門的 Silo</li></ol><p>重點我想還是在 1 ，其它項目其實都有漸漸在改變。</p><h3 id="工作內容"><a href="#工作內容" class="headerlink" title="工作內容"></a>工作內容</h3><p>再延申到最後一個原因，想作的事與正在作的事。<br>其實我很清楚，這兩者要相同並沒有那邊容易，<br>想作的事還很模糊，而正在作的事很無聊。<br>過去一年基本上只是在抽字串，<br>或是將功能搬到 A 市場, 再搬到 B 市場，<br>而且真的只有搬，有沒有人用都不知道，業績如何也不知道，團隊作起來很沒有成就感。  </p><p>而跟主系統(台灣市場)比較起來，A/B市場規模相對小，人力也少，<br>當有產品需求調整的情況，往往犧牲的都是A/B市場的，再由我們開發補丁作修正。<br>而不是一開始就以一個國際化的產品在設計產品，這樣作下來漸漸就提不勁了。  </p><p>就業一段時間應該都知道，只有功勞沒有苦勞。<br>不賺錢，沒資源，更不賺錢，更沒資源是一種惡向循環。  </p><p>我的解決方案，重新定位團隊目標，<br>所以我非常強力推動幾個項目的國際版標準化，<br>因為我認為這才是我們的核心項目。  </p><h3 id="彼得效應"><a href="#彼得效應" class="headerlink" title="彼得效應"></a>彼得效應</h3><p>彼得效應其實是我在 C 社的功課，簡單的說就是碰到天花板了。<br>不論在能力上、薪資上或是發展性上都到了一個瓶頸，<br>這問題不只在我身上，在我的同儕、我的主管以及我周邊所有的人身上，<br>我以前會考慮，要如何才能延續我技術人員的生涯?<br>特別是在這個變化如此快速的時代。  </p><p>目前我還沒有一個很完整的答案，不過我周邊的人離開了原本公司之後，<br>又遇到了相同的問題，討厭的主管/討厭的政治環境/討厭的工作內容，<br>在不同的公司，卻有相同離開的理由…<br>我目前的想法，不再只以「技術人員」作考量，<br>在薪資可接受的範圍下，我作為一個人，作為「我自已」我要如何讓自已盡可能的發展 ?<br>純技術是不是自我設限 ? 主管不會領導，那我能不能反過來引導他 ?<br>環境不喜歡，我能不能改變它 ? 人不喜歡，我能不能找到志同道合的夥伴 ?  </p><h3 id="身體因素，眼花花心慌慌"><a href="#身體因素，眼花花心慌慌" class="headerlink" title="身體因素，眼花花心慌慌"></a>身體因素，眼花花心慌慌</h3><p>去年 5 月身體微恙，其實自已有點被嚇到，<br>劇烈的頭痛外加短暫的視力消失，<br>N 社一直以來都有鼓勵用下班時間進行一些工作的文化，<br>包含午休時間的「分享」或讀書會，對我來說沒有不好，<br>但是貪多不得，反而傷害了身體，<br>這次病後，比較會注意自已的飲食與作習，<br>畢竟留得青山在不怕沒柴燒。  </p><h2 id="面試記錄"><a href="#面試記錄" class="headerlink" title="面試記錄"></a>面試記錄</h2><p>講了一堆現在才要進到主題。<br>先講結論，我愛的人不愛我，愛我的人我不愛。</p><h3 id="Nxxx-Bxxx"><a href="#Nxxx-Bxxx" class="headerlink" title="Nxxx Bxxx"></a>Nxxx Bxxx</h3><p>純網銀的公司。慕名 N 社前 HR 大主管之名而去，<br>面試機會好像很難拿到，但是我運氣蠻好的，拿到了面試機會。  </p><p>總共有三面，<br>第一面是技術職的面試(60mins)，只有閒聊工作上的經驗，沒考什麼技術。<br>有三個技術主管，聊起來的感覺人都蠻和善的。<br>技術棧並不確定，但是有很多機會，什麼都可以嚐試的感覺。<br>不太熟悉敏捷，但是宣稱一定會跑測試與自動化等功能。  </p><p>第二面是 N 社的前主管(30mins)，合作的機會不多，所以互相聊了一下公司的進況。<br>另外我問了一些新聞八掛(肥貓啊、排名最後啊…)，也很坦率的回應，<br>他敢說我就敢信，基本上沒有逃避閃躲問題我覺得就 Ok 了  </p><p>第三面是總經理，基本上不問你問題，<br>而是請你問問題，但是我覺得我沒有準備的很好，<br>只有問一下目前的目標與挑戰，回答是「活下去」  </p><p>Offer : Get  </p><h3 id="Txxxx"><a href="#Txxxx" class="headerlink" title="Txxxx"></a>Txxxx</h3><p>社群上有名的「敏捷」公司，遊戲產業，<br>剛好有認識的人介紹之下去面試。  </p><p>面試的內容，程式題一題，DB題一題，<br>不過相當的簡單，不太像是在找 Senior 的題目，<br>剩下的就是閒聊，不過可能是我聊的沒有很好，另外一個可能性，就是薪資的問題所以沒有上。  </p><p>感覺比較差的兩點，<br>一個是 T 社找了我兩次，<br>兩次 HR 都說不論是否錄取都會通知，<br>但是兩次都沒有通知，<br>第二次去面試前我還有特別在通訊軟體上與 HR 確認是否會告知結果，<br>但是仍然是無聲卡。  </p><p>第二點是兩次面試的題目一模一樣，<br>完全沒有變化，面試官也知道但好像也不是很介意，<br>但是以我面試者的角度會覺得這間公司在招慕上沒有什麼鑑別度。  </p><p>Offer : 無聲卡 * 2  </p><h3 id="Cxxxxxxxx"><a href="#Cxxxxxxxx" class="headerlink" title="Cxxxxxxxx"></a>Cxxxxxxxx</h3><p>主要作工程師媒合平台，是我非常喜歡的一間公司，<br>也是第一次線上面試，問題蠻廣泛的，但是我覺得我都回答得出來<br>只有問了一題 ACID 我沒有回答的很好，我有另文記錄。<br>總之就是我對 DB 的認識停留在預設值，而沒有考慮應該商業需求可能的調整。  </p><p>另外我作了一些線上面試的小小 Retro，稍稍記錄一下  </p><ul><li>面向光源，不然你會臉會很黑</li><li>保持背景單調乾淨</li><li>跟同居的事先說好有面試，避免臨時打擾</li><li>儘可能讓攝影機高過你的頭，不然看起來會很肥</li><li>就算是凌晨面試也要梳洗，看起來比較有精神</li><li>網路可能有延遲，可以稍等一下再回答問題</li></ul><p>Offer : Reject  </p><h3 id="Fxxxxxxxxx"><a href="#Fxxxxxxxxx" class="headerlink" title="Fxxxxxxxxx"></a>Fxxxxxxxxx</h3><p>後面好像有個富爸爸的收據公司，數位轉型作 CMS，<br>而且只針對 mobile 製作，聽起來工作內容蠻輕鬆的。<br>不過他們的瓶頸在 DB ，所以要找一個後端懂SQL的人。<br>只有一面，介紹產品還有面臨的問題，<br>技術棧算蠻新的，不過沒有CI/CD與自動化等工程。  </p><p>CMS 是我蠻喜歡的 Topic , N 社現在也有在作，<br>但是我最後還是拒絕了。  </p><p>主要的原因可能是，我覺得技術上好像沒有辦法在那邊得到進步。  </p><p>Offer : Get</p><h3 id="axxxxxx"><a href="#axxxxxx" class="headerlink" title="axxxxxx"></a>axxxxxx</h3><p>微軟 Teams 服務的合作廠商，主要作數位電話相關。<br>也是朋友介紹的公司，應該是第二次找我，<br>因為之前沒有很強烈的離職意願，所以沒有去面試。<br>特色的早上班早下班，大概 5 點就能下班了，據說不太加班，<br>一面，與美國主管線上訪談，這次有吃到 Cxxxxxxxx 的經驗，<br>所以聊得蠻順利的，美國主管有技術底，會講中文所以溝通無礙，<br>不過我一直以為他是美國人，其實是台灣人的樣子，只是在美國待久了有點口音。  </p><p>二面，跟台灣當地主管面試，介紹產品與閒聊，<br>老實說工作環境與地點還有薪資我都蠻 OK 的，<br>當初有考慮過接收 Offer 的。<br>最後就是跟朋友閒聊，朋友是 C 社的前同事。<br>基本上就是一個小公司，產業蠻穩定的，那個職位也有很多機會，<br>但是成長就要靠自已了，現在想想還是會覺得放棄可惜。  </p><p>Offer : Get  </p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>我覺得定期作面試是很有幫助的，<br>他能帶來以下的好處，  </p><ul><li>了解市場需求，直接面對第一線的招幕才知道現在含金量最高的技術是什麼</li><li>了解自已，過程中不斷評估自已要的東西(薪資、成就感、穩定、福利、名氣…)，什麼都是假的，離開(或留下)才是真的</li><li>了解不足與市場的差距(特別是技術面)</li><li>與不同產業的技術主管聊天，技術只是一種手段，不要忘記背後的商業目的</li></ul><p>家家有本難唸的經，不同的公司也有不同的難處，<br>時時檢視自已所處的環境，換或不換你都可以選擇，<br>成為更好的自已。<br>開始準備 2020 的履歷囉。  </p><p>最後謝謝所以推薦我與面試我的人。</p><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在 N 社 4 年了，一直以來都有一個習慣，就是每年都會定期開 CV，&lt;br&gt;有好的機會就去面試看看。&lt;br&gt;部門主管 C 哥在這部份相當開
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[生活筆記] Swing Dance 雜記</title>
    <link href="https://blog.marsen.me/2019/11/07/2019/swing_dance_log/"/>
    <id>https://blog.marsen.me/2019/11/07/2019/swing_dance_log/</id>
    <published>2019-11-07T09:03:56.000Z</published>
    <updated>2020-03-08T09:31:52.221Z</updated>
    
    <content type="html"><![CDATA[<p>學習 Swing 大概滿周年了，最初的理由已經有點忘記了;<br>為了避免忘掉更多東西，還是隨手記錄一下自已的一些小小想法。</p><h2 id="波動的感覺"><a href="#波動的感覺" class="headerlink" title="波動的感覺"></a>波動的感覺</h2><p>在新手期的階段有一件有趣的事，在牽起 Follower 手的時候，<br>大概就知道這個人有沒有跳過舞，基本上會有波動從對方的手傳遞過來，<br>正常來說這個波動應該是上下的，有時候會遇到左右或是扭扭的波動，<br>也有波平如鏡的狀況。</p><p>Lindy 的基本動作之一是 Bounce，它帶來的波動應該是上下，而且是下律動的。<br>所以如果感覺到不太一樣的波，大概可以猜這個人之前有跳過別的舞蹈，<br>準確率還蠻高的，只是現在我好像感覺不太到了。</p><h2 id="與武術的關係"><a href="#與武術的關係" class="headerlink" title="與武術的關係"></a>與武術的關係</h2><p>上面提到了波，就聊聊舞與武的關係，因為不知道為何我腦海總會出現「波動拳」三個字。<br>除了波以外，練基本步跟 Bounce 就好像是在蹲馬步，跟 Follower 練習就好像在練套路(Kata)<br>而 Social 場合就像是賽際過招，年度大型 Event 就是天下武術大會的概念。</p><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>跳舞的目的很抽象，不像其它的運動，有明確的目的，例如把球投進籃子裡或是率先衝過終點線。<br>我給自已訂了一些目標與原則，<br>首先要讓 Follower 感到安全，<br>同時不能讓他感到無聊，整個過程必須是有趣的，<br>最後一定要讓 Follower 跳得好看。<br>如果 Follower 被誇獎跳得很美，Leader 才算成功。</p><h2 id="規則"><a href="#規則" class="headerlink" title="規則"></a>規則</h2><p>一開始學習給的一些自我約束，不一一說明原委，反正我就是喜歡沒事找事作</p><ol><li>不要找同一個人一直跳舞，儘可能每首都換</li><li>全場通殺，小一點的 Social 場合儘量跟每個人都跳到</li><li>Follower 永遠是對的，如果 Follower 跟錯了，想想是不是自已的 Leading 不夠明確</li><li>Last Song , 可以的話最後一首一定要跳</li></ol><h2 id="教室"><a href="#教室" class="headerlink" title="教室"></a>教室</h2><p>Big Apple(BA)、Swing Taiwan(ST)、YM Swing(YM)、Lindy Island(艾倫)、JF Swing(JF)、Naughty Swing</p><p>台北我知道的教室大概就這幾間(2019)，第一次是在 ST 上的，後來時間對不上就去 YM 學了一陣子(半年以上)，<br>Lindy Island 上過一期 Swing Out(四堂)，Naughty Swing 上過一次 Solo 。<br>上面的教室括號內是教室的簡稱，然後我是按照某種神祕規則排序的，不知道有人看得出來嗎 ?</p><h2 id="給一年前的我的建議"><a href="#給一年前的我的建議" class="headerlink" title="給一年前的我的建議"></a>給一年前的我的建議</h2><ol><li>不要先學 Charleston 。</li><li>照教室開課的順序去學，但是覺得困難的話，與其往下上，不如上複習班</li><li>不同教室類似的課通常會錯開，時間許可的話都去上。</li><li>常去 Socail 多聽音樂，練習、練習、練習</li><li>Solo 比想像中的好玩，一定要試試</li><li>Keep Learning</li></ol><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;學習 Swing 大概滿周年了，最初的理由已經有點忘記了;&lt;br&gt;為了避免忘掉更多東西，還是隨手記錄一下自已的一些小小想法。&lt;/p&gt;
&lt;h2 id=&quot;波動的感覺&quot;&gt;&lt;a href=&quot;#波動的感覺&quot; class=&quot;headerlink&quot; title=&quot;波動的感覺&quot;&gt;&lt;/a&gt;波
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[實作筆記] 用 Github Registry 作自已的 Nuget Server</title>
    <link href="https://blog.marsen.me/2019/10/11/2019/github_registry_with_nuget_packages/"/>
    <id>https://blog.marsen.me/2019/10/11/2019/github_registry_with_nuget_packages/</id>
    <published>2019-10-11T03:55:41.000Z</published>
    <updated>2020-03-08T09:31:52.219Z</updated>
    
    <content type="html"><![CDATA[<h2 id="目標"><a href="#目標" class="headerlink" title="目標"></a>目標</h2><p>使用 GitHub Package Registry 建立一個自已的 Nuget Server。</p><h2 id="步驟"><a href="#步驟" class="headerlink" title="步驟"></a>步驟</h2><h3 id="前置作業"><a href="#前置作業" class="headerlink" title="前置作業"></a>前置作業</h3><h4 id="申請"><a href="#申請" class="headerlink" title="申請"></a>申請</h4><p>GitHub Package Registry 還在 Beta 階段，需要申請才能取得試用。<br>過程並不複雜，在此不贅述，請再自行查找網路。</p><h4 id="建立-Repository"><a href="#建立-Repository" class="headerlink" title="建立 Repository"></a>建立 Repository</h4><p>實測的結果，<code>nuget push</code> 並無法建立 Repository ，<br>並且會導致發佈失敗，故必需 <strong>優先建立 Packages 的 Repository</strong> 。<br>Repository 可以包含多個專案，並獨立發佈(發佈指令詳見下文)。  </p><h4 id="建立-nuget-文檔"><a href="#建立-nuget-文檔" class="headerlink" title="建立 .nuget 文檔"></a>建立 .nuget 文檔</h4><p>請以專案名稱命名檔案，ex:<code>Marsen.Utility.nuget</code><br>請依實際情況調整 <strong>id</strong>、<strong>version</strong> 與 <strong>projectUrl</strong><br>特別是 <strong>version</strong> 代表的是 Packages 的版本<br>更多訊息請<a href="https://docs.microsoft.com/zh-tw/nuget/reference/nuspec" target="_blank" rel="noopener">參考</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">xmlns</span>=<span class="string">"http://schemas.microsoft.com/packaging/2010/07/nuspec.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">metadata</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>Marsen.Utility<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">authors</span>&gt;</span>Marsen Lin<span class="tag">&lt;/<span class="name">authors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Marsen Utility<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">language</span>&gt;</span>en-US<span class="tag">&lt;/<span class="name">language</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">projectUrl</span>&gt;</span>https://github.com/marsen/Marsen.Nuget.Packages<span class="tag">&lt;/<span class="name">projectUrl</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">metadata</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="取得授權-token"><a href="#取得授權-token" class="headerlink" title="取得授權 token"></a>取得授權 token</h3><p>請參考<a href="https://help.github.com/en/articles/configuring-nuget-for-use-with-github-package-registry#authenticating-to-github-package-registry" target="_blank" rel="noopener">Configuring NuGet for use with GitHub Package Registry</a> 或是 <a href="https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line" target="_blank" rel="noopener">Creating a personal access token for the command line</a><br><strong>至少需要以下權限</strong></p><ul><li><input disabled="" type="checkbox"> repo Full control of private repositories<ul><li><input disabled="" type="checkbox"> repo:status Access commit status</li><li><input disabled="" type="checkbox"> repo_deployment Access deployment status</li><li><input disabled="" type="checkbox"> public_repo Access public repositories</li><li><input disabled="" type="checkbox"> repo:invite Access repository invitations</li></ul></li><li><input disabled="" type="checkbox"> write:packages Upload packages to github package registry</li><li><input disabled="" type="checkbox"> read:packages Download packages from github package registry</li></ul><h3 id="下載-安裝-設定-Nuget"><a href="#下載-安裝-設定-Nuget" class="headerlink" title="下載/安裝/設定 Nuget"></a>下載/安裝/設定 Nuget</h3><ol><li><a href="https://www.nuget.org/downloads" target="_blank" rel="noopener">下載 Latest Nuget</a>，取得 nuget.exe</li><li>設定 Path (以 Windows 10 為例)<ul><li>控制台</li><li>系統設定&gt;進階設定</li><li>環境變數 &gt; Path</li></ul></li><li>設定完 path 記得重啟 Terminal Session</li></ol><h3 id="新增-Nuget-Source"><a href="#新增-Nuget-Source" class="headerlink" title="新增 Nuget Source"></a>新增 Nuget Source</h3><h4 id="新增"><a href="#新增" class="headerlink" title="新增"></a>新增</h4><p>Name 、 Source 與 UserName 網址請依實際調整參數<br>Password 請代入 token</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nuget sources Add -Name <span class="string">"Marsen.Nuget sources"</span> /</span><br><span class="line">-Source <span class="string">"https://nuget.pkg.github.com/marsen/index.json"</span> /</span><br><span class="line">-UserName marsen -Password 3*******************************1</span><br></pre></td></tr></table></figure><h4 id="設定-Key"><a href="#設定-Key" class="headerlink" title="設定 Key"></a>設定 Key</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuget setapikey 3*******************************1 -Source <span class="string">"Marsen Nuget Sources"</span></span><br></pre></td></tr></table></figure><h4 id="刪除"><a href="#刪除" class="headerlink" title="刪除"></a>刪除</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuget sources Remove -Name <span class="string">"Marsen.Nuget sources"</span></span><br></pre></td></tr></table></figure><h4 id="查詢"><a href="#查詢" class="headerlink" title="查詢"></a>查詢</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuget sources</span><br></pre></td></tr></table></figure><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuget pack Marsen.Package.csproj -OutputDirectory c:\local_nugets</span><br></pre></td></tr></table></figure><h4 id="發佈"><a href="#發佈" class="headerlink" title="發佈"></a>發佈</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nuget push c:\local_nugets\Marsen.Utility.1.0.0.nupkg -Source <span class="string">"Marsen Nuget Sources"</span></span><br></pre></td></tr></table></figure><h3 id="結果"><a href="#結果" class="headerlink" title="結果"></a>結果</h3><p><img src="https://i.imgur.com/Qz5Rv4c.jpg" alt="GitHub Package Registry"></p><h2 id="下一步"><a href="#下一步" class="headerlink" title="下一步"></a>下一步</h2><ol><li>每次都要打版號好麻煩，能不能自動化 ?</li><li>透過 CI 建立，並傳入參數作為版號 ?</li><li>每次 commit 只要通過 UT 測試就發佈.beta版 ? CI 發佈正式版 ?</li></ol><p>more…</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://help.github.com/en/articles/configuring-nuget-for-use-with-github-package-registry#authenticating-to-github-package-registry" target="_blank" rel="noopener">Configuring NuGet for use with GitHub Package Registry</a></li><li><a href="https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line" target="_blank" rel="noopener">Creating a personal access token for the command line</a></li><li><a href="https://www.nuget.org/" target="_blank" rel="noopener">https://www.nuget.org/</a></li><li><a href="https://docs.microsoft.com/zh-tw/nuget/install-nuget-client-tools" target="_blank" rel="noopener">https://docs.microsoft.com/zh-tw/nuget/install-nuget-client-tools</a></li><li><a href="https://docs.microsoft.com/zh-tw/nuget/reference/nuspec" target="_blank" rel="noopener">https://docs.microsoft.com/zh-tw/nuget/reference/nuspec</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;目標&quot;&gt;&lt;a href=&quot;#目標&quot; class=&quot;headerlink&quot; title=&quot;目標&quot;&gt;&lt;/a&gt;目標&lt;/h2&gt;&lt;p&gt;使用 GitHub Package Registry 建立一個自已的 Nuget Server。&lt;/p&gt;
&lt;h2 id=&quot;步驟&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
    
      <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>[工作筆記] 2019 常用工具整理</title>
    <link href="https://blog.marsen.me/2019/09/26/2019/my_tools_2019/"/>
    <id>https://blog.marsen.me/2019/09/26/2019/my_tools_2019/</id>
    <published>2019-09-26T09:41:17.000Z</published>
    <updated>2020-04-27T15:26:12.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="輸入法"><a href="#輸入法" class="headerlink" title="輸入法"></a>輸入法</h2><ul><li>無蝦米 (加速打字，未來不太看好，考慮更換中…)</li></ul><h2 id="網站"><a href="#網站" class="headerlink" title="網站"></a>網站</h2><ul><li><a href="https://www.slant.co/" target="_blank" rel="noopener">Slant 工具比較</a></li><li><a href="https://blog.marsen.me/2019/04/11/2019/tool_sites/">開發常用的工具網站 JSON/YAML/SQL</a></li><li><a href="http://www.richyli.com/tool/loremipsum/" target="_blank" rel="noopener">亂數假文產生器 - 中文</a></li><li><a href="https://www.lipsum.com/feed/html" target="_blank" rel="noopener">亂數假文產生器 - 英文</a></li><li><a href="https://zh-tw.facebook.com/" target="_blank" rel="noopener">資訊收集/廢文發佈</a></li></ul><h2 id="PC-工具"><a href="#PC-工具" class="headerlink" title="PC 工具"></a>PC 工具</h2><ul><li>文字比較工具<ul><li>Win Merge  </li></ul></li><li>Git GUI<ul><li><del>GitKraken(需收費)</del></li><li>Fork</li></ul></li><li>Carnac<ul><li>顯示鍵盤點擊歷程</li></ul></li><li>Windows 用 Launchers<ul><li>Wox</li></ul></li><li>快速搜尋文件<ul><li>Agent Ransack</li></ul></li><li>跨 PC 存放檔案<ul><li>Dropbox</li></ul></li><li>截圖錄影工具<ul><li>ShareX</li><li>Skitch  </li></ul></li><li>遠端桌面管理<ul><li>Remote Desktop Manager Free (試用中)</li><li>Remote Desktop Connection Manager</li></ul></li><li>windows 仿 linux 指令<ul><li>cygwin</li></ul></li></ul><h2 id="筆記工具"><a href="#筆記工具" class="headerlink" title="筆記工具"></a>筆記工具</h2><ul><li>Evernote<ul><li>專案分類</li><li>職涯規劃</li><li>已完成的項目</li></ul></li><li>Notion<ul><li>GTD</li><li>周記劃</li></ul></li><li>HackMD<ul><li>暫存的記錄</li><li>會議/社群活動即時記錄</li><li>Blog 草稿</li><li>共筆</li></ul></li><li>Blog<ul><li>技術實作記錄</li><li>社群活動記錄</li></ul></li></ul><h2 id="瀏覽器-amp-外掛"><a href="#瀏覽器-amp-外掛" class="headerlink" title="瀏覽器 &amp; 外掛"></a>瀏覽器 &amp; 外掛</h2><p>95% 使用 Chrome ，4% 使用 FireFox，極少情況使用其它瀏覽器</p><h3 id="Chrome"><a href="#Chrome" class="headerlink" title="Chrome"></a>Chrome</h3><ul><li>tampermonkey<ul><li>撰寫網頁小工具</li></ul></li><li>One Tab<ul><li>快速收攏大量分頁，常用在特殊主題搜尋的暫存</li></ul></li><li>Clear Cach<ul><li>清快取</li></ul></li><li>grammarly<ul><li>拼字校正</li></ul></li><li>Bitbucket Diff Tree<ul><li>Bitbucket PR 差異比較</li></ul></li><li>JSONView<ul><li>當 response 為 json 時更為好讀</li></ul></li><li>LastPass: Free Password Manager<ul><li>密碼管理</li></ul></li><li>Wappalyzer<ul><li>分析網站使用的框架與技術</li></ul></li><li>cVim<ul><li>使用 Vim 的習慣操作網頁</li></ul></li></ul><h2 id="文件編輯器"><a href="#文件編輯器" class="headerlink" title="文件編輯器"></a>文件編輯器</h2><ul><li>Vim</li><li>NotePad++</li><li>記事本</li></ul><h2 id="個人工具"><a href="#個人工具" class="headerlink" title="個人工具"></a>個人工具</h2><ul><li>桌面記時器 DesktopTimer.exe</li></ul><h2 id="開發工具"><a href="#開發工具" class="headerlink" title="開發工具"></a>開發工具</h2><h3 id="VS-Code"><a href="#VS-Code" class="headerlink" title="VS Code"></a>VS Code</h3><ul><li>ejs</li><li>C#</li><li>Chinese (Traditional) Language Pack for Visual Studio Code</li><li>Cucumber (Gherkin) Full Support</li><li>Docker</li><li>Git History</li><li>Git Project Manager</li><li>GitLens — Git supercharged</li><li>JSON Tools</li><li>Markdown All in One</li><li>markdownlint</li><li>Paste URL</li><li>PowerShell</li><li>Relative Line Numbers</li><li>Remote - WSL</li><li>REST Client</li><li>Settings Sync</li><li>Snippets and Syntax Highlight for Gherkin (Cucumber)</li><li>Sort lines</li><li>SQL Server (mssql)</li><li>stylus</li><li>Swagger Viewer</li><li>Unique Lines</li><li>Vim</li><li>vscode-icons</li><li>Vue 2 Snippets</li></ul><h3 id="Microsoft-Visual-Studio-Professional-2017-預計升到-2019"><a href="#Microsoft-Visual-Studio-Professional-2017-預計升到-2019" class="headerlink" title="Microsoft Visual Studio Professional 2017 (預計升到 2019)"></a>Microsoft Visual Studio Professional 2017 (預計升到 2019)</h3><ul><li>OzCode (付費軟體)<ul><li>增強除錯</li></ul></li><li>ReSharper Ultimate (付費軟體)<ul><li>dotCover (檢驗覆蓋率，需另外安裝)</li><li>強化重構/測試</li></ul></li><li>ILSpy<ul><li>反組譯工具</li></ul></li><li>SpecFlow for Visual Studio 2017<ul><li>BDD 開發</li></ul></li><li>GhostDoc Community for VS2017 and Later (免費版)<ul><li>自動加入註解</li></ul></li><li>ResXManger<ul><li>多語系 Resource 檔編輯</li></ul></li><li>VsVim<ul><li>Vim 支援工具</li></ul></li><li>Snippet Designer<ul><li>Snippet 編輯管理</li></ul></li><li>Style Cop<ul><li>代碼審查</li></ul></li><li>xUnit.net.TestGenerator<ul><li>加速寫單元測試(xUnit)</li></ul></li><li>CodeMaid<ul><li>代碼審查 &amp; 複雜度</li></ul></li><li>Visual F# Tools [實驗性]</li><li>Roslyn Expression Evaluators [實驗性]</li><li>Roslyn Interactive Componets [實驗性]</li><li>Roslyn Language Service [實驗性]</li><li>Microsoft Library Manager</li><li>Develop Automated Tests VS2017</li><li>Visual Commander</li><li>Fix Mixed Tabs</li><li>Microsoft Visual Studio 測試平台</li><li>Microsoft Visual Studio Installer Projects</li><li>Microsoft Azure WebJobs 工具</li><li>Cloud Explorer for VS 2017</li></ul><h3 id="LINQPad-5-付費"><a href="#LINQPad-5-付費" class="headerlink" title="LINQPad 5 (付費)"></a>LINQPad 5 (付費)</h3><p>快速檢驗 C# 語法的小工具</p><h3 id="Terminal"><a href="#Terminal" class="headerlink" title="Terminal"></a>Terminal</h3><ul><li>Cmder | Console Emulator</li><li>Windows Powershell ISE</li></ul><h3 id="資料庫管理"><a href="#資料庫管理" class="headerlink" title="資料庫管理"></a>資料庫管理</h3><ul><li>Redis Desktop Manager (Redis)</li><li>SSMS (MsSQL)</li><li>Robo 3T (Mongo DB)</li></ul><h3 id="容器管理"><a href="#容器管理" class="headerlink" title="容器管理"></a>容器管理</h3><ul><li>Docker Desktop</li><li>Kitematic</li></ul><p>(未完待續)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;輸入法&quot;&gt;&lt;a href=&quot;#輸入法&quot; class=&quot;headerlink&quot; title=&quot;輸入法&quot;&gt;&lt;/a&gt;輸入法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;無蝦米 (加速打字，未來不太看好，考慮更換中…)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;網站&quot;&gt;&lt;a href=&quot;#網站
      
    
    </summary>
    
    
    
      <category term="工作筆記" scheme="https://blog.marsen.me/tags/%E5%B7%A5%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記] 利用 .Net Core Project Template 加速開發</title>
    <link href="https://blog.marsen.me/2019/09/01/2019/dotnet_core_projecte_template/"/>
    <id>https://blog.marsen.me/2019/09/01/2019/dotnet_core_projecte_template/</id>
    <published>2019-09-01T12:46:46.000Z</published>
    <updated>2020-03-08T09:31:52.219Z</updated>
    
    <content type="html"><![CDATA[<h2 id="要知道的事"><a href="#要知道的事" class="headerlink" title="要知道的事"></a>要知道的事</h2><p>這篇是實作的紀錄，大部份資源都參考至 MSDN 線上文件<br>那裡會有更新更完整的文件支援。</p><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>專案上作了一個跨市場的服務，以提供主服務對不同市場金流的支援。<br>首先有一個國際化的專案，用來制定 API 層級的標準化，<br>而在不同的市場，例如:馬來西亞、香港、烏克蘭等…。<br>在地化的項目需要建立外掛(Plugin)專案的方式進行開發…  </p><p>建立一個全新的 Plugin 專案是一件麻煩的事，<br>首先要加入專案，再來要實作相對應的介面，<br>這裡指的是建立一個類別，然後繼承一堆介面，<br>ex:IPay、IRefund、ICheck…等，<br>並不包含商務邏輯的開發與實際的 API 或 SDK 串接，<br>而在公司的標準之下，我還必須引入一堆參考或 Nuget 套件。<br>同時因為國際化專案採用動態載入的機制，<br>有一些細節準則需要由 Plugin 專案遵循，才不會引發異常或 Runtime Error。</p><h2 id="實作筆記"><a href="#實作筆記" class="headerlink" title="實作筆記"></a>實作筆記</h2><h3 id="建立專案樣版-SOP"><a href="#建立專案樣版-SOP" class="headerlink" title="建立專案樣版 SOP"></a>建立專案樣版 SOP</h3><ol><li><p>建立樣版資料夾，比如說 <code>Blog.Plugin.Template</code></p></li><li><p>準備好你的專案檔與相關的必要檔案</p><p> 這裡的檔案你可以拿現成專案作修改，我個人是從頭手工打造了一個全新的Plugin。<br> 並且去除所有不相關不必要的資料夾、檔案、參考與程式。<br> 簡單的來說，這是一個殼、一個專案樣版(Template)而已。<br> 接下來會遇到的問題「參數化」，比如說專案的名稱，資料夾的名稱，或是程式本身的內容，會依據不同的 Plugin 專案而改變的部份。<br> 我把它分為檔案層級與內容層級的參數化。</p><ul><li><p>檔案層級參數化</p><p>  表示檔案名稱或是資料夾名稱等，我有動態抽換的需求。<br>  我會用 <code>F-*</code> 作為參數名稱，比如說 <code>F-plugin-name</code><br>  接下來將資料夾或檔案名稱想被抽換的部份改成參數名稱就好，參考下圖。<br>  <img src="https://i.imgur.com/wQVnR1h.jpg" alt="檔案層級參數化"></p></li><li><p>內容層級參數化</p><p>  比如說 Class Name、Namespace、建構子或方法，甚至是預設的註解，<br>  簡單的說只要是檔案內容相關的文字有必要被抽換，我就會使用這個參數設定。<br>  我會直接使用 <code>C-*</code> 參數名稱，比如說 <code>C-plugin-name</code>。<br>  下面是個例子。<br>  <img src="https://i.imgur.com/AhlYXRt.jpg" alt="內容層級參數化"></p></li></ul></li><li><p>建立 <code>.template.config</code> 資料夾</p></li><li><p>在<code>.template.config</code> 建立 <code>template.json</code><br>  <code>template.json</code> 可以說是整個專案樣版的靈魂部份，更多的訊息可以在 MSDN 找到，<br>  我只說明 <code>symbols</code> 節點的部份，它用來方置參數的訊息，所以需要建立一個自訂義的子節點，在這裡我命名為 <code>pluginName</code>，同時指定他的 type 為 parameter，<br>  透過設定 <code>defaultValue</code> 給予預設值，最後將 <code>fileRename</code> 指定為 <code>F-plugin-name</code>，<br>  將 <code>(C-plugin-name)</code> 指定為我的內容層級參數。</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"$schema"</span>: <span class="string">"http://json.schemastore.org/template"</span>,</span><br><span class="line"><span class="attr">"author"</span>: <span class="string">"MarkLin"</span>,</span><br><span class="line"><span class="attr">"classifications"</span>: [ <span class="string">"Common"</span>, <span class="string">"SDK"</span>, <span class="string">"C#8"</span> ],</span><br><span class="line"><span class="attr">"identity"</span>: <span class="string">"Marsen.Blog.Plugin.Template"</span>,</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"Marsen Blog Plugin Template"</span>,</span><br><span class="line"><span class="attr">"shortName"</span>: <span class="string">"mbp"</span>,</span><br><span class="line"><span class="attr">"tags"</span>: &#123;</span><br><span class="line">    <span class="attr">"language"</span>: <span class="string">"C#"</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"project"</span></span><br><span class="line">&#125;,  </span><br><span class="line"><span class="attr">"preferNameDirectory"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="attr">"symbols"</span>:&#123;</span><br><span class="line">    <span class="attr">"pluginName"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"parameter"</span>,</span><br><span class="line">    <span class="attr">"defaultValue"</span>: <span class="string">"Demo"</span>,</span><br><span class="line">    <span class="attr">"fileRename"</span>: <span class="string">"F-plugin-name"</span>,</span><br><span class="line">    <span class="attr">"replaces"</span>:<span class="string">"(C-plugin-name)"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>CLI強化，在<code>.template.config</code> 建立 <code>dotnetcli.host.json</code><br> 這個檔案建立的目的，是為了讓我接下來使用 CLI 建立專案時能夠指定傳入的參數。<br> 這裡需指定 <code>template.json</code> 中的 symbol 並設定</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"symbolInfo"</span>: &#123;</span><br><span class="line">      <span class="attr">"pluginName"</span>: &#123;</span><br><span class="line">          <span class="attr">"longName"</span>: <span class="string">"pluginName"</span>,</span><br><span class="line">          <span class="attr">"shortName"</span>: <span class="string">"p"</span></span><br><span class="line">          &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>執行 <code>dotnet new i</code> 註冊樣版<br> 執行命令前請確定所在位置包含<code>.template.config</code> 資料夾與相關的檔案</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new -i ./</span><br></pre></td></tr></table></figure></li><li><p>執行 <code>dotnet new -u</code> 查詢樣版列表資訊確認安裝已完成</p></li><li><p>應用</p><p> 在想建立專案的資料夾底下執行 <code>dotnet new &lt;template_name&gt;</code> 語法,<br> 並且可以透過 CLI 指定參數，我並沒有研究 GUI 的操作，有興趣的人請自行研究，<br> 如果能分享給我就不勝感激。</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new mbp -p Marsen2</span><br></pre></td></tr></table></figure></li><li><p>展示  </p></li></ol><div class="video-container"><iframe src="https://www.youtube.com/embed/RA_lHoa5uuI" frameborder="0" loading="lazy" allowfullscreen></iframe></div><p>我把這個例子放在 <a href="https://github.com/marsen/dotnet.core.project.template.sample" target="_blank" rel="noopener">Github</a> 上，有興趣的朋友可以試試看。</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="移除專案樣板-SOP"><a href="#移除專案樣板-SOP" class="headerlink" title="移除專案樣板 SOP"></a>移除專案樣板 SOP</h3><ol><li>執行 <code>dotnet new -u</code> 查詢樣版列表資訊，可以查到專案樣版的絕對路徑</li><li>執行 <code>dotnet new -u &lt;ABSOLUTE_FILE_SYSTEM_DIRECTORY&gt;</code></li></ol><h3 id="更新專案樣版"><a href="#更新專案樣版" class="headerlink" title="更新專案樣版"></a>更新專案樣版</h3><p>直接進入專案樣版的絕對路徑</p><h3 id="發佈"><a href="#發佈" class="headerlink" title="發佈"></a>發佈</h3><p>略…</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://github.com/marsen/dotnet.core.project.template.sample" target="_blank" rel="noopener">我的範例</a></li><li><a href="https://docs.microsoft.com/zh-tw/dotnet/core/tutorials/cli-templates-create-item-template" target="_blank" rel="noopener">教學課程：建立項目範本</a></li><li><a href="https://docs.microsoft.com/zh-tw/dotnet/core/tutorials/cli-templates-create-project-template" target="_blank" rel="noopener">教學課程：建立專案範本</a></li><li><a href="https://github.com/dotnet/dotnet-template-samples" target="_blank" rel="noopener">dotnet/dotnet-template-samples</a></li><li><a href="https://www.jerriepelser.com/blog/tips-for-developing-dotnet-new-templates/" target="_blank" rel="noopener">Tips for developing templates for dotnet new</a></li><li><a href="http://json.schemastore.org/template" target="_blank" rel="noopener">JSON 結構描述保存區的 template.json 結構描述</a></li><li><a href="https://github.com/dotnet/templating/issues/1238" target="_blank" rel="noopener">How to name (or rename) files based on a parameter? · Issue #1238 · dotnet/templating</a></li><li><a href="https://www.jerriepelser.com/blog/tips-for-developing-dotnet-new-templates/" target="_blank" rel="noopener">Tips for developing templates for dotnet new</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;要知道的事&quot;&gt;&lt;a href=&quot;#要知道的事&quot; class=&quot;headerlink&quot; title=&quot;要知道的事&quot;&gt;&lt;/a&gt;要知道的事&lt;/h2&gt;&lt;p&gt;這篇是實作的紀錄，大部份資源都參考至 MSDN 線上文件&lt;br&gt;那裡會有更新更完整的文件支援。&lt;/p&gt;
&lt;h2 id
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[實作筆記] AWS Auto Scaling Group</title>
    <link href="https://blog.marsen.me/2019/08/25/2019/aws_auto_sacling_group/"/>
    <id>https://blog.marsen.me/2019/08/25/2019/aws_auto_sacling_group/</id>
    <published>2019-08-25T03:21:46.000Z</published>
    <updated>2020-03-08T09:31:52.215Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>最近將一個服務掛上雲端(AWS)，使用 EC2 ，<br>並且實作了 Auto Scaling ，特別紀錄一下。</p><h2 id="概觀"><a href="#概觀" class="headerlink" title="概觀"></a>概觀</h2><p>以下使用的都是 AWS 的服務</p><ol><li><p>Auto Scaling Group (ASG) :<br> 本篇主角，根據指定的 Policies 與 LC 加開減少機器。</p></li><li><p>Launch Configuration (LC) :<br> 一個 ASG 背後一定要搭配一個 LC，可以說是 ASG 的生命共同體，<br> 用來指定 EC2 的配置，並透過 <code>User Data</code> 指定實體起動時所需要執行的工作。<br> 註: 也有使用 Launch Template 的作法，這篇不會討論。</p></li><li><p>Target Group (TG):<br> 由 1 到多個 EC2 實體(instance)組成，用來與 ELB(ALB) 搭配。</p></li><li><p>ALB :<br> 流量負載平衡，與 TG 作為搭配。可以依不同條件轉導到不同 TG</p></li></ol><p><img src="/images/2019/8/aws_asg_overview.jpg" alt="Auto Scaling Group"></p><h3 id="組合零件"><a href="#組合零件" class="headerlink" title="組合零件"></a>組合零件</h3><p>這有點像是在玩模型玩具，各個部份的小零件可以組成一個大零件，<br>再將各個部件結合，完成我所要的功能。<br>以下是這所需要的各個零件</p><ul><li>Golden Image : 由實際的 EC2 Instance 建立。並包含 Cloud Watch Agent 的配置。</li><li>User Data : Lanuch Configuration 的一個子項目，可以在 EC2 啟動時，執行指定的命令，比如說在 WINDOWS 透過 Powershell 抓取新版程式來建置服務。</li><li>Launch Configuration : 由上述兩個零件 (Gloden Image &amp; User Data) 組成，另外還可以設定 EBS、Plocies 等設定…</li><li>Target Group : 用來存放相關實體(EC2 Instance)的抽象概念, 可以設定 Health Check 來確定實體的健康情況。</li><li>Auto Scaling Group : 透過 Lanuch Configuration 來建立實體，並且可以將實體放入指定的 Target Group 之中。並且可以設定 Policy 來實現 Scaling Out/In.</li><li>ALB : 負載平衡的一種，透過設定，可以將 Request 導到對應的 Target Group。</li></ul><h2 id="紀錄"><a href="#紀錄" class="headerlink" title="紀錄"></a>紀錄</h2><h3 id="Add-CloudWatch-Agent"><a href="#Add-CloudWatch-Agent" class="headerlink" title="Add CloudWatch Agent"></a>Add CloudWatch Agent</h3><ol><li><p>Login EC2 Instance</p></li><li><p>安裝 CloudWatch Agent</p></li><li><p>準備一個 Json 檔如下</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line"><span class="attr">"agent"</span>:&#123;  </span><br><span class="line">    <span class="attr">"logfile"</span>:<span class="string">"c:\\ProgramData\\Amazon\\AmazonCloudWatchAgent\\Logs\\amazon-cloudwatch-agent.log"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"logs"</span>:&#123;  </span><br><span class="line">    <span class="attr">"logs_collected"</span>:&#123;  </span><br><span class="line">        <span class="attr">"files"</span>:&#123;  </span><br><span class="line">            <span class="attr">"collect_list"</span>:[  </span><br><span class="line">            &#123;  </span><br><span class="line">                <span class="attr">"file_path"</span>:<span class="string">"D:\\logs\\**.log"</span>,</span><br><span class="line">                <span class="attr">"log_group_name"</span>:<span class="string">"/MY/Service/Worker"</span>,</span><br><span class="line">                <span class="attr">"log_stream_name"</span>:<span class="string">"&#123;instance_id&#125;"</span>,</span><br><span class="line">                <span class="attr">"timezone"</span>:<span class="string">"UTC"</span>,</span><br><span class="line">                <span class="attr">"timestamp_format"</span>:<span class="string">"%Y-%m-%dT%H:%M:%S"</span></span><br><span class="line">            &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"log_stream_name"</span>:<span class="string">"default-log-stream"</span>,</span><br><span class="line">    <span class="attr">"force_flush_interval"</span>:<span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>開啟powershell，切換目錄至 AmazonCloudWatchAgent</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="string">"C:\Program Files\Amazon\AmazonCloudWatchAgent"</span></span><br></pre></td></tr></table></figure></li><li><p>執行以下語法</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./amazon-cloudwatch-agent-ctl.ps1 -a fetch-config -m ec2 -c file:yourjsonfile.json -s</span><br></pre></td></tr></table></figure></li></ol><h3 id="站台加入-Health-Check"><a href="#站台加入-Health-Check" class="headerlink" title="站台加入 Health Check"></a>站台加入 Health Check</h3><ul><li>加入靜態檔案(ex:check.html)</li><li>IIS Building * 80<br><img src="/images/2019/8/aws_iissetting.jpg" alt="IIS Building * 80"></li><li>設定 Target Group 的 Health Check (ex:/check.html)<br><img src="/images/2019/8/aws_tg_healthcheck.jpg" alt="AWS Target Gropu Health Check"></li></ul><h3 id="包成-Gloden-Image"><a href="#包成-Gloden-Image" class="headerlink" title="包成 Gloden Image"></a>包成 Gloden Image</h3><ol><li><p>機器下 ALB</p><p> <img src="/images/2019/8/aws_gi_out_alb.jpg" alt="機器下ALB"></p></li><li><p>開啟 Ec2LaunchSettings.exe</p><p> <img src="/images/2019/8/aws_ec2_launch_settings.jpg" alt="開啟 Ec2LaunchSettings.exe"></p></li><li><p>透過 Ec2LaunchSettings 關機</p><p> <img src="/images/2019/8/aws_ec2_launch_settings_turn_off.jpg" alt="透過 Ec2LaunchSettings 關機"></p></li><li><p>Waitting Instance Stoped , Create Images</p><p> <img src="/images/2019/8/aws_gi_create_images.jpg" alt="Waitting Instance Stoped , Create Images"></p></li></ol><h3 id="Create-Launch-Configuration"><a href="#Create-Launch-Configuration" class="headerlink" title="Create Launch Configuration"></a>Create Launch Configuration</h3><p><img src="/images/2019/8/aws_create_lc.jpg" alt="Create Launch Configuration"></p><ol><li>Choose AMI<br> <img src="/images/2019/8/aws_choose_ami.jpg" alt="Choose Gloden Image"></li><li>Choose Instance Type<br> <img src="/images/2019/8/aws_choose_instance_type.jpg" alt="t2.small"></li><li>Configure details<br> <img src="/images/2019/8/aws_userdata.jpg" alt="Add User Data"></li><li>Add Storage<br> <img src="/images/2019/8/aws_ebs.jpg" alt="Set EBS"></li><li>Configure Security Group</li><li>Review</li></ol><h3 id="Create-Auto-Scaling-group"><a href="#Create-Auto-Scaling-group" class="headerlink" title="Create Auto Scaling group"></a>Create Auto Scaling group</h3><ol><li>Configure Auto Scaling group details<br> <img src="/images/2019/8/aws_create_asg.jpg" alt="Configure Auto Scaling group details"></li><li>Configure scaling policies<blockquote><p>略</p></blockquote></li><li>Configure Notifications<blockquote><p>略</p></blockquote></li><li>Configure Tags<blockquote><p>略</p></blockquote></li><li>Review</li></ol><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://docs.aws.amazon.com/zh_tw/autoscaling/ec2/userguide/create-asg-from-instance.html" target="_blank" rel="noopener">使用 EC2 執行個體建立 Auto Scaling 群組 - Amazon EC2 Auto Scaling</a></li><li><a href="https://docs.aws.amazon.com/en_us/autoscaling/ec2/userguide/LaunchConfiguration.html" target="_blank" rel="noopener">Launch Configurations - Amazon EC2 Auto Scaling</a></li><li><a href="https://aws.amazon.com/cn/blogs/china/aws-alb-route-distribute/" target="_blank" rel="noopener">使用AWS Application Load Balancer</a></li><li><a href="https://docs.aws.amazon.com/zh_tw/elasticloadbalancing/latest/network/load-balancer-target-groups.html" target="_blank" rel="noopener">Network Load Balancers 的目標群組</a></li><li><a href="https://docs.aws.amazon.com/zh_tw/elasticloadbalancing/latest/network/create-target-group.html" target="_blank" rel="noopener">為 Network Load Balancer 建立目標群組</a></li><li><a href="https://docs.aws.amazon.com/zh_tw/AmazonCloudWatch/latest/logs/QuickStartWindows2016.html#configure_cwl_download" target="_blank" rel="noopener">CloudWatch Logs</a></li><li><a href="https://docs.aws.amazon.com/zh_tw/AmazonCloudWatch/latest/monitoring/Install-CloudWatch-Agent.html" target="_blank" rel="noopener">使用 CloudWatch 代理程式從 Amazon EC2 執行個體和現場部署伺服器收集指標和日誌 - Amazon CloudWatch</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;最近將一個服務掛上雲端(AWS)，使用 EC2 ，&lt;br&gt;並且實作了 Auto Scaling ，特別紀錄一下。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
    
      <category term="AWS" scheme="https://blog.marsen.me/tags/AWS/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記] CPAU 加密仿登入</title>
    <link href="https://blog.marsen.me/2019/08/20/2019/cpau/"/>
    <id>https://blog.marsen.me/2019/08/20/2019/cpau/</id>
    <published>2019-08-20T02:46:10.000Z</published>
    <updated>2020-03-08T09:31:52.218Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>登入 SQL Server 需要受到權限管控，<br>而在 Windows 中需要使用特定用戶身份登入時，<br>我們常常會選擇 runas 命令。  </p><h2 id="原始作法"><a href="#原始作法" class="headerlink" title="原始作法"></a>原始作法</h2><p>大概類似如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">runas.exe /netnoly /user:MyCompany\Marsen <span class="string">"C:\Program Files (x86)\Microsoft SQL Server\140\Tools\Binn\ManagementStudio\Ssms.exe"</span></span><br></pre></td></tr></table></figure><p>我會寫成一個 ps (PowerShell) File 來執行這件事。<br>但是會有一些問題。</p><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><ol><li>每次登入都輸入密碼好麻煩</li><li>密碼很長又複雜，Terminal 又看不出輸入是否正確，常常會打錯</li><li>密碼如果寫在 PowerShell 中會有風險</li></ol><p>我希望點兩下就能以正確的身份開啟 SSMS 而且密碼不會被明碼存儲</p><h2 id="CPAU"><a href="#CPAU" class="headerlink" title="CPAU"></a>CPAU</h2><ol><li>請先下載<a href="https://www.joeware.net/freetools/tools/cpau/" target="_blank" rel="noopener">CPAU</a>\<ul><li>我採用綠色安裝，如果有必要可以設為環境變數</li></ul></li></ol><ol start="2"><li><p>加密,以下的語法會產生以 <code>MyCompany\Marsen</code> 的身份登入執行 SSMS 的批次檔 <code>run.bat</code></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CPAU -u MyCompany\marsen -p *************** -ex <span class="string">"C:\Program Files (x86)\Microsoft SQL Server\140\Tools\Binn\ManagementStudio\Ssms.exe"</span> -enc -file D:\run.bat</span><br></pre></td></tr></table></figure></li><li><p>解密</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CPAU -file D:\run.bat -dec</span><br></pre></td></tr></table></figure></li></ol><p>最後只要將步驟 4 的語法存成一個 bat 檔，就可以隨時點兩下執行了。</p><h2 id="免責聲明"><a href="#免責聲明" class="headerlink" title="免責聲明"></a>免責聲明</h2><p>雖然是加密過的檔案，不過如果被人知道你是使用 CAPU 加密，攻擊者取得檔案後仍然可以透過 CAPU 解密登入。<br>所以使用上一定要小心檔案不要外流，主要的優點仍然是節省打密碼的時間與打錯的風險。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2012-r2-and-2012/cc771525(v%3Dws.11)" target="_blank" rel="noopener">Runas</a></li><li><a href="https://www.joeware.net/freetools/tools/cpau/" target="_blank" rel="noopener">CPAU</a></li><li><a href="https://blog.xuite.net/billchu1109/wretch/142970080-Rusas%E7%9A%84%E6%9B%BF%E4%BB%A3%E6%96%B9%E6%A1%88CPAU" target="_blank" rel="noopener">Rusas的替代方案CPAU</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;登入 SQL Server 需要受到權限管控，&lt;br&gt;而在 Windows 中需要使用特定用戶身份登入時，&lt;br&gt;我們常常會
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[閱讀筆記] 執行力的修練</title>
    <link href="https://blog.marsen.me/2019/08/10/2019/book/the_4_disciplines_of_execution/"/>
    <id>https://blog.marsen.me/2019/08/10/2019/book/the_4_disciplines_of_execution/</id>
    <published>2019-08-09T19:10:15.000Z</published>
    <updated>2020-03-08T09:31:52.218Z</updated>
    
    <content type="html"><![CDATA[<h2 id="與成功有約的四個實踐原則"><a href="#與成功有約的四個實踐原則" class="headerlink" title="與成功有約的四個實踐原則"></a>與成功有約的四個實踐原則</h2><p><img src="https://i.imgur.com/RyowM2h.jpg" alt="四個實踐原則"></p><h2 id="紀律一、鎖定極重要目標"><a href="#紀律一、鎖定極重要目標" class="headerlink" title="紀律一、鎖定極重要目標"></a>紀律一、鎖定極重要目標</h2><p>80 % 用來維持改進日常工作，<br>20% 的時間與心力投入能帶來影響的目標，<br>尋找與使命有更直接關連的目標。  </p><h3 id="法則"><a href="#法則" class="headerlink" title="法則"></a>法則</h3><ol><li>不能聚焦顧於兩個以上的極重要目標</li><li>選擇能幫助打贏戰爭(高層次)的戰役(低層次)</li><li>高階領導人可以否決，但不能命令(賦予所有權與參與感)</li><li>設定「在何時之前從X到Y」的終點線</li></ol><h3 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h3><ol><li>在我們營運的其它部份保持目前績效的前提下，哪一部份的改變能帶來最大的影響 ?</li><li>為了在這場戰爭中取勝，至少一定要打贏哪些戰役 ?</li></ol><h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3><blockquote><p>影響地圖 ?<br>OKR</p></blockquote><h2 id="紀律二、從領先指標下手"><a href="#紀律二、從領先指標下手" class="headerlink" title="紀律二、從領先指標下手"></a>紀律二、從領先指標下手</h2><p>領先指標的特徵  </p><ol><li>具有預測作用</li><li>團隊有能力影響它</li><li>領先指標可能是違反直覺的</li></ol><p>找到槓桿(領先指標)的支點<br><img src="https://i.imgur.com/DyfN3F5.jpg" alt="領先指標"></p><h2 id="紀律三、設置醒目計分板"><a href="#紀律三、設置醒目計分板" class="headerlink" title="紀律三、設置醒目計分板"></a>紀律三、設置醒目計分板</h2><ul><li>優秀的團隊隨時知道自已是屬於領先還是落後。</li><li>制定一個屬於「隊員」的計分板<ul><li>必須簡單</li><li>必須顯而易見</li><li>同時揭露領先與落後指標</li><li>知道正在贏或輸</li></ul></li><li>賽局本身比計分板重要<ul><li>求「勝」而非求「不敗」</li></ul></li></ul><h3 id="反思-1"><a href="#反思-1" class="headerlink" title="反思"></a>反思</h3><ul><li>看板</li><li>Burn Down/Up Chart</li><li>電子看板的便利，實體看版的可視性</li></ul><h2 id="紀律四、落實當責"><a href="#紀律四、落實當責" class="headerlink" title="紀律四、落實當責"></a>紀律四、落實當責</h2><p>為了把績效得分往前推進而向整個團隊作出承諾，並以有紀律的方式貫徹執行。  </p><ul><li>《爛工作的三個跡象》<ol><li>無人聞問</li><li>可有可無</li><li>無從評量</li></ol></li></ul><h3 id="原則"><a href="#原則" class="headerlink" title="原則"></a>原則</h3><ol><li>每周的同一時間開會</li><li>別讓日常事項進入會議</li></ol><h3 id="議程"><a href="#議程" class="headerlink" title="議程"></a>議程</h3><ol><li>報告:報告上次作出的承諾</li><li>檢討:從成功和失敗中學習</li><li>計畫:釐清並作出新承諾</li></ol><h3 id="問題-1"><a href="#問題-1" class="headerlink" title="問題"></a>問題</h3><ul><li>我可以作什麼會對領先指標有幫助 ?</li></ul><h3 id="反思-2"><a href="#反思-2" class="headerlink" title="反思"></a>反思</h3><ul><li>Scurm 四大會議的立會與 Retrospective</li></ul><h2 id="執行"><a href="#執行" class="headerlink" title="執行"></a>執行</h2><table><thead><tr><th>極重要目標構想</th><th>目前的成果(從X)</th><th>期望的成果(到Y)</th><th>期限(在何時之前)</th><th>排序</th></tr></thead><tbody><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><table><thead><tr><th>領先指標構想</th><th>如何評量</th><th>排序</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr></tbody></table><p>領先指標 Check List</p><ul><li>是否從團隊成員及其他人蒐集了大量意見與建議 ?</li><li>是否有預測作用 ?</li><li>團隊能不能影響它 ?</li><li>它是不是可以被測量 ?</li><li>蒐集他的價值是否高於成本 ?</li><li>每個指標是否包含動詞 ?</li><li>是否可以量化 ?</li></ul><p>計分版主題</p><ol><li>趨勢線</li><li>速度計</li><li>長條圖</li><li>紅綠燈</li></ol><table><thead><tr><th>團隊極重要目標</th><th>落後指標</th></tr></thead><tbody><tr><td></td><td></td></tr><tr><td>領先指標1</td><td>圖表</td></tr><tr><td></td><td></td></tr><tr><td>領先指標2</td><td>圖表</td></tr><tr><td></td><td></td></tr></tbody></table><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;與成功有約的四個實踐原則&quot;&gt;&lt;a href=&quot;#與成功有約的四個實踐原則&quot; class=&quot;headerlink&quot; title=&quot;與成功有約的四個實踐原則&quot;&gt;&lt;/a&gt;與成功有約的四個實踐原則&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/
      
    
    </summary>
    
    
    
      <category term="閱讀筆記" scheme="https://blog.marsen.me/tags/%E9%96%B1%E8%AE%80%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>[閱讀筆記] 學徒模式--優秀軟體開發者的養成之路</title>
    <link href="https://blog.marsen.me/2019/08/07/2019/book/apprenticeship_patterns/"/>
    <id>https://blog.marsen.me/2019/08/07/2019/book/apprenticeship_patterns/</id>
    <published>2019-08-06T18:06:15.000Z</published>
    <updated>2020-03-08T09:31:52.215Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/2019/8/apprenticeship_patterns.jpg" alt="送書啦"></p><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>最近公司來了幾個來自 Build School 的學員，<br>作為暑期工讀生，開發一些 Side Project ，<br>雖然工作很忙，不過我倒是對帶新人還蠻有信心的。  </p><p>這些小朋友問了一些問題，讓我想到自已剛畢業和剛從資策會出來的那時候。<br>有的問題很大，大到可能要一輩子都無法解決。<br>有的問題很小，小到聽了會笑，但對他們來說可能像是眼裡的一粒沙。  </p><p>我在學習的初期，最困難的問題是<strong>不知道怎麼問問題</strong>。<br>而過了一陣子後，我發現一個更糟的狀況，<strong>我不知道我有問題</strong>。<br>而這本書大致上解決了我的上述的兩個問題。</p><h2 id="為何選擇這本書"><a href="#為何選擇這本書" class="headerlink" title="為何選擇這本書"></a>為何選擇這本書</h2><p>非常好讀，你不需要從頭讀到尾。<br>首先是每個篇幅非常的短，大概只要 5~10 分鐘就能讀完。<br>再來是除了第一章外，每一大章都會有一個地圖，<br>讓你能看見全貌。  </p><h2 id="如何讀這本書"><a href="#如何讀這本書" class="headerlink" title="如何讀這本書"></a>如何讀這本書</h2><p>而每一篇都包含情境、問題、解決方案與參照，<br>情境與問題就像是這本書的 GPS ,<br>讓你知道你落在這本書的哪個點上 。<br>解決方案是通篇的主體，但是對我來說後面的行動更為重要，<br>我開始練習 Kata、寫 Blog、尋找導師大多是因這本書而開始的。  </p><p>最後，都會附上相關章節的參照。<br>這非常有幫助，原因是在這張地圖上，<br>你可能會同時落在幾個點上。<br>那麼地圖與參照就會非常有幫助，你可以查找地圖發現有關連的章節，<br>也可以直接透過參照找到其它章節。  </p><h2 id="會不會是雞湯文"><a href="#會不會是雞湯文" class="headerlink" title="會不會是雞湯文"></a>會不會是雞湯文</h2><p>會不會變成雞湯，其實取決於你自已。<br>書上的行動，你作了嗎 ?<br>如果不行動，就當作喝雞湯吧。  </p><h2 id="這本書的缺點"><a href="#這本書的缺點" class="headerlink" title="這本書的缺點"></a>這本書的缺點</h2><p>這本書強調的是如何成為一個工匠，<br>如何成為一個達人。<br>我知道的現實是，很多工程人員到了一定的程度就會轉換職務<br>如果你的目標是成為管理者，業務等…職務<br>我想這本書在幫助上可能會少一半。<br>畢竟這不是一本教你管理、銷售或領導的書。</p><h2 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h2><p>現實上的工匠真的很少，這不是條發大財的路。<br>走起來也很辛苦，不過這是個革命的時代，<br>各行各業都在與軟體產業發生衝突與融合，<br>如果能有更多優秀的工程師，我們就不需要工程師了。</p><blockquote><p>鍚將會扮演它的角色，直到這個世界不再需要鍚為止，<br>然後鍚就會變成金子。</p><footer><strong>El Alquimista</strong></footer></blockquote><p>期許自已和看到這篇文章的你都能成為更好的工程師。</p><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/2019/8/apprenticeship_patterns.jpg&quot; alt=&quot;送書啦&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情
      
    
    </summary>
    
    
    
      <category term="閱讀筆記" scheme="https://blog.marsen.me/tags/%E9%96%B1%E8%AE%80%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
</feed>
