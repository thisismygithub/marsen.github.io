<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Marsen&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/be6152866ede00bca9d8f92aa352c938</icon>
  <subtitle>waiting to load</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.marsen.me/"/>
  <updated>2021-05-24T16:11:50.942Z</updated>
  <id>https://blog.marsen.me/</id>
  
  <author>
    <name>Marsen L.</name>
    <email>thisismysoul@gmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>[實作筆記] Kent Beck 的測試驅動開發 Ch12 Ch13</title>
    <link href="https://blog.marsen.me/2021/05/24/2021/book_tdd_by_example/"/>
    <id>https://blog.marsen.me/2021/05/24/2021/book_tdd_by_example/</id>
    <published>2021-05-24T12:55:16.000Z</published>
    <updated>2021-05-24T16:11:50.942Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>最近疫情昇溫,公司開始 Work From Home,<br>少了通勤時間,少了晚上的聚會或運動課,<br>每天大概多了３～５個小時,趁現在多看點書囉,<br>「Kent Beck 的測試驅動開發」是一本 TDD 的經典,<br>加上是由 91 Chen 所翻譯,所以一出版我就買了,<br>不過一直到最近才有機會看,危機或許是就是轉機,趁現在補充一下自已的技能點數吧。</p><h2 id="本書介紹"><a href="#本書介紹" class="headerlink" title="本書介紹"></a>本書介紹</h2><p>這本書分為三大部份,分別是第一部份貨幣範例,<br>第二部份　xUnit 範例, 最後一部份是介紹 TDD 模式。<br>本篇文章著重在第一部份　Ch12 與　Ch13　章的部份,<br>這裡有大量的實作, 書中作者是用 Java 實現的, 我是試著用 C# 與 xUnit 去實作。  </p><p>這裡作者的思路對我來說實在是難以理解,<br>重構步驟更是讓我消化不良,<br>想了一下, 回歸初衷用我自已的步伐<br>試試看能不能「Driven」一些產品代碼出來。<br>特以此文記錄。</p><h2 id="我在哪裡"><a href="#我在哪裡" class="headerlink" title="我在哪裡"></a>我在哪裡</h2><p>我已經有了一些代碼, 並且開始了加法的計算<br>幣別或許是一個問題, 但在我們（在書中）先簡化這個問題, 只作美元的加法。<br>測試案例如下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSimpleAddition</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Money five = Money.dollar(<span class="number">5</span>);</span><br><span class="line">    IExpression sum = five.plus(five);</span><br><span class="line">    Bank bank = <span class="keyword">new</span> Bank();</span><br><span class="line">    Money reduce = bank.reduce(sum,<span class="string">&quot;USD&quot;</span>);</span><br><span class="line">    Assert.Equal(Money.dollar(<span class="number">10</span>), reduce);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>five 是個簡單的 Money 物件，代表 5 美元。<br>這個測試案例存在一個運算式(IExpression)的隱喻,<br>這個隱喻我可真得想不出來, 作者也說他是經過 20 次以上的練習才有這樣的神來一筆,<br>我先接受這點繼續作下去</p><blockquote><p>在書中我比較能接受是錢包裡面有很多國家錢幣的概念<br>不過我可能還是會用一個 List 丟給計算器，而不是透過運算式<br>運算式我會想像成我有 5 美元紙鈔跟　5 元法郎(現在先簡化成美元）‘five.plus(five);‘<br>然後請銀行依匯率（目前暫時沒有換匯的需求）算錢給我　‘bank.reduce(sum,”USD”);‘</p></blockquote><p>第一個問題是, 雖然測試綠燈, 不過其實是假的<br>Hard Code 寫死回傳 10 美元, <code>return Money.dollar(10);</code><br> 所以這裡開始會跟書上的發展有些不同, 但應該是殊途同歸才對</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Bank</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Money <span class="title">reduce</span>(<span class="params">IExpression sum, <span class="built_in">string</span> usd</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> Money.dollar(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1"></a><a href="https://github.com/marsen/Marsen.NetCore.Dojo/pull/36/commits/6947759e40bfd6c35696a356077366b8698ba3a8">Step 1</a></h3><p>參數名命怪怪的先改一下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Money <span class="title">reduce</span>(<span class="params">IExpression expression, <span class="built_in">string</span> currency</span>)</span></span><br></pre></td></tr></table></figure><h3 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2"></a><a href="https://github.com/marsen/Marsen.NetCore.Dojo/pull/36/commits/ef72d8480230fcad0034e04e7a396443dd98f576">Step 2</a></h3><p>讓 Bank 的 reduce 要有意義, 所以我們想像這個運算式應該是總和(Sum)<br>只有型別是 Sum 的時候, 才作運算，其它部份就拋出錯誤</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Money <span class="title">reduce</span>(<span class="params">IExpression expression, <span class="built_in">string</span> currency</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (expression.GetType() == <span class="keyword">typeof</span>(Sum))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> Money.dollar(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這裡有兩個問題, Class Sum 還沒有建立, 　<br>這是小問題, 下一個 <a href="https://github.com/marsen/Marsen.NetCore.Dojo/pull/36/commits/54d8fda10da4984b38a3aedd3734343fd1900e8e">Commit</a> 我們就把他實作出來<br>另外一個問題是 NotImplementedException 並沒有被測試包覆,<br>但這不是我主要的情境, 讓我學習 Kent Beck 寫到待辦清單吧。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TODO List</span><br><span class="line">- 只有 Sum Type 進行運算</span><br><span class="line">- Hard Code 寫死回傳值</span><br><span class="line">- NotImplementedException 並沒有被測試包覆</span><br></pre></td></tr></table></figure><p>不過我拿到了一個紅燈, 看一下錯誤訊息</p><p><code>System.NotImplementedException: The method or operation is not implemented.</code></p><p>看來 expression 的 Type 並不是 Sum.  </p><h3 id="Step-3"><a href="#Step-3" class="headerlink" title="Step 3"></a><a href="https://github.com/marsen/Marsen.NetCore.Dojo/pull/36/commits/e0417ceae79ddf6c831de7dec18e3cb09b692469">Step 3</a></h3><p>我們試著先將 Client 端(也就是我們的測試案例)的部份,<br>轉換成 Sum</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IExpression result = five.plus(five);</span><br><span class="line">Sum sum = (Sum) result;</span><br></pre></td></tr></table></figure><p>這個時候編譯會失敗, 原因是 Sum 未實作 IExpression 介面,<br>一樣一個<a href="https://github.com/marsen/Marsen.NetCore.Dojo/pull/36/commits/3c7d5cc0f89b45236cfdad686890a0c526910dc2">Commit</a>搞定他<br>重新跑一下測試, 還是紅燈但是錯誤訊息變了, 無法將 Money 轉型成 Sum</p><blockquote><p>System.InvalidCastException Unable to cast object of type<br>‘Marsen.NetCore.Dojo.Tests.Books.TddByExample.Money’ to type<br>‘Marsen.NetCore.Dojo.Tests.Books.TddByExample.Sum’.`</p></blockquote><h3 id="Step-4"><a href="#Step-4" class="headerlink" title="Step 4"></a><a href="https://github.com/marsen/Marsen.NetCore.Dojo/pull/36/commits/e3ba9ac67234f9a8894077d56604c8e34896ab1a">Step 4</a></h3><p>直接 new Sum() 回傳就好, 記得嗎？我目前仍未通過測試。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Sum <span class="title">plus</span>(<span class="params">Money money</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Sum();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到這一步就通過測試了, 現在只有 Sum 會回傳　<code>return Money.dollar(10);</code><br>書中則是另外寫了一個測試, 但過程中我總會改壞另一個測試, 現在的步驟比較適合我</p><p>再看一下我們的待辦清單</p><blockquote><p>TODO List<br><del>只有 Sum Type 進行運算</del><br>Hard Code 寫死回傳值<br>NotImplementedException 並沒有被測試包覆</p></blockquote><h3 id="Step-5"><a href="#Step-5" class="headerlink" title="Step 5"></a>Step 5</h3><p>接下來我想處理 Hard Code 的部份,<br>但是目前的 test Case 有點凌亂, 稍微整理一下</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSimpleAddition</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Money five = Money.dollar(<span class="number">5</span>);</span><br><span class="line">    Sum fivePlusFive = five.plus(five);</span><br><span class="line">    Assert.Equal(Money.dollar(<span class="number">10</span>), _bank.reduce(fivePlusFive, <span class="string">&quot;USD&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step-6"><a href="#Step-6" class="headerlink" title="Step 6"></a><a href="https://github.com/marsen/Marsen.NetCore.Dojo/pull/36/commits/7902242c7ff66a741ff8aca2004cd95d686c8dd0">Step 6</a></h3><p>加上一個新的案例來產生紅燈</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">Fact</span>]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSimpleAddition</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Money five = Money.dollar(<span class="number">5</span>);</span><br><span class="line">    Money four = Money.dollar(<span class="number">4</span>);</span><br><span class="line">    Sum fivePlusFive = five.plus(five);</span><br><span class="line">    Sum fivePlusFour = five.plus(four);</span><br><span class="line">    Assert.Equal(Money.dollar(<span class="number">10</span>), _bank.reduce(fivePlusFive, <span class="string">&quot;USD&quot;</span>));</span><br><span class="line">    Assert.Equal(Money.dollar(<span class="number">9</span>), _bank.reduce(fivePlusFour, <span class="string">&quot;USD&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Step-7"><a href="#Step-7" class="headerlink" title="Step 7"></a>Step 7</h3><p>回傳計算結果, 這個職責在此回到 expression 手上, 　<br>那 Bank 要作什麼？<br>在我的想像中將會是匯率與幣別的運算, 　<br>總之, 目前還輪不到它,</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Bank</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Money <span class="title">reduce</span>(<span class="params">IExpression expression, <span class="built_in">string</span> currency</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">if</span> (expression.GetType() == <span class="keyword">typeof</span>(Sum))</span><br><span class="line">        &#123;</span><br><span class="line">            Sum sum = (Sum) expression;</span><br><span class="line">            <span class="keyword">return</span> sum.reduce();</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><h3 id="Step-8"><a href="#Step-8" class="headerlink" title="Step 8"></a>Step 8</h3><p>讓 Sum 實作　reduce 邏輯</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Sum</span> : <span class="title">IExpression</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> augend;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">int</span> addend;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sum</span>(<span class="params">Money augend, Money addend</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">this</span>.augend = augend.Amount;</span><br><span class="line">        <span class="keyword">this</span>.addend = addend.Amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Money <span class="title">reduce</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="keyword">return</span> Money.dollar(<span class="keyword">this</span>.augend + <span class="keyword">this</span>.addend);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目前就可以通過測試,接下來我將試著接回書上的第 14 章.<br>完整分支請<a href="https://github.com/marsen/Marsen.NetCore.Dojo/tree/Book/TDDByExampleCh12Ch13onMyWay">參考</a></p><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;最近疫情昇溫,公司開始 Work From Home,&lt;br&gt;少了通勤時間,少了晚上的聚會或運動課,&lt;br&gt;每天大概多了３～
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[閱讀筆記] 原子習慣/驚人習慣力/烏托邦的日常/象與騎象人</title>
    <link href="https://blog.marsen.me/2021/05/07/2021/about_habits/"/>
    <id>https://blog.marsen.me/2021/05/07/2021/about_habits/</id>
    <published>2021-05-07T09:16:35.000Z</published>
    <updated>2021-05-22T10:25:27.128Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>最近看了一些類似的書籍，稍微整理如下:</p><ul><li>烏托邦的日常</li><li>驚人習慣力</li><li>原子習慣</li><li>象與騎象人</li><li>我們為什麼這樣生活，那樣工作</li></ul><p>最近看的兩本是「烏托邦的日常」與「驚人習慣力」，<br>再來是「原子習慣」約是一年前的讀物，<br>「象與騎象人」與「我們為什麼這樣生活，那樣工作」則年代久遠不可考矣。<br>有點小小收獲，在此作個記錄。</p><h2 id="兩個問題，我是誰，我會是誰"><a href="#兩個問題，我是誰，我會是誰" class="headerlink" title="兩個問題，我是誰，我會是誰"></a>兩個問題，我是誰，我會是誰</h2><p>烏托邦一書裡面提到許多策略，<br>驚人與原子一書也都提供了各種策略，<br>這兩本書主要微型化工作項目，用以建立持續性行為，<br>或是反過來說，讓行為可以持續…</p><p>但是裡面最重要的事，卻都放在書的最後一個章節裡，<br>這件事就是<strong>身份認同</strong>，現在的我是誰 ? 過去的我會是誰 ?<br>我的答案是<br>你也可以想想你的答案會是什麼?</p><p>這也有點「把時間當朋友」一書中所說的「一切都是累積」，<br>改變自已的時間點跟種樹一樣，最佳時機是 20 年前，再來就是<strong>現在</strong></p><p>現在是一個矛盾的時間點，「舊我」與「新我」並存的時間點，<br>對於現在的自已你總有不滿意的地方，但現在的自已又同是過去的你的總合。<br>所以你是誰 ? 什麼造就了現在的你 ?<br>你想成為誰 ? 那你應該作些什麼 ?<br>你真的想要成為一個有腹肌的男人嗎 ? 還是只是覺得那樣又酷又帥 ?<br>你真的想要成為又酷又帥的人嗎 ? 還是你只是想要成為萬人迷，又或是你只是不想孤單 ?<br>你必須找到你真正的<strong>動機</strong>。</p><h3 id="動機、意志力與習慣"><a href="#動機、意志力與習慣" class="headerlink" title="動機、意志力與習慣"></a>動機、意志力與習慣</h3><p>在「驚人習慣力」一書中提到，</p><blockquote><p>意志力與動機不是二擇一的問題，</p></blockquote><p>動機與意志力都可以觸發新的行為發生，<br>但是動機(熱情)會遞減(反思:邊際效應)，不適合習慣的養成(重複性的動作)，<br>意志力是可靠(可以用系統強化，ex:待辦清單/行事曆)，<br>但是意志力是有限的;<br>而五個消耗意志力主要的原因:  </p><blockquote><ul><li>程度努力</li><li>認知困難度</li><li>負面的影響</li><li>主觀的疲勞</li><li>血糖濃度</li></ul></blockquote><p>我相信動機遞減說，我自覺更多時候，其實是沒有找到我真正的動機，<br>而這部份與自我認同有關，自我認同跟你的生活習習相關，<br>很多人一邊減肥，一邊對自已說我就是瘦不下來，<br>其實就是一種負面的自我暗示，你可以透過不斷的自我暗示來改變自我認同，<br>你可以巧妙的使用它來改變自我認同，<br>一般的書通常會說要對自已說「我要瘦下來」或是「我是 XXXX 」，<br>我認為那樣的行為是不會產生暗示的，你必需找到自已人生中的金句，才能發揮強效，<br>試試看自問自答，當你找到時，<strong>自我認同將為源源不決動機</strong>，<br>請務必對自已誠實，強者我朋友會這樣作，<br>「我就色，想把妹，想認識更多人，要有好的穿著，不能太胖，最好有點肌肉，才撐得起衣服」<br>後面買名貴的衣服、健身、不吃宵夜等習慣(行為)就都是後話了。</p><p>回到減少意志力的耗損，微型(原子)習慣請當作一種策略，<br>試著在自已身上執行，並追踪記錄，真的對你有效就持續執行。</p><h2 id="策略、衝突與自我"><a href="#策略、衝突與自我" class="headerlink" title="策略、衝突與自我"></a>策略、衝突與自我</h2><p>烏托邦書中將人分為四類，「自律」「問責」、「質疑」、「叛逆」者。<br>要小心分類的陷阱，就像是星座或生肖一樣，<br>一個人身上同時間會有多種角色，只是比例的多寡<br>甚至面對不同的事情時，不同的類型的反應會特別突出，<br>舉例來說: 當你是福委安排尾牙活動時，我可能偏向「問責」，與朋友聚餐時我會偏向「自律」</p><p>烏托邦一書提到許多策略，<br>當中的<strong>追踪策略</strong>特別有感，沒有量測沒有改善，<br>有了測試後，可以結合各種方法論來實現目標(GTD/PDCA/KPI/OKR 甚至 Scrum etc…)，<br>過程中記錄自已的心境變化，<code>你想成為的人，不一定是你真正想成為的人</code>，  </p><p>調整自已的節奏，使用<strong>明確策略</strong>寫下自覺得感受與期待，找到當中的衝突，<br>有時候<code>你可以全都要，有時候你必需要取捨，記錄下來或是可視化</code><br>迭代自已的目標，認識真正的自已，透過<strong>明確策略</strong>告訴自已現在不作什麼，<br>將可以給你更多的掌握感。</p><h3 id="策略清單"><a href="#策略清單" class="headerlink" title="策略清單"></a>策略清單</h3><h4 id="微型策略"><a href="#微型策略" class="headerlink" title="微型策略"></a>微型策略</h4><p>驚人習慣力與原子習慣的主要策略，<br>讓日常所作之事儘可能的小，減少執行耗費的心力</p><p>優點: 極小化項目，使得持續策略得已完成<br>缺點: 太過微小的習慣，難以出現有效的進步。</p><h4 id="持續策略"><a href="#持續策略" class="headerlink" title="持續策略"></a>持續策略</h4><p>另一個知名的名稱稱作「Don’t Break The Chain!(不要打斷鎖鍊)」，<br>主要目的讓累積的成果視覺化，成為一種外在問責與獎勵。</p><h4 id="方便-不方便策略"><a href="#方便-不方便策略" class="headerlink" title="方便/不方便策略"></a>方便/不方便策略</h4><p>舉例來說，可以準備多套器材避免自已懶散，或是成為一個顯見的提示，<br>來觸發動機，反之可以避免惡習。</p><h4 id="控制策略"><a href="#控制策略" class="headerlink" title="控制策略"></a>控制策略</h4><p>在特定的時間點作特定量的事，以得到掌控感/儀式感。<br>像是飯前禱告、每日自省、冥想，這個策略與<code>預先決策</code>或是<code>追踪策略</code>可以很好的結合，<br>具體來說，你可以試著每日自省 10 分鐘，如果熟悉看板的話，<br>就可以在看板上預先<code>預先決策</code>與<code>追踪</code>。</p><h4 id="預先決策策略"><a href="#預先決策策略" class="headerlink" title="預先決策策略"></a>預先決策策略</h4><p>減少決策所消耗的心力，事先作好作定，這裡的概念是<code>不要相信未來的自已</code>，<br>透過<code>現在的自已</code>設定目標，但當未來抵達的時候，你很有可能會軟弱的，<br>這時候<code>控制策略</code>所創造的掌控感也許可以助你一臂之力，<br><code>追踪策略</code>則可以讓你看見進度。</p><h4 id="追踪策略"><a href="#追踪策略" class="headerlink" title="追踪策略"></a>追踪策略</h4><p>前面提到追踪策略，只著重在看見進度，<br>但是這個策略的概念不僅僅是進度而，你也可以追踪其它任何東西，<br>比如說我也曾經用來追踪財務、時間與心理狀態，<br>優先養成追踪策略對自已會很有幫助。<br>具體的實踐可以參考 GTD 之類的作法</p><h4 id="新的環境"><a href="#新的環境" class="headerlink" title="新的環境"></a>新的環境</h4><p>趁機在新的一年、搬家、換工作等開始立志，<br>不過書中也提到，新的環境也很容易中斷故有的習慣，<br>如果有使用<code>追踪策略</code>比較不會中斷  </p><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><ul><li>行事曆/待辦: 我認為這是預先決策的具體實踐，</li><li>若則: 這個策略是如果沒作到 A 就作 B，可以預先決策，但我認為實作上仍然有困難，也許要額外的心力</li><li>近朱者赤: 接近你心中的實踐者</li><li>明確目標: 寫下自已的目標，這裡也是視覺化的應用</li></ul><h4 id="獎勵"><a href="#獎勵" class="headerlink" title="獎勵"></a><strong>獎勵</strong></h4><p>達到某個哩程碑時自我獎勵，但是在烏托邦一書有提到要小心這個策略，<br>根據你的獎勵，有可能會給心理負面的暗示，讓你覺得原本想養成的習慣變成一種苦難，<br>應該試著讓習慣本身就是一種獎勵，像是節食或運動，目的如果是<code>健康</code>或是<code>外型</code>的話<br>比起<strong>吃大餐</strong>，透過<code>追踪</code>的方式，讓自已的看到健康數值或外型的改變，<br>才是更好的獎勵方式。</p><h2 id="行動"><a href="#行動" class="headerlink" title="行動"></a>行動</h2><p>獎勵與動機應該緊密結合，<br>將所有外在的目標(想早睡、想瘦、想英文好)找到連結的內化目標(想健康、想賺錢…)<br>你可以試著探索什麼會是你現有的習慣與行為的內在動機 ?  </p><p>比如說你喜歡打球，是因為其中的<code>合作</code>還是<code>競爭</code>，或是面對<code>挑戰</code>的感覺 ?<br>你喜歡購物，是因為對金錢<code>掌控</code>感 ? 還是可以滿足對新產品的<code>好奇</code> ?<br>喜歡唱歌是因為會受到<code>肯定</code> ? 喜歡看劇可以滿足<code>幻想</code> 的生活 ?</p><p>進一步，你可以寫下你想要培養的習慣，<br>你想成為的人，你想達到的目標，外在的動機是什麼 ?<br>內在的動機又是什麼呢 ?</p><p>願你我都能成為想成為的人</p><ul><li>挑戰</li><li>好奇</li><li>掌控</li><li>幻想</li><li>合作</li><li>競爭</li><li>肯定</li></ul><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://blog.marsen.me/2016/12/05/2016/be_friend_with_time/">與時間作朋友</a></li><li><a href="https://newsveg.tw/blog/21740">《原子習慣》的精髓其實是：「成為你理想的模樣，就能自然地改變習慣。」</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;最近看了一些類似的書籍，稍微整理如下:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;烏托邦的日常&lt;/li&gt;
&lt;li&gt;驚人習慣力&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[活動筆記] 令人失望的敏捷劇本殺</title>
    <link href="https://blog.marsen.me/2021/04/14/2021/aglie_larp/"/>
    <id>https://blog.marsen.me/2021/04/14/2021/aglie_larp/</id>
    <published>2021-04-14T06:11:35.000Z</published>
    <updated>2021-04-17T02:44:50.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p><a href="https://agilecommtw.kktix.cc/events/agilescriptplay001">活動連結</a><br>好久沒參加敏捷活動了, 一些”敏捷”活動的反思有機會再聊聊,<br>另一個原因是好奇如何結合劇本殺,所以蠻期待.  </p><h2 id="一些記錄"><a href="#一些記錄" class="headerlink" title="一些記錄"></a>一些記錄</h2><ul><li><p>收費部份採取現場收費,所以 KKTIX 連結</p></li><li><p>時間被砍掉半小時,原本的設計是 1.5 小時.被砍到剩 1 小時.</p></li><li><p>主持人自已都說沒有很 involve 在整場活動中,畢竟是有收費的活動,這樣的發言不是很洽當</p><blockquote><p>導演在活動過程中,除了拍照外就是在跟某大師聊天,<br>實際上「導演」(場控) 有餘裕的話,我覺得並沒有不行,<br>但更重要整場的引導.<br>整場活動下來,包含結尾的自清,我覺得沒有作得很好</p></blockquote></li><li><p>某大師也是都在聊天,不過最後 End 提點的東西還是不錯的,可惜無法有更多的互動(因為要趕高鐵)</p></li><li><p>破冰的效果不佳(工程師這群人的破冰難度的確是比一般人高)</p></li><li><p>有些玩過(推測)的人,並沒有將引導新參與者,當然這樣不爆雷也是有好處</p></li><li><p>其實只要透過問問題,可以在不爆雷的情況下讓人思考(也是引導的一種方式)</p></li><li><p>說話和不說話的人太多了,問好問題的人太少了).</p></li><li><p>劇本殺與角色設定薄弱,不過這本來就只是用劇本殺的”皮”在帶敏捷活動</p></li><li><p>不是很是推薦你玩太多次,不過聽說有人玩 15 次,可能遇到很棒的導演</p></li><li><p>玩之前很期待,玩之後覺得不符期待</p></li></ul><p>End 作得不是很好,不如直接來個 Retro ,<br>如果沒有在活動中觸動參與者的內心,結尾很容易變成教條式的宣導,<br>然後還要賽認証機構的工商與贊助場地的招募,7~10點真正有價值的活動可能只有 1.5 小時<br>當然如果有人因此去考証或換工作或許對他們就是有價值的,只是對我來說就不符期待了</p><p>(以下可能含雷,請考慮是否繼續)<br>(以下可能含雷,請考慮是否繼續)<br>(以下可能含雷,請考慮是否繼續)</p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ol><li><p>入場到開場 : 小 delay <del>但是台灣人遲 30 分鐘內不算 ?</del></p></li><li><p>玩家 : 部份玩家應該是有玩過的, 但是沒有什麼引導新手進入遊戲的效果  </p></li><li><p>選角 : 自由選角,因為可以掃 QR Code 看內容, 所以其實可以知道其它角色的人設, 但我個人是盲選</p></li><li><p>破冰 : 有結合後面劇本殺的內容這點不錯,但是效果我覺得沒有很好</p></li><li><p>分組 :</p><ul><li>(我猜測)本來應該是遊戲的一環,但因為砍掉 30 min 所以改用事先分</li><li>印象中職位有:PM、福委、設計、前端、後端、DevOps、測試(有嗎?)</li><li>除了 PM、福委有其目的性以外,其它的職能分配在遊戲中意義不大</li></ul></li><li><p>目的說明 : 呃…只是把投影片唸過一遍, 其實沒能幫助玩家更進入角色與遊戲</p></li><li><p>Yes, &amp; : 有特別說明這件事, 但不知道其用意</p><ul><li>我猜為了避免遊戲中出現 Yes Man 或 No Man)</li><li>實際上進行遊戲中沒有人遵循</li></ul></li><li><p>熱身 : 時間明顯控制不當,後面基本上都講一半就會強制打斷(也許透過資深玩家分小組進行可以縮短時間)</p></li><li><p>開始遊戲 :</p><ul><li>一開始的混亂是一定的</li><li>然後來會有人跳出來領導(不見得是 PM)</li><li>大部份的人只會看</li><li>並沒有因角色的利益衝突演化出有趣的劇情/對話</li></ul></li><li><p>結尾</p><ul><li>由主持人作 Ending 不如讓台下發表他們的覺察  </li><li>遊戲的目標其實沒有什麼難度(因為都可以靠幻想補足)</li><li>前端、後端、DevOps、設計的職位設計沒什麼用(不確定別場會如何應用?)</li></ul></li></ol><h2 id="檢討"><a href="#檢討" class="headerlink" title="檢討"></a>檢討</h2><p><del>社群的活動品質逐年下滑早有所聞,但那我就作個個人記錄吧</del><br>這活動是我覺得有點可惜, 希望下次能更好.<br>如果是我會怎麼作?  </p><ul><li>我會在公司或朋友圈先試行</li><li>我會專注在劇情的發展過程(或是提醒演員「你在演戲」)</li><li>我不用那個破冰方式讓遊戲內容細節化</li><li>我會作問卷回收回饋  </li><li>掌控時間</li><li>儘量確保參與者有進入狀況</li></ul><p>至於我個人</p><ul><li>不要看到標題就急著報名</li><li>事前也可許可以 Google 一下</li><li>想像一下自已是導演的話應該怎麼辦</li><li>多參與不同的對話</li><li>確保時間、場地以及內容的完整性</li></ul><h2 id="中國社群的心得"><a href="#中國社群的心得" class="headerlink" title="中國社群的心得"></a>中國社群的心得</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/355296570">人生如戏,戏如人生——敏捷剧本杀玩后感</a></li><li><a href="https://www.jianshu.com/p/496d5e81de50">敏捷剧本杀活动心得</a></li></ul><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.sohu.com/a/356976954_779078">“敏捷剧本杀”是怎样炼成的</a>)</li><li><a href="https://zhuanlan.zhihu.com/p/105128687">剧本杀主持人（组织者/DM）怎么提高玩家体验感</a></li><li><a href="https://blog.cleancoder.com/uncle-bob/2018/08/28/CraftsmanshipMovement.html">The Tragedy of Craftsmanship.</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzU1MTkyNDU4MA%3D%3D&mid=2247484055&idx=1&sn=cb67435affd1bd245cf4ed961ab21d5a">僵尸Scrum？都是因为缺少TDD</a></li><li><a href="https://ronjeffries.com/articles/020-01ff/down-on-scrum/">Down on Scrum</a></li><li><a href="https://mp.weixin.qq.com/s/Ieuis2ecUm4RE4WpvW3rcA">对不起SCRUM,你可能已经Game Over了!</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://agilecommtw.kktix.cc/events/agilescriptplay00
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[實作筆記] 簡單工廠與工廠方法</title>
    <link href="https://blog.marsen.me/2021/04/13/2021/simplefactory_and_factory_method/"/>
    <id>https://blog.marsen.me/2021/04/13/2021/simplefactory_and_factory_method/</id>
    <published>2021-04-13T08:55:49.000Z</published>
    <updated>2021-04-17T02:44:50.639Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>最近被要求介紹一下 Factory Method 這個 Design Pattern，<br>以前看大話設計模式的時候，這個 Pattern 總會跟 Simple Factory 一起講.<br>有了一些工作經驗後，現在回頭來重新看這兩個模式.</p><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>我們為什麼需這個模式 ? 我們面臨什麼樣子的問題 ?<br>參考以下程式:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Email</span>:<span class="title">INotification</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Send</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line"><span class="function"></span>    &#123;</span><br><span class="line">        <span class="comment"><span class="doctag">///</span>/Send Mail</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先說明一下這個程式，<br>在整個系統中依據不同情況中，會發送不同的通知，<br>比如說:電子郵件(Email)、語音電話(Voice Call)或通訊軟體(Slack)等…</p><p>所以我們實際使用的場景可能如下:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProcessNotifyCustomerService</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> notify = <span class="keyword">new</span> Email();</span><br><span class="line">    notify.<span class="keyword">from</span> = <span class="string">&quot;system@mail.com&quot;</span>;</span><br><span class="line">    notify.to = <span class="string">&quot;customerService@mail.com&quot;</span>;</span><br><span class="line"></span><br><span class="line">    notify.Send(msg);</span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/ ....</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProcessNotifyDevOps</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> notify = <span class="keyword">new</span> Email();</span><br><span class="line">    notify.<span class="keyword">from</span> = <span class="string">&quot;system@mail.com&quot;</span>;</span><br><span class="line">    notify.to = <span class="string">&quot;devOps@mail.com&quot;</span>;</span><br><span class="line"></span><br><span class="line">    notify.Send(msg);</span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/ ....</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProcessNotifyManager</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> notify = <span class="keyword">new</span> VoiceCall();</span><br><span class="line">    notify.server = <span class="string">&quot;voiceCall.server&quot;</span>;</span><br><span class="line">    notify.port = <span class="string">&quot;9527&quot;</span>;</span><br><span class="line"></span><br><span class="line">    notify.Send(msg);</span><br><span class="line">    <span class="comment"><span class="doctag">///</span>/ ....</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"><span class="doctag">///</span>/ more ...</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>以上面的例子來說明一下簡單工廠想解決的問題:<br>當我們在整個系統中使用不同的 Notification 時,<br>我們建立整個物件的細節都在 Client 端之中,<br>這是非常擾人的, 特別當你要建立個複雜的物件,<br>你肯定不會希望每次都要重來一遍.<br>第一個想法就是把細節封裝起來,如下:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EmailFactory</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Email <span class="title">Create</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Email notify = <span class="keyword">new</span> Email();</span><br><span class="line">        notify.<span class="keyword">from</span> = <span class="string">&quot;system@mail.com&quot;</span>;</span><br><span class="line">        notify.to = <span class="string">&quot;devOps@mail.com&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> Email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再進一步, 當我們有相同的行為時也可以封裝到簡單工廠之中,<br>在我們的例子中, 我們可以把 Email 與 VoiceCall 放在同一個工廠裡面<br>在這裡我們命名為 <code>NotifyFactory</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NotifyFactory</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> INotification <span class="title">Create</span>(<span class="params"><span class="built_in">string</span> type</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">        INotification notify;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">           <span class="keyword">case</span> <span class="string">&quot;DevOpsEmail&quot;</span>:</span><br><span class="line">              notify = <span class="keyword">new</span> Email();</span><br><span class="line">              notify.<span class="keyword">from</span> = <span class="string">&quot;system@mail.com&quot;</span>;</span><br><span class="line">              notify.to = <span class="string">&quot;devOps@mail.com&quot;</span>;</span><br><span class="line">              <span class="keyword">return</span> notify;</span><br><span class="line">    </span><br><span class="line">           <span class="keyword">case</span> <span class="string">&quot;CustomerServiceEmail&quot;</span>:</span><br><span class="line">              notify = <span class="keyword">new</span> Email();</span><br><span class="line">              notify.<span class="keyword">from</span> = <span class="string">&quot;system@mail.com&quot;</span>;</span><br><span class="line">              notify.to = <span class="string">&quot;customerService@mail.com&quot;</span>;</span><br><span class="line">              <span class="keyword">return</span> notify;</span><br><span class="line">    </span><br><span class="line">           <span class="keyword">case</span> <span class="string">&quot;VoiceCall&quot;</span>:</span><br><span class="line">              notify = <span class="keyword">new</span> VoiceCall();</span><br><span class="line">              notify.server = <span class="string">&quot;voiceCall.server&quot;</span>;</span><br><span class="line">              notify.port = <span class="string">&quot;9527&quot;</span>;</span><br><span class="line">              <span class="keyword">return</span> notify;</span><br><span class="line">  </span><br><span class="line">           <span class="literal">default</span>:</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;不支援該操作&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>簡單工廠的好處在於，<br>當你想改變某一個功能時你只需要修改一個點，<br>而且你在改動的過程入無需再次涉入建構的細節</p><p>比如說:發信通知改為播打語音電話</p><p><img src="https://i.imgur.com/dRcWMPq.jpg" alt="只需要修改Client，無需處理建構細節"></p><p>而另一個好處是，如果在建立物件的細節有所調整的話，<br>可以只要在一處就完成所有修正.</p><p>比如說: Email Notify 更換為客服的信箱</p><p><img src="https://i.imgur.com/LQIRpPQ.jpg" alt="只需要改一個地方，就完成所有的修正"></p><h2 id="工廠方法"><a href="#工廠方法" class="headerlink" title="工廠方法"></a>工廠方法</h2><p>當我們需要加入(擴展)新的商業邏輯，會修改到不止一個地方<br>舉例來說:<br>我要加入一種新的通知叫飛鴿傳書(PigeonNotify)好了，<br>除了修改 Client 端使用工廠建立新的 notify 外，<br>也要在簡單工廠裡面修改。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EmailFactory</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Email <span class="title">Create</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        Email notify = <span class="keyword">new</span> Email();</span><br><span class="line">        notify.<span class="keyword">from</span> = <span class="string">&quot;system@mail.com&quot;</span>;</span><br><span class="line">        notify.to = <span class="string">&quot;devOps@mail.com&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> Email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再進一步, 當我們有相同的行為時也可以封裝到簡單工廠之中,<br>在我們的例子中, 我們可以把 Email 與 VoiceCall 放在同一個工廠裡面<br>在這裡我們命名為 <code>NotifyFactory</code></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NotifyFactory</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> INotification <span class="title">Create</span>(<span class="params"><span class="built_in">string</span> type</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">        INotification notify;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">           <span class="comment"><span class="doctag">///</span>/ 中間省略</span></span><br><span class="line">           <span class="keyword">case</span> <span class="string">&quot;Pigeon&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> PigeonNotify();</span><br><span class="line">           <span class="literal">default</span>:</span><br><span class="line">              <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">&quot;不支援該操作&quot;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/uIAAcNL.jpg" alt="面對功能的擴展，也需要修改工廠的邏輯"></p><p>簡單工廠中的 Switch 會與參數耦合，<br>每次加入一個新的 Notify 都會異動，<br>這違反<strong>開放封閉原則</strong>.<br>改用工廠方法, 我們只需要新增一個新的工廠方法,<br>並在 Client 呼叫使用工廠, 不再傳遞任何參數.  </p><p><img src="https://i.imgur.com/FoMuHwG.jpg" alt="Client 相依於工廠介面上，需要呼叫指定工廠取得物件"></p><h2 id="TDD-to-Simple-Factory"><a href="#TDD-to-Simple-Factory" class="headerlink" title="TDD to Simple Factory"></a>TDD to Simple Factory</h2><p>目的，透過 TDD 建立出不同的通知(Notification)類別，<br>再透過 TDD 趨動簡單工廠，再透過重構改變為工廠方法。</p><ol><li><p>利用測試作為 Client 寫出測試案例</p></li><li><p>測試案例先簡單使用 <code>new</code> 通過測試</p><ul><li><p>因為是概念性的測試，所以會缺乏實作細節，實務上可能會不只有 <code>new</code>  </p><p>到這一步只是一般建立物件，<br>下一步開始是趨動成為簡單工廠，<br>但實際上你是可以跳過簡單工廠，直接 TDD 出工廠方法的  </p></li></ul></li><li><p>再寫一個測試案例，來製造(Notify)功能的重複(Email、SNS)</p></li><li><p>功能重複讓我們可以抽出介面</p></li><li><p>建立簡單工廠使用邏輯分支回傳不同的(Notify)功能實作</p></li><li><p>在簡單工廠的邏輯分支使用不同工廠方法實作</p><ul><li><p>因為封裝了實作細節，方法簽章應該不需要任何參數，回傳值應該為 <code>void</code></p><p>下一步開始趨動成為工廠方法</p></li></ul></li><li><p>讓 Client 端直接呼叫不同的工廠</p><ul><li>簡單工廠類別就會變成多餘無用的類別 </li></ul></li><li><p>因為有相同的方法簽章，所以可以抽出工廠介面</p></li><li><p>讓 Client 端相依工廠介面</p></li></ol><p>可以參考以下<a href="https://github.com/marsen/Marsen.NetCore.Dojo/pull/33/commits">我的 commit</a> 順序:</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.it145.com/9/55827.html">一篇搞定工廠模式【簡單工廠、工廠方法模式、抽象工廠模式】</a></li><li><a href="https://refactoring.guru/design-patterns/factory-method">Factory Method</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;最近被要求介紹一下 Factory Method 這個 Design Pattern，&lt;br&gt;以前看大話設計模式的時候，這個
      
    
    </summary>
    
    
    
      <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記] 怎麼建立一個網站？(五) - Hexo 的 404 頁面</title>
    <link href="https://blog.marsen.me/2021/04/06/2021/create_404/"/>
    <id>https://blog.marsen.me/2021/04/06/2021/create_404/</id>
    <published>2021-04-06T01:49:12.000Z</published>
    <updated>2021-04-17T02:44:50.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="What"><a href="#What" class="headerlink" title="What"></a>What</h2><p>什麼是 404 頁面呢 ?<br>其實這是一個 HTTP 狀態碼，代表「網頁不存在」,<br>與另外一種常見錯誤代碼(500/503)，代表的意義並不相同,<br>500/503 通常是指服務整個掛了,<br>而 404 是指所要的資源(頁面、檔案、圖片)並不存在.  </p><p>以下提供一些常見的狀態碼與代表意義</p><ul><li>200 OK</li><li>403 Forbidden</li><li>500 Internal Server Error</li><li>503 Service Unavailable</li></ul><h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>為什麼我們需要一個 404 頁面呢 ?<br>我直接引述</p><blockquote><p>當使用者不小心進入你某些不存在或者有錯誤的頁面，就會跳出這個 404 頁面，(中略…)<br>而這個頁面最大的用途在於增加使用者體驗，例如畫面上會有 Logo or 返回首頁按鈕，確保使用者不會因為看到這個頁面立刻關閉。<br>(中略…)<br>搜尋引擎也會依照你是否有這個當作一個加分評比 (中略…)</p></blockquote><h2 id="How"><a href="#How" class="headerlink" title="How"></a>How</h2><p>首先執行 <code>hexo new page 404</code> , 這是 Hexo 用來建立新頁面的語法,<br>上述的語法執行後, 會產生一個 404.md 檔, 如果你不喜歡這個檔名你也可以換掉,<br>ex: <code>hexo new page page_not_found</code></p><p>產生的頁面如下:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: page_not_found</span><br><span class="line">date: 2021-04-06 10:36:15</span><br><span class="line">---</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>這個時候我們需要調整一個重要屬性 <code>permalink: /404.html</code>,<br>這樣當 Github Page 找不到頁面時,<br>才會出現我們設定的 404 頁面.  </p><p>另外我們可以設定 <code>layout:true</code> 的布林值來決定是否套用原本的樣式(預設為 true),<br>這個主要也是為了讓使用者”感覺”他仍然在同一個網站之中,<br>而減低跳轉率.  </p><p>下面可以使用 markdown 語法編輯</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-custom-404-page-for-your-github-pages-site">Creating a custom 404 page for your GitHub Pages site</a></li><li><a href="https://hsiangfeng.github.io/hexo/20201006/174392200/">試著學 Hexo - SEO 篇 - 新增你的 404 頁面</a></li><li><a href="https://tools.ietf.org/html/rfc7231#section-6.5.4">RFC 7231</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;What&quot;&gt;&lt;a href=&quot;#What&quot; class=&quot;headerlink&quot; title=&quot;What&quot;&gt;&lt;/a&gt;What&lt;/h2&gt;&lt;p&gt;什麼是 404 頁面呢 ?&lt;br&gt;其實這是一個 HTTP 狀態碼，代表「網頁不存在」,&lt;br&gt;與另外一種常見錯誤代碼(500
      
    
    </summary>
    
    
    
      <category term="實作筆記" scheme="https://blog.marsen.me/tags/%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>[生活筆記] 將來銀行與純網銀一些有的沒的</title>
    <link href="https://blog.marsen.me/2021/03/22/2021/next_bank_update/"/>
    <id>https://blog.marsen.me/2021/03/22/2021/next_bank_update/</id>
    <published>2021-03-22T07:46:38.000Z</published>
    <updated>2021-04-17T02:44:50.639Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://www.nextbank.com.tw/images/img-logos_02.webp" alt="Next Bank"></p><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>將來銀行是台灣三大純網銀(Line、樂天)中,<br>官股成份最重的一間, 也因此備受各界期待.<br>2019 起成立籌備處, 大舉徵才…預計 2021 取得營業執照…<br>2020 年 12 月<a href="https://finance.technews.tw/2020/12/09/rakuten-bank-obtain-a-business-license-to-officially-operate/">樂天取得營業執照</a>,<br>2021 年 2 月<a href="https://ctee.com.tw/news/finance/414166.html">LINE BANK取得營業執照</a></p><h2 id="一些爭議"><a href="#一些爭議" class="headerlink" title="一些爭議"></a>一些爭議</h2><h3 id="取得執照"><a href="#取得執照" class="headerlink" title="取得執照"></a>取得執照</h3><p>2019 金管會審核三家純網銀皆取得執照後，<br>中時的報導，「國家隊吊車尾上榜 「將來」銀行真有將來？」<br>經濟日報的平衡報導 「純網銀審查幕後 將來銀行不是最後一名 」<br>是不是有點欲蓋彌彰 ? 相關報導只剩 <a href="https://pttcareers.com/Finance/1TIHhlWc">PTT 的留存</a></p><h3 id="人事"><a href="#人事" class="headerlink" title="人事"></a>人事</h3><p>總經理劉奕成，號稱金融界<strong>跳跳虎(求出處，意指常轉換工作)</strong><br>2018 <a href="https://www.bnext.com.tw/article/51037/ic-liu-resign-from-line-financial-taiwan">LINE拚純網銀陣前換將，劉奕成確認離職，陳立人暫代</a>,<br>2019 加入將來銀行籌備處，同年被爆<a href="https://ec.ltn.com.tw/article/breakingnews/2898753">高層團隊領高薪</a>,<br>2021 年 3 月離職. <a href="https://www.facebook.com/icheng.liu/posts/10223510081007502">22日臉書首次公開貼文</a>,<br>內文包含目前狀況</p><ul><li>資訊系統不穩定  </li><li>只有一半不到的人有金融背景</li><li>資訊人員不會寫程式  </li></ul><h3 id="性騷擾的事件"><a href="#性騷擾的事件" class="headerlink" title="性騷擾的事件"></a>性騷擾的事件</h3><p><a href="https://tw.news.yahoo.com/news/%E5%B0%87%E4%BE%86%E9%8A%80%E8%A1%8C%E7%88%86%E6%80%A7%E9%A8%B7%E6%A1%88%E8%99%95%E7%90%86%E4%B8%8D%E7%95%B6-%E5%A5%B3%E7%B6%93%E7%90%86%E6%82%A3%E6%86%82%E9%AC%B1%E7%97%87%E8%A2%AB%E9%9B%A2%E8%81%B7-%E7%9E%8E%E4%BA%8B%E5%A4%9A1-033204011.html">將來銀行爆性騷案處理不當　女經理患憂鬱症被離職【瞎事多1】</a></p><h2 id="一些人看法"><a href="#一些人看法" class="headerlink" title="一些人看法"></a>一些人看法</h2><h3 id="金管會主委黃天牧"><a href="#金管會主委黃天牧" class="headerlink" title="金管會主委黃天牧"></a>金管會主委黃天牧</h3><p><a href="https://ctee.com.tw/news/policy/433346.html">將來銀行想要將來 有 3 點需讓金管會滿意</a></p><ul><li>營運制度的改善情況</li><li>人事安排</li><li>??</li></ul><h3 id="臉書一些回應"><a href="#臉書一些回應" class="headerlink" title="臉書一些回應"></a>臉書一些回應</h3><p><a href="https://www.facebook.com/groups/rayforum/permalink/3799532576793539">雷神講堂</a>  </p><blockquote><p>將來銀行的徵才資訊中, 針對「資安維運中心工程師 SOC Engineer」的工作內容,<br>起薪僅25K至65K，且須配合輪夜班……</p></blockquote><p>C 君</p><blockquote><p>突然懂了什麼 #領7000萬的靠背2萬5不懂開發</p></blockquote><p>R 君</p><blockquote><p>不懂 Domain Knowhow 的話 JD 不要亂寫，<br>寫一堆又給不起。</p></blockquote><p><a href="https://www.facebook.com/search/posts/?q=%E5%B0%87%E4%BE%86%E9%8A%80%E8%A1%8C">更多…</a></p><h2 id="我的看法"><a href="#我的看法" class="headerlink" title="我的看法"></a>我的看法</h2><p>首先我覺得將來銀行的受到的鎂光燈好像比 Line 與樂天還多,<br>當然也可能是我的同溫層太厚的關係.<br>另外在將來銀行的官網或臉書上, 我找不到正式的公關回應.<br>所以不太確定新聞提到的<strong>將來銀行的回應</strong>是出自何處?<br>總之目前還有點渾濁, 我覺得要讓子彈再飛一會兒.  </p><p>相比而言 Line 與樂天的新聞就少很多,<br>一路看下來我覺得比較像是一場只發生在將來銀行的媒體/行銷戰,<br>就我而言<a href="https://www.nextbank.com.tw/">將來銀行的 Logo</a> 或是營銷手段是迎合年輕人的,<br>但是我不了解的是，一個美美的官網或臉書你只用來介紹 Logo 的設計理念跟找網紅拍小短片 ?<br>撰寫本篇 Blog 時的臉書最後一篇文章是在跟風鮭魚時事哏,<br>而不對一些傳媒的新聞作出回應 ? (可能是我看漏，有人可以提供給我的話十分感謝)<br>有種「行銷成功卻公關完敗」的感覺.</p><p>想說說開發相關的問題, 但覺得人事可能也是一個大問題,<br>先說基層吧，將銀明顯是需要即戰力的，<br>但就我的面試經驗而言, 技術主管連使用什麼技術作為基本的架構將銀都無法決定,<br>在招募上是說你會什麼都可以, 但是你總得要團隊作戰,<br>你的團隊要用什麼戰鬥方式會影響你的戰術, 怎麼可以不確定呢 ?<br>招募進來的人員不會寫程式, 那招募者是不是有問題呢 ?<br>開發的產品有問題, 但總之金管會至少是有個產品可以被審核,<br>如果以劉奕成所言, 相比其它兩家, <a href="https://tw.appledaily.com/property/20210322/ZSXT3D6IL5FMRD7TCQG3GRQHJQ/">將銀少了 10~15 月籌備時間</a>,<br>那可以等待一段時間後再作評論, 只是以市場的角度來說算是失了先機;<br>開發人員一半非金融背景, 這是<a href="https://buzzorange.com/techorange/2020/08/28/online-bank-needs-new-prefessional/">也是當初籌備招募的亮</a>,<br>如果沒有好好整合, 甚至在團隊分派系才是糟糕的<br>現在有點以成敗論英雄.<br>再來,將銀在短短的 2 年招募了 300 人, 雖說不能確定是否有達到這計劃的人數,<br>即使只有一半 150 人也是碰到了<a href="https://zh.wikipedia.org/zh-tw/%E9%82%93%E5%B7%B4%E6%95%B0">鄧巴數</a>,<br>這肯定會有相當的衝突.<br>有人的地方就有江湖, 這裡還是讓子彈繼續飛吧.</p><p>「敏捷」不 ? 我反而覺得是個假議題, 特別是在籌備了這麼久後的現在,  </p><blockquote><p>金融背景的人，會認為系統必須內部確認 100% 沒有問題，<br>再請金管會來審查，但是部分資訊部門的人卻認為，<br>就算有一些 Bug，也沒什麼關係，事後再來修改就好了。 — &lt;&lt;數位時代&gt;&gt;</p></blockquote><p>上述這段話是來自數位時代的新聞, 也是敏捷圈最多引用一段話,<br>但這些<strong>自稱敏捷</strong>的人會露出一種「笑他的迂」的態度,覺得金融背景不懂<strong>敏捷</strong> ?<br>這個態度讓我覺得十分荒謬.<br>我僅以下四點作為回應:</p><ul><li>個人與互動重於流程與工具  </li><li>可用的軟體重於詳盡的文件  </li><li>與客戶合作重於合約協商  </li><li>回應變化重於遵循計劃  </li></ul><p>其實將銀在招募的過程說過因為沒包伏, 所以可以建立更敏捷的文化.<br>但如果新聞內容為真, 與其說金融背景的人不懂敏捷,<br>不如說這些當初號稱敏捷進入將銀的人, 並沒有成功的建立真正的敏捷文化.<br>將內部 100% 確認轉化成有明確事項的 PBI ，迭代執行檢驗，<br>隨這一年</p><p>金管會的回應中規中矩, 就不予置評了.</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.bnext.com.tw/article/61864/nextbank-icliu">App有上百個bug、IT不會寫程式！將來銀行劉奕成被臨陣換將，背後原因大解密</a></li><li><a href="https://www.storm.mg/article/1675977">媒體爆將來銀行料是衝著劉奕成？</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://www.nextbank.com.tw/images/img-logos_02.webp&quot; alt=&quot;Next Bank&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[A 社筆記] Sudo 與環境變數</title>
    <link href="https://blog.marsen.me/2021/03/17/2021/sudo_E/"/>
    <id>https://blog.marsen.me/2021/03/17/2021/sudo_E/</id>
    <published>2021-03-17T06:07:29.000Z</published>
    <updated>2021-04-17T02:44:50.639Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>使用 Azure 的 pipeline 對專案進行 CI/CD，<br>在某一段執行語法中，因權限不足無法建立必要的資料夾，<br>而導致部署失敗。<br>有兩個思路，一個是讓現有的使用者擁有建立資料夾的權限，<br>另一個想法比較單純，使用 <code>sudo</code> 提供足夠的權限給 CI/CD 的執行者。</p><h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>但是 <code>sudo</code> 引發了另一個問題，<br>設定在 pipeline 的環境變數消失了，<br>原因是當我們在使用 <code>sudo</code> 的時候，會影響到環境變數。<br>這個時候需要參考 <code>/etc/sudoers</code> 的設定</p><h3 id="env-reset"><a href="#env-reset" class="headerlink" title="env_reset"></a>env_reset</h3><ul><li>env_check # 當變數含有不安全字元 <code>%</code> 或 <code>/</code> 會被移除</li><li>env_keep # 當 env_reset 為 enable 時要保留的一系列環境變數。</li><li>env_delete # 當 env_reset 為 enable 時要移除的一系列環境變數。</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">env_reset   If set, sudo will reset the environment to only contain</span><br><span class="line">            the LOGNAME, SHELL, USER, USERNAME and the SUDO_*</span><br><span class="line">            variables.  Any variables in the caller’s environment</span><br><span class="line">            that match the `env_keep` and `env_check` lists are then</span><br><span class="line">            added.  The default contents of the `env_keep` and</span><br><span class="line">            `env_check` lists are displayed when sudo is run by root</span><br><span class="line">            with the -V option.  If the secure_path option is set,</span><br><span class="line">            its value will be used for the PATH environment</span><br><span class="line">            variable.  This flag is on by default.</span><br></pre></td></tr></table></figure><h2 id="解決方法"><a href="#解決方法" class="headerlink" title="解決方法"></a>解決方法</h2><p>最簡單的方法加上<code>-E</code>, 將 User 的環境變數先載入</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">The -E (preserve environment) option indicates to the security policy </span><br><span class="line">that the user wishes to preserve their existing environment variables. </span><br><span class="line">The security policy may return an error if the -E option is specified </span><br><span class="line">and the user does not have permission to preserve the environment.</span><br></pre></td></tr></table></figure><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.puritys.me/docs-blog/article-392-sudo-%E9%80%A0%E6%88%90%E7%92%B0%E5%A2%83%E8%AE%8A%E6%95%B8%E6%B6%88%E5%A4%B1-:-sudo--E.html">sudo 造成環境變數消失 : sudo -E</a></li><li><a href="https://superuser.com/questions/232231/how-do-i-make-sudo-preserve-my-environment-variables">How do I make sudo preserve my environment variables?</a></li><li><a href="https://www.itread01.com/content/1544986744.html">linux中的sudo許可權</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;使用 Azure 的 pipeline 對專案進行 CI/CD，&lt;br&gt;在某一段執行語法中，因權限不足無法建立必要的資料夾，
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[生活筆記] 我對單元測試的想法</title>
    <link href="https://blog.marsen.me/2021/03/02/2021/unittest_mindset_for_me/"/>
    <id>https://blog.marsen.me/2021/03/02/2021/unittest_mindset_for_me/</id>
    <published>2021-03-02T07:29:04.000Z</published>
    <updated>2021-04-17T02:44:50.639Z</updated>
    
    <content type="html"><![CDATA[<h2 id="問題"><a href="#問題" class="headerlink" title="問題"></a>問題</h2><p>你對所謂 “單元” 測試的想法爲何。</p><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>單元測試是一種有效的方法、手段、工具 etc…<br>目的是為了「品質」，從兩個角度來說:</p><ol><li>對客戶來說: 功能符合需求</li><li>*對開發者來說: 好擴充易修改</li></ol><p>額外的好處:</p><ul><li>快速揪錯、快速回饋 : 如果團隊有執行 UT 或是 TDD 的習慣，在開發過程中就可以發現部份的錯誤</li><li>Test Case 就是文件、就是 Use Case</li><li>TDD 要從 UT 開始寫，讓開發者優先考慮與其互動的 Service 或 Module 會怎麼使用這個方法</li><li>UT 是重構的基礎，有了 UT 作保護網，可以大膽重構</li><li>*重構才能往 Design Pattern 的方向走</li></ul><p><img src="https://i.imgur.com/WbIlLiz.jpg" alt="Mindset"></p><p>如上圖，<br>但是我現在卡在 Design 的部份，<br>我可以讓測試趨動「開發」，<br>但是沒有辦法產生良好的設計。</p><p>所以接觸了 DDD (一知半解的狀態)，<br>然後想到以前學過的 Design Pattern ，但是實務上並沒有套用得很靈活，<br>很多時候為了 DP 而 DP, 而重構我可以作到小幅度的重構, 精簡程式碼<br>但是如果要重構成另一個 Pattern 時就又有點卡住了，所以我想我可能沒有掌握住軟體 Design 的技巧</p><!--## 導師 W 回饋你的想法有些問題。1. 最基本的 "單元" 看起來你們並沒有定義出來。2. 測試案例並非單指文件，而是指你轉換爲測試方法那個測試名稱。重點是哪種 "單元" 需構思哪些測試案例，這才是重點3. DP 只是結構設計過程可以應用的 "模式" 。但如果你並不瞭解該設計模式的本意與應用場合，那反而會讓開發更繁雜4. DP 可不是爲了重構，這是兩回事的。感覺上，你現在自學得很雜，但比較流於表面的實作技術。又蠻想應用在開發實務上，但這樣反而會讓系統搞得更複雜。我是建議還是要回到軟體設計的基礎功夫鍛鍊上我覺得可能還是先鎖定在某一個主題上，例如:"單元測試" 或 "重構"，然後端看這個主題所需培養的基礎功夫有哪些。"單元" 指的是以 "類別" 爲單位，並依據該類型來撰寫單元測試程式碼。以你所舉的購物車就是個很好的例子你會把購物車相關的邏輯落實在哪一個類別呢？然後依據購物車的計算邏輯，你會寫各種方法來測試它，這些 "各種方法" 就是測試案例了 (test case)對於結構設計來說，最爲重要的會先界定各種類型的物件。例如 Page (View), UI Controller (Controller), Service, Dao, Entity 等個類型的物件。這些各種類型的物件，正是軟體人員需要爲其測試的 "單元"--><h2 id="反思與小結"><a href="#反思與小結" class="headerlink" title="反思與小結"></a>反思與小結</h2><p>最近參加了 <a href="https://www.tenlong.com.tw/products/9787121224485">Implementing Domain-driven Design</a> 的讀書會，<br>像是導師所說，學習了單元測試與 TDD 後，<br>試著應用在實務上還是有所困難的，<br>所以我刻意建立了一些專案用來學習。  </p><p>Test First 或 TDD 不應該省略設計的部份，<br>Domain-driven <strong>Design</strong> 常被縮寫成 DDD，<br>TDD 則為 Test-Driven <strong>Development</strong>。<br>而當華語文人士整天說著 ATDD、BDD、DDD 與 TDD 時，<br>有注意到這個 D(Design) 不是 D(Development) 嗎 ?  </p><p>進一步來說，TDD 的要求開發之前先寫測試，意味著要先寫測試案例，<br>這個步驟會讓你思考「你要怎麼呼叫你的代碼」，也就是說「你要如何設計的代碼」，  </p><p>接下來，我會用一個購物車的開發作為案例，<br>試著用這個過程找到自已的盲點。<br><img src="/images/2021/unittest_mindset_for_me_sample.jpg" alt="購物車 Sample">  </p><p>購物車的畫面如上，我會使用 C# 的 ASP.NET Core 進行開發，<br>雖然我會延用 ASP.NET 所提供的 MVC 框架，但我也會試著使用 DDD 的概念去設計，<br>我會設計一系列的 Domain Model 並且使用 Domain Service 作為隔離，<br>MVC 的 Controller 我會視為 DDD 的 Application Service，<br>這裡會出現 View Model，不同於 Domain Model，View Model 由 UI 所需要的資料決定。<br>更多的細節會記錄在後續的筆記當中。</p><p><img src="/images/2021/unittest_mindset_for_me_ddd.jpg" alt="DDD">  </p><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;問題&quot;&gt;&lt;a href=&quot;#問題&quot; class=&quot;headerlink&quot; title=&quot;問題&quot;&gt;&lt;/a&gt;問題&lt;/h2&gt;&lt;p&gt;你對所謂 “單元” 測試的想法爲何。&lt;/p&gt;
&lt;h2 id=&quot;想法&quot;&gt;&lt;a href=&quot;#想法&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
    
      <category term="Unit Testing" scheme="https://blog.marsen.me/tags/Unit-Testing/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記] SonarCloud Move analysis to Java 11 更新 Github Action</title>
    <link href="https://blog.marsen.me/2021/02/03/2021/update_sonarcloud_workflow/"/>
    <id>https://blog.marsen.me/2021/02/03/2021/update_sonarcloud_workflow/</id>
    <published>2021-02-02T16:00:00.000Z</published>
    <updated>2021-02-02T17:28:02.320Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>長期使用的 SonarCloud 的 Github Action 突然執行失敗了.<br>原因是 SonarCloud 在 2021 年的 2 月 1 號開始，<a href="https://sonarcloud.io/documentation/appendices/end-of-support/">不再支援使用舊的 Java 版本(1.8.0_282)</a>,<br>至少要更新至 Java 11.<br>錯誤的訊息如下:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">INFO: ------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">The version of Java (1.8.0_282) you have used to run this analysis is deprecated and we stopped accepting it. Please update to at least Java 11.</span><br><span class="line">Temporarily you can set the property &#x27;sonar.scanner.force-deprecated-java-version-grace-period&#x27; to &#x27;true&#x27; to continue using Java 1.8.0_282</span><br><span class="line">This will only work until Mon Feb 15 09:00:00 UTC 2021, afterwards all scans will fail.</span><br><span class="line">You can find more information here: https://sonarcloud.io/documentation/upcoming/</span><br><span class="line"></span><br><span class="line">ERROR: </span><br><span class="line">The SonarScanner did not complete successfully</span><br><span class="line">08:24:36.417  Post-processing failed. Exit code: 1</span><br><span class="line">Error: Process completed with exit code 1.</span><br></pre></td></tr></table></figure><h2 id="調整方法"><a href="#調整方法" class="headerlink" title="調整方法"></a>調整方法</h2><p>移除掉原本的 SonarScanner</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- name: SonarScanner Begin    </span><br><span class="line">  run: dotnet sonarscanner begin /k:&quot;marsen_Marsen.NetCore.Dojo&quot; /o:&quot;marsen-github&quot; /d:&quot;sonar.host.url=https://sonarcloud.io&quot; /d:&quot;sonar.login=&quot;$SONAR_LOGIN</span><br><span class="line">## 中略</span><br><span class="line">- name: SonarScanner End</span><br><span class="line">  run: dotnet sonarscanner end /d:&quot;sonar.login=&quot;$SONAR_LOGIN </span><br></pre></td></tr></table></figure><p>在整個方案的根目錄加上一個檔案<code>sonar-project.properties</code>,</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">sonar.organization=&lt;replace with your SonarCloud organization key&gt;</span><br><span class="line">sonar.projectKey=&lt;replace with the key generated when setting up the project on SonarCloud&gt;</span><br><span class="line"></span><br><span class="line"># relative paths to source directories. More details and properties are described</span><br><span class="line"># in https://sonarcloud.io/documentation/project-administration/narrowing-the-focus/ </span><br><span class="line">sonar.sources=.</span><br></pre></td></tr></table></figure><p><code>sonar.organization</code> 要如何取得呢 ?<br>登入 <a href="https://sonarcloud.io/">SonarCloud</a>, 右上角頭像 &gt; My Organizations 即可查詢到 Organization Key 值。<br><img src="https://i.imgur.com/mIL7Wup.jpg" alt="Organization Key"></p><p>上方 <code>My Projects</code> &gt; <code>Administration</code> &gt; <code>Update Key</code><br>即可查詢到 Project Key 值<br><img src="https://i.imgur.com/Jzb69kE.jpg" alt="Project Key"></p><p>最後在 Github Action Workflow 加上這段，Github Action 就復活啦</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- uses: sonarsource/sonarcloud-github-action@master</span><br><span class="line">  env:</span><br><span class="line">    GITHUB_TOKEN: $&#123;&#123; secrets.GITHUB_TOKEN &#125;&#125;</span><br><span class="line">    SONAR_TOKEN: $&#123;&#123; secrets.SONAR_TOKEN &#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://sonarcloud.io/documentation/appendices/move-analysis-java-11/">Move analysis to Java 11</a></li><li><a href="https://github.com/SonarSource/sonarcloud-github-action">sonarcloud-github-action</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;長期使用的 SonarCloud 的 Github Action 突然執行失敗了.&lt;br&gt;原因是 SonarCloud 在 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[活動筆記] Role Expectations Matrix 角色期望矩陣</title>
    <link href="https://blog.marsen.me/2021/01/22/2021/role-expectations-matrix/"/>
    <id>https://blog.marsen.me/2021/01/22/2021/role-expectations-matrix/</id>
    <published>2021-01-22T08:50:07.000Z</published>
    <updated>2021-02-02T17:18:30.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>自從開始接觸 Scrum 後, <a href="https://www.funretrospectives.com/">Fun Retrospectives</a> 一直是我常常來作為參考的工具網站.<br>在工作上也會實際的運用, 在這裡特別記錄.<br>當然相同的方法在不同團隊使用, 我想會產生不同的效果,<br>所以也許未會有重複的活動也不一定.</p><h2 id="角色期望矩陣"><a href="#角色期望矩陣" class="headerlink" title="角色期望矩陣"></a>角色期望矩陣</h2><p>在 Fun Retrospectives 的分類之中, 是屬於 Team Building 的類型,<br>目的在於揭露團隊成員對不同角色的期望.<br>這個可以協助團隊同步對不同角色與自我角色的認知, 並且避免隱藏與未知的衝突.  </p><p>進行的方式,  </p><ol><li>建立一列(橫軸)寫下所有(團隊中)的角色</li><li>建立一行(直軸)寫下所有(團隊中)的角色</li><li>承上, 畫出一個矩陣</li><li>詢問所有團隊成員, 請他們對所有角色的期望, 並且逐列(橫向貼)到白板之上</li><li>逐行討論所有角色的便利貼, 讓角色理解團隊的期待</li></ol><h2 id="A-社記錄"><a href="#A-社記錄" class="headerlink" title="A 社記錄"></a>A 社記錄</h2><p>我額外作了一件事,<br>就是確定團隊成員中的角色, 主要原因是 A 社的 PO 功能是職責是有殘缺的.<br><img src="/images/2021/role-expectations-matrix-discussion.jpg" alt="討論過程"></p><p>討論的結果如下:</p><h3 id="Dev"><a href="#Dev" class="headerlink" title="Dev"></a>Dev</h3><ul><li>依需求/Spec/DoD 實作</li><li>溝通</li><li>拆分任務</li><li>自我測試/驗收</li><li>重構<ul><li>架構不符需求時</li><li>效能<ul><li>時間</li><li>空間</li><li>開發效能</li></ul></li></ul></li><li>研究</li></ul><h3 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h3><ul><li>測試</li><li>測試計劃<ul><li>環境建立</li><li>寫測試案例</li><li>風險評估</li><li>優先序</li></ul></li><li>自動化測試</li></ul><h3 id="PO"><a href="#PO" class="headerlink" title="PO"></a>PO</h3><ul><li>需求</li><li>設定優先序</li><li>設定 Sprint Goal/Product Goal</li><li>溝通</li><li>評估需求可行性</li></ul><p>這裡有一個討論的觀點, 我覺得值得拿出來討論,<br>在探索的過程中, 有可能有以下幾種狀況</p><ul><li>實際上有解法,有找到:這是最理想,也是最普遍的方案</li><li>實際上沒有解法,証實沒有:確定不可行,其實對產品也是一個重要的資訊,可以節省成本提早作出變化</li><li>實際上有解法,沒有找到:這是最糟的情況</li><li>實際上沒有解法,確說有解決方法:不是大好就是大壞,容我下面解釋</li></ul><p>我原本認為, 如果實際上沒有解法, 卻研究出了解法, 可能是在溝通的過程中可能出現的了認知落差?<br>更嚴重一點, 也許是出現虛偽狡詐的情況. 但是團隊討論時, 出現了一種新的觀點,<br><strong>現在作不到, 不表示未來作不到, 市場也許正好缺乏這個的解決方案.</strong>  </p><p>反思一下,這不正是許多新創在募資時常用的方式,<br>當然不乏惡血、Juicero 或是 Nikola 這一類招謠撞騙的例子,<br>但是我們可以發現投資人其實是會為夢想買單的.<br>而要實現理論上可行, 但現實尚未成功或商品化的功能,往往是很燒錢的事.<br>新創產業正式將夢想與資金作結合, 而敏捷開發能加速我們探索未知.  </p><p>有關於 PO 的探索, 會跑在 Dev 之前, 其中有一個很重要的目的是要提高 Dev 的勝率<br>排除「實際上沒有解法」或是「沒有市場價值的方案」是 PO 在探索重點方向.  </p><p><img src="/images/2021/role-expectations-matrix-result.jpg" alt="討論結果"></p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.funretrospectives.com/role-expectations-matrix/">Role Expectations Matrix</a></li><li><a href="https://technews.tw/2020/12/01/nikola-has-a-dream-of-fraud-gm-cancels-its-shareholding-plan/">Nikola 詐欺纏身夢一場，通用汽車宣布取消持股</a></li><li><a href="https://www.books.com.tw/products/F014238118">惡血:矽谷獨角獸的醫療騙局</a></li><li><a href="https://meet.bnext.com.tw/articles/view/40528">靠一台果汁機騙數億美金！美國科技新創怎麼呼嚨人的？</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;自從開始接觸 Scrum 後, &lt;a href=&quot;https://www.funretrospectives.com/&quot;&gt;F
      
    
    </summary>
    
    
    
      <category term="Agile" scheme="https://blog.marsen.me/tags/Agile/"/>
    
  </entry>
  
  <entry>
    <title>[實作筆記] Storybook CI 使用 Github Actions</title>
    <link href="https://blog.marsen.me/2021/01/19/2021/storybook_with_github_actions/"/>
    <id>https://blog.marsen.me/2021/01/19/2021/storybook_with_github_actions/</id>
    <published>2021-01-18T16:00:00.000Z</published>
    <updated>2021-01-23T16:41:13.753Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>在<a href="https://blog.marsen.me/2021/01/18/2021/storybook_typescript/">前一篇</a>文章中，<br>我們使用 TypeScript 開發 React Components ，<br>並使用 Storybook 作為測試的工具。</p><p>這篇會介紹如何與 chromatic 作結合，讓 CI/CD 運行時(本文將使用 Github Actions 作為 CI Server)，<br>自動部署到 chromatic，同時提供自動化測試與人工審核的功能。</p><h2 id="環境設置"><a href="#環境設置" class="headerlink" title="環境設置"></a>環境設置</h2><p>使用 Github 登入 <a href="https://www.chromatic.com/">Chromatic</a>,<br>雖然 Chromatic 也有提供 Bitbucket 與 GitLab 的登入方式,<br>但並不確定這些 CI Server 包含 Jenkins、TravisCI 或是 CircleCI 實際上怎麼結合 Storybook,<br>以下都以 Github 作介紹,</p><h3 id="本機環境"><a href="#本機環境" class="headerlink" title="本機環境"></a>本機環境</h3><p>安裝 <code>chromatic</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D chromatic</span><br></pre></td></tr></table></figure><p>發佈 Storybook 到 Chromatic 上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn chromatic --project-token&#x3D;&lt;project-token&gt;</span><br></pre></td></tr></table></figure><p>發佈完成你可以得到一個網址 <code>https://www.chromatic.com/builds?appId=random</code><br>你可以分享網址給同事，對 UI 進行審查.<br>讓 Pull Request 時，自動執行的設定</p><h3 id="雲端設定"><a href="#雲端設定" class="headerlink" title="雲端設定"></a>雲端設定</h3><p>新增專案後,可以取得 Token</p><p><img src="/images/2021/chromatic_add_project.jpg" alt="新增 Project"><br><img src="/images/2021/chromatic_get_token.jpg" alt="取得 Token"></p><p>在專案中設定 yaml 檔(Github Actions)<br>加上 <code>.github/workflows/chromatic.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .github/workflows/chromatic.yml</span></span><br><span class="line"><span class="comment"># name of our action</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">&#x27;Chromatic Deployment&#x27;</span></span><br><span class="line"><span class="comment"># the event that will trigger the action</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="comment"># Trigger the workflow on push or pull request,</span></span><br><span class="line">  <span class="comment"># but only for the main branch</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line"><span class="comment"># what the action will do</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">test:</span></span><br><span class="line">    <span class="comment"># the operating system it will run on</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="comment"># the list of steps that the action will go through</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">cd</span> <span class="string">src/marsen.react</span> <span class="string">&amp;&amp;</span> <span class="string">yarn</span> <span class="string">&amp;&amp;</span> <span class="string">yarn</span> <span class="string">build</span> <span class="string">&amp;&amp;</span> <span class="string">yarn</span> <span class="string">build-storybook</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">chromaui/action@v1</span></span><br><span class="line">        <span class="attr">with:</span>          </span><br><span class="line">          <span class="attr">projectToken:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CHROMATIC_PROJECT_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.GITHUB_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">storybookBuildDir:</span> <span class="string">storybook-static</span></span><br></pre></td></tr></table></figure><h3 id="特殊設定，子專案"><a href="#特殊設定，子專案" class="headerlink" title="特殊設定，子專案"></a>特殊設定，子專案</h3><p>如何你和我一樣, 專案是由多個子專案組成,<br>那麼預設的 yaml 設定可能就不適合你.<br>可以參考這個 <a href="https://github.com/chromaui/chromatic-cli/issues/197">issue</a>,<br>其中要特別感謝 <a href="https://github.com/yigityuce">yigityuce</a> 的 solution,<br>我特別 fork 到我的 Github 帳號底下 <a href="https://github.com/marsen/chromatic-cli">Repo</a><br>設定調整如下:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 上略</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">run:</span> <span class="string">cd</span> <span class="string">src/marsen.react</span> <span class="string">&amp;&amp;</span> <span class="string">yarn</span> <span class="string">&amp;&amp;</span> <span class="string">yarn</span> <span class="string">build</span> <span class="string">&amp;&amp;</span> <span class="string">yarn</span> <span class="string">build-storybook</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">marsen/chromatic-cli@v1</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">workingDir:</span> <span class="string">./src/marsen.react</span></span><br><span class="line">          <span class="attr">projectToken:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.CHROMATIC_PROJECT_TOKEN</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="comment"># 下略          </span></span><br></pre></td></tr></table></figure><h3 id="驗收"><a href="#驗收" class="headerlink" title="驗收"></a>驗收</h3><p>如下圖, 左方會顯示舊版的 UI 畫面, 右方會顯示新版的 UI 畫面,<br>如果開啟 Diff 功能(右上角的眼鏡圖示),<br>即可以進行差異比對, 有差異的地方將以亮綠色顯示,<br>如果認同這次的變更, 選擇右上角的 Accept 反之, 選擇 Deny.<br><img src="/images/2021/chromatic_acceptance.jpg" alt="驗收"></p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.chromatic.com/">Chromatic</a></li><li><a href="https://www.learnstorybook.com/intro-to-storybook/react/en/deploy/">部署</a></li><li><a href="https://ithelp.ithome.com.tw/articles/10252055">玩轉 Storybook: Day 27 Design System for Developers - Review、Test</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;在&lt;a href=&quot;https://blog.marsen.me/2021/01/18/2021/storybook_typ
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[實作筆記] React 與 Storybook 開發</title>
    <link href="https://blog.marsen.me/2021/01/18/2021/storybook_typescript/"/>
    <id>https://blog.marsen.me/2021/01/18/2021/storybook_typescript/</id>
    <published>2021-01-18T08:01:35.000Z</published>
    <updated>2021-01-23T16:41:13.752Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>不論是 App 或是 Web, 與使用者第一線互動的就是 UI 了。<br>另一面在需求設計上, 我們總會想像一個畫面，<br>想像著使用者如何使用我們的產品，<br>也就是說 UI 是理想與真實的邊界。  </p><p>Designer 完成了設計, Engineer 將之實作出來,<br>主流的開發方式會透過 Component 來節省時間。  </p><h2 id="為什麼我們需要-Storybook"><a href="#為什麼我們需要-Storybook" class="headerlink" title="為什麼我們需要 Storybook ?"></a>為什麼我們需要 Storybook ?</h2><p>但是真的能節省時間嗎 ?  </p><p>開發人員彼此之間會不會重複造輪子? 他們又要怎麼溝通?<br>修改到底層元件會不會影響到上層元件? 會不會改 A 壞 B?<br>複雜的 Component, 特殊的情境如何測試 ?  </p><p>Storybook 恰恰能解決這些問題,  </p><ul><li>作為開發人員的指南和文件</li><li>獨立於應用程式建立 Component</li><li>測試特殊情境</li></ul><p>對我來說，最重要的事，我可以用類似 TDD 的方式開發,<br>在 Storybook 的官方文件提到這個方法為 CDD.<br>在 TDD 中我們把一個個 Use Case 寫成 Test Case,<br>我們可以挪用這個觀念,<br>在 Storybook 中把每一個 Component 的各種狀態(State),<br>當作 Use Case, 然後透過 Mock State 讓 Component 呈現該有的樣貌。</p><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><p>大前端的時代，僅僅只看 Web 的話，<br>我認為這個時代前端的重心就在兩個主要的技術之上，<br>Component 與 State Management。<br>而實作你可以有以下的選擇,<br>僅介紹我聽過的主流 Library,<br>Component 與 State Management 沒有絕對的搭配關係。</p><table><thead><tr><th>Component</th><th>State Management</th></tr></thead><tbody><tr><td><a href="https://reactjs.org/">React</a></td><td><a href="https://facebook.github.io/flux/">Flux</a></td></tr><tr><td><a href="https://angular.io/">Angular</a></td><td><a href="https://redux.js.org/">Redux</a></td></tr><tr><td><a href="https://vuejs.org/">Vue</a></td><td><a href="https://datorama.github.io/akita/">Akita</a></td></tr></tbody></table><h2 id="改編-Storybook-教程"><a href="#改編-Storybook-教程" class="headerlink" title="改編 Storybook 教程"></a>改編 Storybook 教程</h2><p>為什麼要改編 <a href="https://www.learnstorybook.com/intro-to-storybook/react/en/get-started/">Storybook教程(React Version)</a> ?</p><p>這個教程會以一個簡單的 Todo List,<br>從創建應用程式、簡單的 Component 到複雜,<br>與狀態管理器介接, 測試到部署。</p><p>但是他缺了一味，<a href="https://www.typescriptlang.org/">TypeScript</a>,<br>所以我自已用 TypeScript 進行了改寫並稍作一下記錄。</p><h3 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h3><ul><li>作業系統 : <a href="https://www.microsoft.com/zh-tw/windows/compare-windows-10-home-vs-pro">Windows 10 Pro</a></li><li>瀏覽器 : Chrome</li></ul><h3 id="開始"><a href="#開始" class="headerlink" title="開始"></a>開始</h3><p>設定初始化的環境</p><h4 id="設定-React-Storybook"><a href="#設定-React-Storybook" class="headerlink" title="設定 React Storybook"></a>設定 React Storybook</h4><p>開啟命令提示視窗，執行以下命令以創建 React App</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Create our application:</span><br><span class="line">npx create-react-app taskbox</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> taskbox</span><br></pre></td></tr></table></figure><p>安裝 Storybook</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm i storybook</span><br><span class="line"></span><br><span class="line"># Add Storybook:</span><br><span class="line">npx -p @storybook/cli sb init</span><br></pre></td></tr></table></figure><p>啟動開發環境的 Storybook，</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># <span class="built_in">Start</span> the component explorer on port <span class="number">6006</span>:</span><br><span class="line">yarn storybook</span><br></pre></td></tr></table></figure><p>測試與執行</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Run the test runner (Jest) <span class="keyword">in</span> a terminal:</span><br><span class="line">yarn test --watchAll</span><br><span class="line"></span><br><span class="line"># Run the frontend app proper on port <span class="number">3000</span>:</span><br><span class="line">yarn <span class="built_in">start</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/uQXmVvQ.jpg" alt="npm Storybook"></p><p>下載 <a href="https://github.com/chromaui/learnstorybook-code/edit/master/src/index.css">CSS</a>,存檔至 src/index.css</p><p>安裝 degit  </p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i degit</span><br></pre></td></tr></table></figure><p>加入 Add assets (字型與Icon)</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npx degit chromaui/learnstorybook-code/src/assets/font src/assets/font</span><br><span class="line">npx degit chromaui/learnstorybook-code/src/assets/icon src/assets/icon</span><br></pre></td></tr></table></figure><p>Git Commit</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; git add .</span><br><span class="line">&gt; git commit -m &quot;first commit&quot;</span><br></pre></td></tr></table></figure><h4 id="簡單的-component"><a href="#簡單的-component" class="headerlink" title="簡單的 component"></a>簡單的 component</h4><p>在 <code>src/components/</code> 資料夾建立 component <code>Task.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/Task.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Task</span>(<span class="params">&#123; task: &#123; id, title, state &#125;, onArchiveTask, onPinTask &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;list-item&quot;</span>&gt;</span><br><span class="line">      &lt;input type=<span class="string">&quot;text&quot;</span> value=&#123;title&#125; readOnly=&#123;<span class="literal">true</span>&#125; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建立 Task.stories.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/Task.stories.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Task <span class="keyword">from</span> <span class="string">&#x27;./Task&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  component: Task,</span><br><span class="line">  title: <span class="string">&#x27;Task&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Template = <span class="function"><span class="params">args</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Task</span> &#123;<span class="attr">...args</span>&#125; /&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Default = Template.bind(&#123;&#125;);</span><br><span class="line">Default.args = &#123;</span><br><span class="line">  task: &#123;</span><br><span class="line">    id: <span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">    title: <span class="string">&#x27;Test Task&#x27;</span>,</span><br><span class="line">    state: <span class="string">&#x27;TASK_INBOX&#x27;</span>,</span><br><span class="line">    updatedAt: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2018</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">0</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Pinned = Template.bind(&#123;&#125;);</span><br><span class="line">Pinned.args = &#123;</span><br><span class="line">  task: &#123;</span><br><span class="line">    ...Default.args.task,</span><br><span class="line">    state: <span class="string">&#x27;TASK_PINNED&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Archived = Template.bind(&#123;&#125;);</span><br><span class="line">Archived.args = &#123;</span><br><span class="line">  task: &#123;</span><br><span class="line">    ...Default.args.task,</span><br><span class="line">    state: <span class="string">&#x27;TASK_ARCHIVED&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>隨時你都可以執行 <code>yarn storybook</code> 試跑來看看 storybook<br>調整 Storybook 的 config 檔 (.storybook/main.js)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .storybook/main.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  stories: [<span class="string">&#x27;../src/components/**/*.stories.js&#x27;</span>],</span><br><span class="line">  addons: [</span><br><span class="line">    <span class="string">&#x27;@storybook/addon-links&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@storybook/addon-essentials&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;@storybook/preset-create-react-app&#x27;</span>,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>(.storybook/preview.js) 這設定為了 log UI 上的某些操作產生的事件，<br>在之後我們會看到 <strong>完成(<code>onArchiveTask</code>)或置頂(<code>onPinTask</code>)</strong> 兩個事件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// .storybook/preview.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../src/index.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Configures Storybook to log the actions(onArchiveTask and onPinTask) in the UI.</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> parameters = &#123;</span><br><span class="line">  actions: &#123; <span class="attr">argTypesRegex</span>: <span class="string">&#x27;^on[A-Z].*&#x27;</span> &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>調整 <code>Task.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/Task.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Task</span>(<span class="params">&#123; task: &#123; id, title, state &#125;, onArchiveTask, onPinTask &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;<span class="string">`list-item <span class="subst">$&#123;state&#125;</span>`</span>&#125;&gt;</span><br><span class="line">      &lt;label className=<span class="string">&quot;checkbox&quot;</span>&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          type=<span class="string">&quot;checkbox&quot;</span></span><br><span class="line">          defaultChecked=&#123;state === <span class="string">&#x27;TASK_ARCHIVED&#x27;</span>&#125;</span><br><span class="line">          disabled=&#123;<span class="literal">true</span>&#125;</span><br><span class="line">          name=<span class="string">&quot;checked&quot;</span></span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;span className=<span class="string">&quot;checkbox-custom&quot;</span> onClick=&#123;<span class="function">() =&gt;</span> onArchiveTask(id)&#125; /&gt;</span><br><span class="line">      &lt;/label&gt;</span><br><span class="line">      &lt;div className=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;text&quot;</span> value=&#123;title&#125; readOnly=&#123;<span class="literal">true</span>&#125; placeholder=<span class="string">&quot;Input title&quot;</span> /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div className=<span class="string">&quot;actions&quot;</span> onClick=&#123;<span class="function"><span class="params">event</span> =&gt;</span> event.stopPropagation()&#125;&gt;</span><br><span class="line">        &#123;state !== <span class="string">&#x27;TASK_ARCHIVED&#x27;</span> &amp;&amp; (</span><br><span class="line">          <span class="comment">// eslint-disable-next-line jsx-a11y/anchor-is-valid</span></span><br><span class="line">          &lt;a onClick=&#123;<span class="function">() =&gt;</span> onPinTask(id)&#125;&gt;</span><br><span class="line">            &lt;span className=&#123;<span class="string">`icon-star`</span>&#125; /&gt;</span><br><span class="line">          &lt;/a&gt;</span><br><span class="line">        )&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加入測試用的外掛(add on)</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add -D @storybook/addon-storyshots react-test-renderer</span><br></pre></td></tr></table></figure><p>執行測試</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; yarn test</span><br></pre></td></tr></table></figure><p>測試結果</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">yarn run v1.22.0</span><br><span class="line">$ react-scripts test</span><br><span class="line">(node:52888) DeprecationWarning: \&#96;storyFn\&#96; is deprecated and will be removed in Storybook 7.0.</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;storybookjs&#x2F;storybook&#x2F;blob&#x2F;next&#x2F;MIGRATION.md#deprecated-storyfn</span><br><span class="line"> PASS  src&#x2F;components&#x2F;storybook.test.js (14.703 s)</span><br><span class="line">  Storyshots</span><br><span class="line">    Task</span><br><span class="line">      √ Default (13 ms)</span><br><span class="line">      √ Pinned (2 ms)</span><br><span class="line">      √ Archived (1 ms)</span><br><span class="line"></span><br><span class="line"> › 3 snapshots written.</span><br><span class="line">Snapshot Summary</span><br><span class="line"> › 3 snapshots written from 1 test suite.</span><br><span class="line"></span><br><span class="line">Test Suites: 1 passed, 1 total</span><br><span class="line">Tests:       3 passed, 3 total</span><br><span class="line">Snapshots:   3 written, 3 total</span><br><span class="line">Time:        16.716 s</span><br><span class="line">Ran all test suites related to changed files.</span><br></pre></td></tr></table></figure><h4 id="簡單的-component-改用-typescript"><a href="#簡單的-component-改用-typescript" class="headerlink" title="簡單的 component 改用 typescript"></a>簡單的 component 改用 typescript</h4><p>首先，<code>Task.js</code> 調整副檔名為 <code>Task.tsx</code>，<br><code>Task.stories.js</code> 為 <code>Task.stories.tsx</code>.<br>測試檔案 <code>storybook.test.js</code> 也一併修改 <code>storybook.test.ts</code></p><p>並修改 <code>.storybook/main.js</code>  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  stories: [<span class="string">&#x27;../src/components/**/*.stories.tsx&#x27;</span>],</span><br><span class="line">  <span class="comment">/// 略…</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>建立 <code>tsconfig.json</code> 檔</p><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; tsc --init</span><br></pre></td></tr></table></figure><p>用 TypeScript 改寫  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/Task.tsx</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="built_in">enum</span> TaskState&#123;</span><br><span class="line">  Inbox = <span class="string">&#x27;TASK_INBOX&#x27;</span>,</span><br><span class="line">  Pinned = <span class="string">&#x27;TASK_PINNED&#x27;</span>,</span><br><span class="line">  Archived = <span class="string">&#x27;TASK_ARCHIVED&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> TaskArgs &#123;</span><br><span class="line">  item:TaskItem,</span><br><span class="line">  onArchiveTask: <span class="function">(<span class="params">id:<span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span>,</span><br><span class="line">  onPinTask: <span class="function">(<span class="params">id:<span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskItem</span></span>&#123;</span><br><span class="line">  id: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  title: <span class="built_in">string</span> = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  state: TaskState = TaskState.Inbox</span><br><span class="line">  updatedAt?: <span class="built_in">Date</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span> <span class="title">Task</span>(<span class="params">args:TaskArgs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=&#123;<span class="string">`list-item <span class="subst">$&#123;args.item.state&#125;</span>`</span>&#125;&gt;</span><br><span class="line">      &lt;label className=<span class="string">&quot;checkbox&quot;</span>&gt;</span><br><span class="line">        &lt;input</span><br><span class="line">          <span class="keyword">type</span>=<span class="string">&quot;checkbox&quot;</span></span><br><span class="line">          defaultChecked=&#123;args.item.state === TaskState.Archived&#125;</span><br><span class="line">          disabled=&#123;<span class="literal">true</span>&#125;</span><br><span class="line">          name=<span class="string">&quot;checked&quot;</span></span><br><span class="line">        /&gt;</span><br><span class="line">        &lt;span className=<span class="string">&quot;checkbox-custom&quot;</span> onClick=&#123;<span class="function">()=&gt;</span>args.onArchiveTask(args.item.id)&#125; /&gt;</span><br><span class="line">      &lt;/label&gt;</span><br><span class="line">      &lt;div className=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line">        &lt;input <span class="keyword">type</span>=<span class="string">&quot;text&quot;</span> value=&#123;args.item.title&#125; readOnly=&#123;<span class="literal">true</span>&#125; placeholder=<span class="string">&quot;Input title&quot;</span> /&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div className=<span class="string">&quot;actions&quot;</span> onClick=&#123;<span class="function"><span class="params">event</span> =&gt;</span> event.stopPropagation()&#125;&gt;</span><br><span class="line">        &#123;args.item.state !== TaskState.Archived &amp;&amp; (</span><br><span class="line">          <span class="comment">// eslint-disable-next-line jsx-a11y/anchor-is-valid</span></span><br><span class="line">          &lt;a onClick=&#123;<span class="function">()=&gt;</span>args.onPinTask(args.item.id)&#125;&gt;</span><br><span class="line">            &lt;span className=&#123;<span class="string">`icon-star`</span>&#125; /&gt;</span><br><span class="line">          &lt;/a&gt;</span><br><span class="line">        )&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>改寫 Task.store.tsx</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/Task.stories.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Task, &#123; TaskItem, TaskArgs, TaskState &#125; <span class="keyword">from</span> <span class="string">&#x27;./Task&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Story &#125; <span class="keyword">from</span> <span class="string">&#x27;@storybook/react/types-6-0&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  component: Task,</span><br><span class="line">  title: <span class="string">&#x27;Task&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Template:Story&lt;TaskArgs&gt; = <span class="function"><span class="params">args</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Task</span> &#123;<span class="attr">...args</span>&#125; /&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> defaultItem:TaskItem = &#123; </span><br><span class="line">  id:<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">  title:<span class="string">&#x27;Test Task&#x27;</span>,</span><br><span class="line">  state:TaskState.Inbox,</span><br><span class="line">  updatedAt: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2018</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">0</span>),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Default = Template.bind(&#123;&#125;);</span><br><span class="line">Default.args = &#123; <span class="attr">item</span>: defaultItem, &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Pinned = Template.bind(&#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> pinnedItem = Copy(defaultItem);</span><br><span class="line">pinnedItem.state=TaskState.Pinned</span><br><span class="line">Pinned.args = &#123; <span class="attr">item</span>: pinnedItem &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Archived = Template.bind(&#123;&#125;);</span><br><span class="line"><span class="keyword">var</span> archivedItem = Copy(defaultItem);</span><br><span class="line">archivedItem.state=TaskState.Archived;</span><br><span class="line">Archived.args = &#123;<span class="attr">item</span>: archivedItem&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Copy</span>(<span class="params">obj:<span class="built_in">any</span></span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;&#125;,obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="組合成複雜的-component-TypeScript版本"><a href="#組合成複雜的-component-TypeScript版本" class="headerlink" title="組合成複雜的 component (TypeScript版本)"></a>組合成複雜的 component (TypeScript版本)</h4><p>與教程最主要的不同之處在於使用了 TypeScript 的語法撰寫</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// src/components/TaskList.tsx</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Task, &#123; TaskItem, TaskState &#125; <span class="keyword">from</span> <span class="string">&#x27;./Task&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="comment">//import &#123; archiveTask, pinTask &#125; from &#x27;../lib/redux&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> TaskListProps &#123;</span><br><span class="line">  loading?:<span class="built_in">boolean</span>;</span><br><span class="line">  tasks: TaskItem[];</span><br><span class="line">  onArchiveTask: <span class="function">(<span class="params">id:<span class="built_in">string</span></span>)=&gt;</span><span class="built_in">void</span>;</span><br><span class="line">  onPinTask: <span class="function">(<span class="params">id:<span class="built_in">string</span></span>)=&gt;</span><span class="built_in">void</span>;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">PureTaskList</span>(<span class="params">props:TaskListProps</span>) </span>&#123;     </span><br><span class="line">  <span class="keyword">const</span> events = &#123; </span><br><span class="line">    onArchiveTask:props.onArchiveTask,</span><br><span class="line">    onPinTask:props.onPinTask,</span><br><span class="line">   &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> LoadingRow = (</span><br><span class="line">    &lt;div className=<span class="string">&quot;loading-item&quot;</span>&gt;</span><br><span class="line">      &lt;span className=<span class="string">&quot;glow-checkbox&quot;</span> /&gt;</span><br><span class="line">      &lt;span className=<span class="string">&quot;glow-text&quot;</span>&gt;</span><br><span class="line">        &lt;span&gt;Loading&lt;<span class="regexp">/span&gt; &lt;span&gt;cool&lt;/</span>span&gt; <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>state<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line">      &lt;/span&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (props.loading) &#123;    </span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">&quot;list-items&quot;</span>&gt;</span><br><span class="line">        &#123;LoadingRow&#125;</span><br><span class="line">        &#123;LoadingRow&#125;</span><br><span class="line">        &#123;LoadingRow&#125;</span><br><span class="line">        &#123;LoadingRow&#125;</span><br><span class="line">        &#123;LoadingRow&#125;</span><br><span class="line">        &#123;LoadingRow&#125;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (props.tasks === <span class="literal">undefined</span> || props.tasks.length === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;div className=<span class="string">&quot;list-items&quot;</span>&gt;</span><br><span class="line">            &lt;div className=<span class="string">&quot;wrapper-message&quot;</span>&gt;</span><br><span class="line">                &lt;span className=<span class="string">&quot;icon-check&quot;</span> /&gt;</span><br><span class="line">                &lt;div className=<span class="string">&quot;title-message&quot;</span>&gt;You have no tasks&lt;/div&gt;</span><br><span class="line">                &lt;div className=<span class="string">&quot;subtitle-message&quot;</span>&gt;Sit back and relax&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> tasksInOrder = [</span><br><span class="line">    ...props.tasks.filter(<span class="function"><span class="params">t</span> =&gt;</span> t.state === TaskState.Pinned), <span class="comment">//&lt; ==== 固定頂部</span></span><br><span class="line">    ...props.tasks.filter(<span class="function"><span class="params">t</span> =&gt;</span> t.state !== TaskState.Pinned),</span><br><span class="line">  ];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;list-items&quot;</span>&gt;</span><br><span class="line">      &#123;tasksInOrder.map(<span class="function"><span class="params">item</span> =&gt;</span> (</span><br><span class="line">        &lt;Task key=&#123;item.id&#125; item=&#123;item&#125; &#123;...events&#125;/&gt;</span><br><span class="line">      ))&#125;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  (props:TaskListProps) =&gt; (&#123;</span><br><span class="line">    tasks: props.tasks.filter(<span class="function"><span class="params">t</span> =&gt;</span> t.state === TaskState.Inbox || t.state === TaskState.Pinned ),</span><br><span class="line">  &#125;)  </span><br><span class="line">)(PureTaskList);</span><br></pre></td></tr></table></figure><p><code>TaskList.stories.tsx</code> 設置，也是使用 TypeScript 撰寫。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/TaskList.stories.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TaskList, TaskListArgs &#125; <span class="keyword">from</span> <span class="string">&#x27;./TaskList&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TaskItem, TaskState &#125; <span class="keyword">from</span> <span class="string">&#x27;./Task&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Story &#125; <span class="keyword">from</span> <span class="string">&#x27;@storybook/react/types-6-0&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  component: TaskList,</span><br><span class="line">  title: <span class="string">&#x27;TaskList&#x27;</span>,</span><br><span class="line">  decorators: [<span class="function">(<span class="params">story: () =&gt; React.ReactNode</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">padding:</span> &#x27;<span class="attr">3rem</span>&#x27; &#125;&#125;&gt;</span>&#123;story()&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>],</span><br><span class="line">  excludeStories: <span class="regexp">/.*Data$/</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Template:Story&lt;TaskListArgs&gt; = <span class="function"><span class="params">args</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">TaskList</span> &#123;<span class="attr">...args</span>&#125; /&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> defaultItem:TaskItem = &#123; </span><br><span class="line">  id:<span class="string">&#x27;1&#x27;</span>,</span><br><span class="line">  title:<span class="string">&#x27;Test Task&#x27;</span>,</span><br><span class="line">  state:TaskState.Inbox,</span><br><span class="line">  updatedAt: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2018</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">9</span>, <span class="number">0</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Default = Template.bind(&#123;&#125;);</span><br><span class="line">Default.args = &#123; </span><br><span class="line">  tasks: [</span><br><span class="line">    &#123; ...defaultItem, <span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;Task 1&#x27;</span> &#125;,</span><br><span class="line">    &#123; ...defaultItem, <span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;Task 2&#x27;</span> &#125;,</span><br><span class="line">    &#123; ...defaultItem, <span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;Task 3&#x27;</span> &#125;,</span><br><span class="line">    &#123; ...defaultItem, <span class="attr">id</span>: <span class="string">&#x27;4&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;Task 4&#x27;</span> &#125;,</span><br><span class="line">    &#123; ...defaultItem, <span class="attr">id</span>: <span class="string">&#x27;5&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;Task 5&#x27;</span> &#125;,</span><br><span class="line">    &#123; ...defaultItem, <span class="attr">id</span>: <span class="string">&#x27;6&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;Task 6&#x27;</span> &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> WithPinnedTasks = Template.bind(&#123;&#125;);</span><br><span class="line">WithPinnedTasks.args = &#123;  </span><br><span class="line">  tasks: [</span><br><span class="line">    ...Default.args.tasks!.slice(<span class="number">0</span>,<span class="number">5</span>),</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="string">&#x27;6&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;Task 6 (pinned)&#x27;</span>, <span class="attr">state</span>: TaskState.Pinned &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Loading = Template.bind(&#123;&#125;);</span><br><span class="line">Loading.args = &#123;</span><br><span class="line">  tasks: [],</span><br><span class="line">  loading: <span class="literal">true</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Empty = Template.bind(&#123;&#125;);</span><br><span class="line">Empty.args = &#123;  </span><br><span class="line">  ...Loading.args,</span><br><span class="line">  loading: <span class="literal">false</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="介接-Store-資料"><a href="#介接-Store-資料" class="headerlink" title="介接 Store 資料"></a>介接 Store 資料</h4><p>建立 Redux  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/lib/redux.ts</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// A simple redux store/actions/reducer implementation.</span></span><br><span class="line"><span class="comment">// A true app would be more complex and separated into different files.</span></span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; TaskItem, TaskState &#125; <span class="keyword">from</span> <span class="string">&#x27;../components/Task&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> archiveTask = <span class="function">(<span class="params">id: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;archive task:&quot;</span>+id);</span><br><span class="line">  <span class="keyword">return</span> (&#123; <span class="attr">type</span>: TaskState.Archived, id &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> pinTask = <span class="function">(<span class="params">id: <span class="built_in">string</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;pin task:&quot;</span>+id);</span><br><span class="line">  <span class="keyword">return</span> (&#123; <span class="attr">type</span>: TaskState.Pinned, id &#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The reducer describes how the contents of the store change for each action</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> reducer = <span class="function">(<span class="params">state: <span class="built_in">any</span>, action: &#123; id:<span class="built_in">string</span>; <span class="keyword">type</span>: TaskState; &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">switch</span> (action.type) &#123;</span><br><span class="line">    <span class="keyword">case</span> TaskState.Archived:</span><br><span class="line">    <span class="keyword">case</span> TaskState.Pinned:</span><br><span class="line">      <span class="keyword">return</span> taskStateReducer(action.type)(state, action);</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> state;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The initial state of our store when the app loads.</span></span><br><span class="line"><span class="comment">// Usually you would fetch this from a server</span></span><br><span class="line"><span class="keyword">const</span> defaultTasks:<span class="built_in">Array</span>&lt;TaskItem&gt; = [  </span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;1&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;Something&#x27;</span>, <span class="attr">state</span>: TaskState.Inbox &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;2&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;Something more&#x27;</span>, <span class="attr">state</span>: TaskState.Inbox &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;3&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;Something else&#x27;</span>, <span class="attr">state</span>: TaskState.Inbox &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">&#x27;4&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;Something again&#x27;</span>, <span class="attr">state</span>: TaskState.Inbox &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// We export the constructed redux store</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(reducer, &#123; <span class="attr">tasks</span>: defaultTasks &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// All our reducers simply change the state of a single task.</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">taskStateReducer</span>(<span class="params">taskState: TaskState</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">state: &#123; tasks: TaskItem[]; &#125;, action: &#123; id: <span class="built_in">string</span>; &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...state,</span><br><span class="line">      tasks: state.tasks.map(<span class="function"><span class="params">task</span> =&gt;</span></span><br><span class="line">        task.id === action.id ? &#123; ...task, <span class="attr">state</span>: taskState &#125; : task</span><br><span class="line">      ),</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 TaskList.tsx 視作一個 container 與 redux 作介接:</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/components/TaskList.tsx</span></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> Task, &#123; TaskItem, TaskState &#125; <span class="keyword">from</span> <span class="string">&#x27;./Task&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; archiveTask, pinTask &#125; <span class="keyword">from</span> <span class="string">&#x27;../lib/redux&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中略...</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(</span><br><span class="line">  (props:TaskListArgs) =&gt; (&#123;</span><br><span class="line">    tasks: props.tasks.filter(<span class="function"><span class="params">t</span> =&gt;</span> t.state === TaskState.Inbox || t.state === TaskState.Pinned ),</span><br><span class="line">  &#125;),</span><br><span class="line">  dispatch =&gt; (&#123;</span><br><span class="line">    onArchiveTask: <span class="function">(<span class="params">id: <span class="built_in">string</span></span>) =&gt;</span> dispatch(archiveTask(id)),</span><br><span class="line">    onPinTask: <span class="function">(<span class="params">id: <span class="built_in">string</span></span>) =&gt;</span> dispatch(pinTask(id)),</span><br><span class="line">&#125;))(TaskList);</span><br></pre></td></tr></table></figure><p>加上 Page <code>InboxScreen</code></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//src/components/InboxScreen.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> TaskList <span class="keyword">from</span> <span class="string">&#x27;./TaskList&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">InboxScreenArgs</span> </span>&#123;</span><br><span class="line">  error:<span class="built_in">string</span> | <span class="literal">undefined</span> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">InboxScreen</span>(<span class="params">args:InboxScreenArgs</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (args.error) &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div className=<span class="string">&quot;page lists-show&quot;</span>&gt;</span><br><span class="line">        &lt;div className=<span class="string">&quot;wrapper-message&quot;</span>&gt;</span><br><span class="line">          &lt;span className=<span class="string">&quot;icon-face-sad&quot;</span> /&gt;</span><br><span class="line">          &lt;div className=<span class="string">&quot;title-message&quot;</span>&gt;Oh no!&lt;/div&gt;</span><br><span class="line">          &lt;div className=<span class="string">&quot;subtitle-message&quot;</span>&gt;Something went wrong&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    );</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    &lt;div className=<span class="string">&quot;page lists-show&quot;</span>&gt;</span><br><span class="line">      &lt;nav&gt;</span><br><span class="line">        &lt;h1 className=<span class="string">&quot;title-page&quot;</span>&gt;</span><br><span class="line">          &lt;span className=<span class="string">&quot;title-wrapper&quot;</span>&gt;TaskBox&lt;/span&gt;</span><br><span class="line">        &lt;/h1&gt;</span><br><span class="line">      &lt;/nav&gt;</span><br><span class="line">      &lt;TaskList /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> connect(<span class="function">(<span class="params">props:InboxScreenArgs</span>) =&gt;</span> (props))(PureInboxScreen);</span><br></pre></td></tr></table></figure><p>一樣也加上 Story ,<code>InboxScreen.stories.tsx</code><br>讓我們可以透過 Storybook 作人工 E2E 測試  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//src/components/InboxScreen.stories.tsx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; InboxScreenArgs, InboxScreen &#125; <span class="keyword">from</span> <span class="string">&#x27;./InboxScreen&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Story &#125; <span class="keyword">from</span> <span class="string">&#x27;@storybook/react/types-6-0&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;../lib/redux&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  component: InboxScreen,</span><br><span class="line">  decorators: [<span class="function">(<span class="params">story: () =&gt; React.ReactNode</span>) =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span>&#123;story()&#125;<span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>],</span><br><span class="line">  title: <span class="string">&#x27;InboxScreen&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Template:Story&lt;InboxScreenArgs&gt; = <span class="function"><span class="params">args</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">PureInboxScreen</span> &#123;<span class="attr">...args</span>&#125; /&gt;</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> Default = Template.bind(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="built_in">Error</span> = Template.bind(&#123;&#125;);</span><br><span class="line"><span class="built_in">Error</span>.args = &#123;</span><br><span class="line">  error: <span class="string">&#x27;Something&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>完整代碼可以參考<a href="https://github.com/marsen/intro-to-storybook-typescript">此處</a>。</p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.learnstorybook.com/intro-to-storybook">Learn Storybook(javascript version)</a></li><li><a href="https://github.com/typescript-cheatsheets/react">React+TypeScript Cheat sheets</a></li><li>Component Library<ul><li><a href="https://reactjs.org/">React</a></li><li><a href="https://vuejs.org/">Vue</a></li><li><a href="https://angular.io/">Angular</a></li></ul></li><li>State Management Library<ul><li><a href="https://facebook.github.io/flux/">Flux</a></li><li><a href="https://redux.js.org/">Redux</a></li><li><a href="https://datorama.github.io/akita/">Akita</a></li></ul></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;不論是 App 或是 Web, 與使用者第一線互動的就是 UI 了。&lt;br&gt;另一面在需求設計上, 我們總會想像一個畫面，&lt;b
      
    
    </summary>
    
    
    
      <category term="TypeScript" scheme="https://blog.marsen.me/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>[上課筆記] 針對遺留代碼加入單元測試的藝術 </title>
    <link href="https://blog.marsen.me/2021/01/11/2021/legacy_code_with_unit_test/"/>
    <id>https://blog.marsen.me/2021/01/11/2021/legacy_code_with_unit_test/</id>
    <published>2021-01-11T09:07:35.000Z</published>
    <updated>2021-01-18T12:34:23.676Z</updated>
    
    <content type="html"><![CDATA[<h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><ul><li><p>聽到需求的時候，不要先想邏輯，先想怎麼驗收 ?</p></li><li><p>OO 善用封裝繼承的特性，不要修改 Product 類別，不要修改測試方法</p></li><li><p>Extract and Override 的 SOP</p><ul><li>找到 Dependency</li><li>Extract Method</li><li>private →　protected</li><li>建立 SUT 的子類</li><li>Override Dependency</li><li>Create Setter</li><li>改測試</li><li>Assign 依賴值</li><li>無法適用的情境<ul><li>final</li><li>static</li></ul></li></ul></li><li><p>SPR 的 anti Pattern</p><ul><li>職責過多</li><li>單元切得過細</li></ul></li><li><p>測試案例為什麼用 Snake 寫法?</p><ul><li>測試案例是用來描述情境</li><li>反思：中文表達力強但描述精準度低</li><li>要看見測試案例的因果關係</li><li>測試案例的設計<ul><li>2+2 = 4</li><li>2x2 = 4</li><li>2^2 = 4</li></ul></li></ul></li><li><p>重構測試案例</p><ul><li>只呈現與情境相關的資訊</li></ul></li><li><p>養成用 Domain 情境而不是 Code Level 的語言</p></li><li><p>不要為了測試把 Production Code 搞得複雜</p></li><li><p>Mock Framework 的本質與要解決的問題是什麼</p></li><li><p>3A原則與Given When Then</p></li><li><p>減少 Content Switch(利用工具)</p></li><li><p><del>錢</del>時間要花在刀口上</p><ul><li>Unit Test</li><li>Pair Programming</li><li>Code Review</li><li>整合測試</li><li>QA 測試</li><li>Alpha/Beta 測試</li><li>部署策略</li></ul></li><li><p>Test Anti-Patter</p><ul><li>小心過度指定(使用 Argument Matcher</li><li>測試案例之間相依</li><li>一次測不只一件事（Data Driven)</li><li>測試案例名字過於實作細節</li></ul></li><li><p>不要為了寫測試使用 Virtual</p></li><li><p>StoreProcedure 的測試不是單元測試，但是很好測試，只有與 Table 相依，透過 ORM 可以輕易作到，</p></li></ul><h2 id="Nice-to-Have"><a href="#Nice-to-Have" class="headerlink" title="Nice to Have"></a>Nice to Have</h2><ul><li><p>Coverage</p><ul><li>Missing Test Cases</li><li>Dead Code</li><li>實例分享：大家都不知道*</li><li>童子軍法則(趨勢&gt;數字)</li><li>&gt; 0%</li></ul></li><li><p>ROI</p><ul><li>出過問題</li><li>經常變動的<ul><li>對不會變動且運作正確的程式寫測試是種浪費</li><li>共用的模組</li><li>商業價值</li></ul></li></ul></li><li><p>架構設計</p><ul><li>三層式架構</li><li>六角架構</li></ul></li></ul><h2 id="課程總覽與個人的建議順序"><a href="#課程總覽與個人的建議順序" class="headerlink" title="課程總覽與個人的建議順序"></a>課程總覽與個人的建議順序</h2><table><thead><tr><th>課程</th><th>說明</th><th>補充</th></tr></thead><tbody><tr><td>熱血 Coding Dojo 活動</td><td>點燃動機的一堂課</td><td>對我個人影響最大的一堂課</td></tr><tr><td>極速開發</td><td>學過這堂課，會比較清楚 91 的日常開發是怎麼作的</td><td>這裡是一個檻，你需要學習 Vim 也可能需要買好一點的 IDE</td></tr><tr><td>針對遺留代碼加入單元測試的藝術</td><td>單元測試的基本概念</td><td>強烈建議讀過「單元測試的藝術」與 91的「30天快速上手TDD」雖然有點久遠，但是好東西是經得起年歲的</td></tr><tr><td>演化式設計：測試驅動開發與持續重構</td><td>2日課程，如果只能上一堂課的話，我會選這堂</td><td>資訊量很大的課程，不過如果上過前面的課，這時候應該可以苦盡甘來</td></tr><tr><td>Clean Coder：DI 與 AOP 進階實戰</td><td>進階課程</td><td>如果上過前面的課，這時候應該可以苦盡甘來，但是建議可以對 Design Patter 稍作功課</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="反思-如果是我會怎麼設計內訓課程"><a href="#反思-如果是我會怎麼設計內訓課程" class="headerlink" title="反思:如果是我會怎麼設計內訓課程?"></a>反思:如果是我會怎麼設計內訓課程?</h2><ul><li><p>附錄課程</p><ul><li>為什麼寫測試?</li><li>第一個測試(計算器或 FizzBuzz)</li><li>5 種假物件(Test Double)<ul><li>Stub(模擬回傳)/Mock(前置驗証)/Fake/Spy:驗証互動(後置驗証)/Dummy</li><li>小心不要落入名詞解釋</li></ul></li></ul></li><li><p>主要課程（假設學生已經有一定的理解）</p><ul><li>第一個測試<ul><li>3A原則</li></ul></li><li>3正1反</li><li>三種互動<ul><li>呼叫次數，參數，順序</li><li>狀態改變</li><li>回傳值</li></ul></li><li>隔離相依  <ul><li>原生操作</li><li>使用框架</li><li>測試案例<ul><li>可讀性:增進理解 / 規格書 / 穿越時空的傳承</li></ul></li></ul></li><li>TDD</li><li>重構</li><li>Design Pattern</li></ul></li></ul><h2 id="課程上的反思"><a href="#課程上的反思" class="headerlink" title="課程上的反思"></a>課程上的反思</h2><ul><li>Setter 的重構要加強</li><li>依賴注入點，不一定要在建構子也不一定要在 Prod (抽方法)</li><li>要有能力判斷切入點<ul><li>善用工具</li><li>練習</li></ul></li><li>C# 參數善用Optional</li><li>OOP &amp; UT</li><li>Fp &amp; UT</li><li>UT &amp; Refactor &amp; Design Pattern</li><li>Pattern　工廠／簡單工廠／</li><li>存在監控 Running Code 計算方法呼叫次數的工具嗎 ?</li><li>快速打出六個０ ?</li></ul><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://github.com/202101-unittest">Repository</a></li><li><a href="https://paper.dropbox.com/doc/202101-ERimcc1zVeIpED6vZjLtU">Paper</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;題目&quot;&gt;&lt;a href=&quot;#題目&quot; class=&quot;headerlink&quot; title=&quot;題目&quot;&gt;&lt;/a&gt;題目&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;聽到需求的時候，不要先想邏輯，先想怎麼驗收 ?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;OO 善用封裝繼承的特性，不要修改 Pr
      
    
    </summary>
    
    
    
      <category term="Unit Testing" scheme="https://blog.marsen.me/tags/Unit-Testing/"/>
    
  </entry>
  
  <entry>
    <title>[生活筆記] 有關單元測試的一些反思</title>
    <link href="https://blog.marsen.me/2021/01/11/2021/about_unit_test/"/>
    <id>https://blog.marsen.me/2021/01/11/2021/about_unit_test/</id>
    <published>2021-01-11T06:35:23.000Z</published>
    <updated>2021-04-17T02:44:50.638Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>單元測試可以說是我這幾年投入最多學習項目，<br>我為什麼會這麼投入? 是因為我相信這是一個有效的開發方式，<br>持續的上課與練習，稍微記錄一下這些年來的反思。</p><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>單元測試是我覺得不論何種程式語言(雖然我並不甚理解 FP)，最最基礎的技能，<br>非常值得深耕，好的單元測試本身是一種規格書(spec)與使用者案例(use case)，<br>你想搞 CI/CD、敏捷、DevOps、DDD，都一定要有單元測試，<br>甚至我認為這一切只是軟體開發的本質的多面。</p><blockquote><p>我個人是相當推崇 XP (極限編程)的，雖然不知道是不是因為「每周工作 40 小時」這一條，<br>    導致企業不愛，公司不疼、專案管理協會不推、主管不敢用，<br>    但就我來說 XP 反而是最貼近軟體工程的具體實踐(而 Scrum 只是框架，你可以把 XP 放進去)，<br>    也是真正能快速帶來品質的作法(簡單而務實)。</p></blockquote><h2 id="缺少的拼圖-困難的現實"><a href="#缺少的拼圖-困難的現實" class="headerlink" title="缺少的拼圖(困難的現實)"></a>缺少的拼圖(困難的現實)</h2><ol><li><p>學習曲線</p><p> 有寫單元測試的工程師非常非常稀少，能內化寫得好的更是稀少。<br> 為寫而寫的單元測試不但無法帶來好處，反而弊病叢生又無法為產品帶來價值。<br> 但是學好單元測試要多久 ? 要導入又要多久 ?<br> 這點有些因人而異，但我敢說不是只有一兩次的內訓或 WorkShop 就可以實際上戰場。</p></li><li><p>人員素質參次不齊</p><p> 承上，寫測試的好處，短期內很難有立竿見影的好處，<br> 人性就是多一事不如少一事。<br> 更糟的是，過沒多久這些人員離職、調任、昇遷，<br> 人走了留下了代碼，一年年過去，<br> 就只剩一個焦油坑，一代一代傳承的業力，等待被引爆。</p></li><li><p>教育體系的缺乏</p><p> 在台灣能把測試說到點上的講師，我只能推 91 大，<br> 也可能是我同溫層太厚或是見識太少，有很棒的講師或網路資源請推薦給我。<br> 如果可以的話，我希望所有軟體的教育機構都應該介紹並深入指導這門知識，<br> 包含大專院校與各類補教機構 。</p><p> 不過反過來說，91 大的課程對學生來說並不便宜，時間也相當短促資訊量大，課也很難搶。<br> 在我的觀點，台灣整體軟體產業不能只依靠一個人，希望有更多高品質的課程能夠出現。</p></li><li><p>產品生命周期短</p><p> 現在的公司壽命，往往比一個人的職涯短，更不用說是內部的專案壽命，<br> 人員也常常被調任，也導致開發人員對產品或代碼的擁有權與責任感降低，<br> 當你對自已的產出只當作是個過客，那就不會原意用單元測試去細細打磨</p></li><li><p>人各有志</p><p> 並不是所有人都與我有相同的想法，我認為身為開發人員必須對自已的負責，<br> 要有「匠人心態」所以我的基礎會建立在單元測試之上。<br> 但有得人就只是「討口飯吃」、有得人著重「商業思維」、<br> 有得人偏重「架構設計」、有得人在乎「市場行銷」。<br> 退一步說，這都沒錯，但是這些開發者往往不會投入太多的精力在單元測試上(或是排序上靠後)</p></li></ol><h2 id="與未來的展望"><a href="#與未來的展望" class="headerlink" title="與未來的展望"></a>與未來的展望</h2><p>單元測試可以幫開發人員可以用更少的資源，對代碼有更深的理解，<br>一切都是案例，而案例是對產品的解釋，<br>一但理解了案例，工程師只需要組合單元或是創造新的單元。<br>而代碼就會是活的工程文件，可以跨越時間傳承給下一位 RD，<br>你傳承的不再會是業力，而是產品品質的火炬。</p><p>一但單元測試的基本知識抓住後，<br>測試趨動開發與重構就會水到渠成，<br>這兩門技術也不容易，本質上也易學難精，很需要經驗值，<br>測試趨動會讓我們更接近使用者，這裡指的是代碼的使用者。</p><blockquote><p>反思:也許是我們太常一人同時飾演多角才會這樣的問題，那麼 Pair Programming 是不是能解決這樣的問題)</p></blockquote><p>重構會引導我們到<strong>設計模式</strong>，<br>當然<strong>設計</strong>(架構與軟體)又是另一個領域了，未來會多找這一些課程來上。<br>目前這塊我也覺得是有缺憾的，TDD 之後就是重構了。<br>但是我並不認為硬背重構的準則或是 Design Pattern 就是解決之道，<br>而是應該結合兩者有系統化的設計課程，<br>理想上是有一個開發案例，可以循序漸進，反覆迭代的開發，<br>讓學徒可以由作中學，進而掌握這兩本藝術。</p><p>我希望可以有更多課程與資源可以學習讓學生們在接觸程式的當下，就接觸測試。<br>如何讓初階的開發者在學習路上，就接觸到正確的單元測試的姿勢呢 ?<br>如果未來有一天，人人都能寫出水平之上的測試，這個產業將會進入什麼樣領域呢 ?  </p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://blog.marsen.me/2020/10/19/2020/unittest_1/">單元測試分享(一) — Why ? How ? What ?</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;單元測試可以說是我這幾年投入最多學習項目，&lt;br&gt;我為什麼會這麼投入? 是因為我相信這是一個有效的開發方式，&lt;br&gt;持續的上
      
    
    </summary>
    
    
    
      <category term="Unit Testing" scheme="https://blog.marsen.me/tags/Unit-Testing/"/>
    
  </entry>
  
  <entry>
    <title>[生活筆記] 職涯回顧</title>
    <link href="https://blog.marsen.me/2021/01/11/2021/feedback_my_career/"/>
    <id>https://blog.marsen.me/2021/01/11/2021/feedback_my_career/</id>
    <published>2021-01-11T06:23:44.000Z</published>
    <updated>2021-02-02T17:18:30.374Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>本來想寫寫單元測試活動的心得，<br>但是覺得需要先說說我對<a href="/2021/01/11/2021/about_unit_test/">單元測試</a>的想法，<br>但是在那之前有需要說明我經歷了什麼，我又是怎麼樣的人。<br>寫著寫著越來越多，就拆了這篇文章出來。</p><p>剛好就業也差不多 10 年有餘了，也算是給自已一個重新審視的機會。</p><h2 id="經歷"><a href="#經歷" class="headerlink" title="經歷"></a>經歷</h2><p>退伍的第一份開發工作就被開除;<br>原因不明，但我的解釋就是戰力不足不是即戰力，<br>但是因為該公司很快就放掉我，我反而是感謝的。<br>那個時候工作很難找(08年金融海嘯)，就業面臨了沒經驗找工作的蛋生雞問題。</p><p><img src="https://i.imgur.com/C8ArWcY.png" alt="沒經驗找工作"></p><p>所以就想去補習(資策會的課程)，<br>但是家裡沒錢(房貸/學貸)還有一些長輩的不良債務(家裡被潑漆之類的)，  </p><p>後來跑去一個電子線材公司作資訊助理工作了 1 年半，<br>存夠了錢就去上課了，半年後也順利找到 W 社的工作，<br>這個時候去各個地方面試就蠻搶手的 Offer 拿到蠻多的，<br>但是我開的薪資，現在想想蠻都低的，另外比較印象深刻的是面試被保哥打槍了兩次(無聲卡)，<br>W 社最主要讓我認識了 Gelis 大大，還有獨立接手一個專案的經驗。<br>但離開的原因也是因為缺乏刺激，一個人怎麼作都不會有人管你，<br>看著一大份前人遺物，同事們的想法就是能動就好，沒有人想改進代碼，<br>那個時候我蠻受「學徒模式」一書的影響，想成為一個匠人，沒有回饋(與加薪)的環境我選擇了離開。</p><p>到了 C 社以後，蠻受主管肯定，工作氛圍比較接近新創，<br>同事之間的互動也蠻不錯的，最主要的成長是獨立開發了幾個專案，而且蠻賺錢的。<br>那個時候的角色也不錯，能清楚知道需求端開發端的狀況，<br>而且有幾個蠻重要的技術導入經驗。<br>但是後來碰到一個蠻低的薪資天花板(就知道我起薪有多低XD)，所以離開了。<br>現在想想離開也蠻正確的，不單單是薪水，對技術過於保守，其實現在有點吃老本的感覺。</p><p>後來就進了 N 社，我是在 N 社的成長期進去的，裡面很多大大，<br>也有一些 MVP，也是這個機會接觸到 TDD 與 SkillTree 的課程，<br>但是也是蠻掙扎的，一直無法作主要的專案，理想的開發方式也常常被現實打臉，<br>社群活動也參加的蠻多的，前期一些中國的講者的課程影響我蠻深的(也跟測試有關)，<br>跟 Ruddy 老師也有蠻近的接觸，看了蠻多的好書「軟技能」、「軟體開發本質論」、「進化」等…，<br>工作上實作了敏捷(雖然有蠻多地方怪怪)，也取得 Scrum Master 的認証，<br>但是我其實不是太認同社群的造神運動，還有認証機構進來以後說一些虛無飄渺的東西。<br>我還是想將「理論」與「現實」的鴻溝抹平，<br>離開的原因是想要有程式外的與人(妹子)接觸與時間(不太想 10-19 的上班方式)，薪資當然也有所提昇。</p><h2 id="想法"><a href="#想法" class="headerlink" title="想法"></a>想法</h2><p>早期的我很受「學徒模式」一書的影響，<br>想成為一個<strong>匠人</strong>，但是現在開始反思這個想法會不會過時了，<br>現在會比較想要<strong>斜槓</strong>，但是我不認為這兩者是衝突的。<br>主因是受前端開發影響，真的是一年萬變。<br>以前的我是前後端都開發，現在主流的開發方式都是分離的，<br>有其時空背景的因素在，而敏捷團隊講求的是跨職能(ps.我認為應是團隊而不是個人的跨職能)。<br>對於我來說，我個人也願意多學一點，但是反而有些貪多嚼不爛，<br>時間會是我最大的敵人，也是<a href="https://blog.marsen.me/2016/12/05/2016/be_friend_with_time/">朋友</a>，<br>而要考慮的會是<strong>價值與風險</strong>，單純的一直學「新」技術，沒有累積話只是一種浪費(比如說:<a href="https://zh.wikipedia.org/wiki/Microsoft_Silverlight">SliverLight</a>)，<br>所以我現在遇到新技術，會讓子彈飛一會兒，畢竟時間與精力都是稀缺資源。</p><p>開發之外也有很多重要的事，這些在「軟技能」一書可以看到，<br>包含維持自已身體的健康、習慣的建立、時間管理、財務管理、第二外語與溝通的技巧，<br>甚至是你的社交圈、家庭與親密關係，到這裡其實就是你的人生了。<br>軟體工程師不應該只是一個開發工具，軟體開發應該是未來人人具備的技能，</p><p>而你擁有這些技能，如何善用讓自已可以過得更好，反而才是一個議題。<br>舉例來說，有人用來增加收入(接案)，有人用來分析投資(股票爬蟲&amp;程式交易)，<br>有人用來找<a href="https://buzzorange.com/techorange/2019/09/26/find-girlfriend-by-python/">伴侶</a>，有人用來建立品牌或創業。<br>不要讓開發只在工作之中，要讓開發落入你的生活之中。</p><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;本來想寫寫單元測試活動的心得，&lt;br&gt;但是覺得需要先說說我對&lt;a href=&quot;/2021/01/11/2021/about_
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[活動筆記] 工程師如何提升英文聽說讀寫能力</title>
    <link href="https://blog.marsen.me/2021/01/06/2021/learning_english/"/>
    <id>https://blog.marsen.me/2021/01/06/2021/learning_english/</id>
    <published>2021-01-06T04:44:55.000Z</published>
    <updated>2021-01-18T12:34:23.676Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>2020 年搭客運南下高雄，時間長達 5 小時，<br>有在關注的 Podcast/YouTube 節目都聽完了。<br>百般無聊的情況下，滑 facebook 滑到了保哥的直播節目，<br>講的題目恰巧是我一直想改善的軟勒—英文，<br>裡面有提到相當多的資源，稍作記錄一下。</p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><h3 id="保哥"><a href="#保哥" class="headerlink" title="保哥"></a>保哥</h3><ul><li>學習的順序應該是「聽」「說」「讀」「寫」。(但我們的環境「聽」「說」的機會很少)</li><li>三個月連續上課的衝次班</li><li>語感的建立，先看懂文字與脈絡，再聽慢版，再聽快版(莫彩曦的建議是不要看字幕)</li><li>要找自已有興趣的主題</li><li>動機是學習新的技術</li></ul><h3 id="David"><a href="#David" class="headerlink" title="David"></a>David</h3><ul><li>強烈的動機:交女朋友</li><li>快樂的環境:能讓你快樂的環境</li><li>選擇口說補習班</li><li>人會有惰性，要有強烈的動機</li></ul><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><ul><li>自發學習的動機，認識外國朋友，與外國人溝通的虛榮心，承擔家庭責任</li><li>中英文的思考模式不相同，不要用翻譯的方式(在其它地方也有聽過中文腦與英文腦的說法)</li><li>學習資源:空中英語教室，大家說英語</li><li>不要怕犯錯，可以犯錯的環境</li><li>有 Context 的情況下，你可以用肢體語言協助理解</li><li>有興趣的東西:英文攻略</li><li>英文單字量不夠</li><li>如何維持語感? 多與外國人聊講話</li><li>閱讀原文書，先要有大概的理解</li><li>美劇的看法，看現代美劇<ul><li>第1遍，聽英文看中文字幕</li><li>第2遍，聽英文看英文字幕</li><li>第3遍，聽英文不看字幕</li></ul></li><li>不是所有的外國人都是友善的</li><li>師大國語文中心附近公園，會有外國人主動攀談</li><li>Meetup.com 的語言交流活動</li></ul><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><ul><li>要有強烈的動機</li><li>建立環境(反思，應該是建立系統與生活結合;ex:看同儕有在追的美劇(如:后翼棄兵)可以成為聊天話題&amp;訓練英文)</li></ul><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.facebook.com/will.fans/videos/3784351411595803">直播聯結</a></li><li><a href="https://blog.miniasp.com/post/2008/11/04/Share-some-English-learning-tips">分享幾個學習英文聽力的絕招</a></li><li><a href="https://www.youtube.com/user/marquesbrownlee">Marques Brownlee</a></li><li><a href="http://polyglot.tw/cafe/">多語言習得學習網</a></li><li><a href="https://www.youtube.com/c/LearnEnglishWithTVSeries">Learn English With TV Series</a></li><li><a href="https://frontendhappyhour.com/">Front End Happy Hour</a></li><li><a href="http://www.mtc.ntnu.edu.tw/">師大國語文中心</a></li><li><a href="https://www.youtube.com/channel/UCeo3JwE3HezUWFdVcehQk9Q">阿滴英文</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;2020 年搭客運南下高雄，時間長達 5 小時，&lt;br&gt;有在關注的 Podcast/YouTube 節目都聽完了。&lt;br&gt;百
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[生活筆記] 2020 回顧</title>
    <link href="https://blog.marsen.me/2020/12/29/2020/final/"/>
    <id>https://blog.marsen.me/2020/12/29/2020/final/</id>
    <published>2020-12-29T01:55:03.000Z</published>
    <updated>2021-01-18T12:34:23.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="大事記"><a href="#大事記" class="headerlink" title="大事記"></a>大事記</h2><h3 id="社會"><a href="#社會" class="headerlink" title="社會"></a>社會</h3><ul><li>武漢肺炎<ul><li>東京奧運停辦</li><li>無限量 QE</li></ul></li><li>香港民主運動失敗</li><li>美國大選與黑人平權運動</li><li>Kobe 墜機死亡</li><li>中天新聞停播</li></ul><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><h3 id="足球"><a href="#足球" class="headerlink" title="足球"></a>足球</h3><p>今年只有打一場比賽，2020 Arsenal 足總盃冠軍 2:1 Chelsea，然後賽季表演持續探底。</p><h3 id="Lindy-Hop"><a href="#Lindy-Hop" class="headerlink" title="Lindy Hop"></a>Lindy Hop</h3><p>生涯首次在百人面前表演，所屬教室(YM)結束經營，<br>學了 BaLboa 到放棄，上了 36 堂長課(YM &amp; YM 2.0)，中間因為疫情有延期，<br>會持續到 2021 (還有6堂)</p><p>今年是 Podcast 興起的一年，年初聽了股癌、光說不設計(偶然發現竟然是跳舞的老師，但是我沒跟他說)<br>後來聽了百靈果、台灣通勤第一品牌、徐豫切入點、大人學等…<br>身邊也有一些朋友開始在作，我心裡反而有一個 voice log 的想法，<br>但是還沒有很清晰，2021 或許可以作一些探索，當作日記用聲音記錄一些想法與事情。</p><ul><li>閱讀<ul><li>大話設計模式</li><li>硝煙中的敏捷</li><li>DDD<ul><li>Domain-driven Design</li><li>Implementing Domain-driven Design</li><li>Domain-driven Design Distilled</li></ul></li></ul></li><li>婚禮<ul><li>阿棠</li><li>蛋頭</li></ul></li><li>英文<ul><li>TUTORING APP 第四屆體驗大使</li><li>Voice Tube 零元挑戰成功</li></ul></li><li>體驗<ul><li>潛水: 考証中</li><li>抱石: v0(8/10)，目標 v2</li></ul></li></ul><h3 id="職涯"><a href="#職涯" class="headerlink" title="職涯"></a>職涯</h3><ul><li>2月 N 社離職</li><li>A 社入職，Scrum Master<ul><li>3 月入職</li><li>8 月產品上線</li><li>12 月完整團隊開會<ul><li>QA 納入團隊</li><li>具有 PO 職權的人全數進入會議之中</li></ul></li></ul></li><li>Scrum Guide 2020 改版</li></ul><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>2020是<strong>外面風好大</strong>的一年，今年的我反過得還算不錯(?)，<br>但是大家都在躲風避雨，所以相對有些寂寞(?)</p><p>生活上最主要的改變是轉換了工作到了 A 社，<br>主要的工作項目也從開發者變成了引導者(Scrum Master)，<br>這裡其實也有一點反思，這是我要的路嗎?<br>長期以來我是以「學徒模式」一書的模式在發展我的職涯，<br>以成為工匠為目標，但是實際上帶來的收入並不豐碩。<br>自動化的時代，自媒體的時代，純粹的工匠思維還足夠嗎 ?<br>狐芳自賞的模式能讓我生存下去嗎 ?<br>在「軟技能」一書中也提到了一些開發之外的選擇，<br>自我營銷、健身、理財等…<br>甚至在現今主流的開發流程框架之中，<br>跨職能跨領域才是未來的生存之道。<br>而我的職業選擇帶我到了這個地方，我應該冷靜評估自身與自處的優劣，<br>找到自已的一片天才是。</p><p>來談談 2021 幾個大目標，</p><ul><li>人際關係</li><li>英文</li><li>作息</li><li>財務</li><li>職涯</li></ul><p>人無遠慮，必有近憂，明年應該調整自已生活的節奏。</p><p>人際關係方面，想改善我的表達技巧，<br>我的表達方式在工作場合相當適用，就事論事講求效率極高，<br>在有相同領域的認知下，可以高度輸出大量訊息。<br>但是在人與人的場合，反而缺乏溫度，太過一板一眼，<br>可以試著模仿一些人，但不確定是否適合我。  </p><p>在財務還算穩定的狀況下，我想強化我的英文與身體健康。<br>英文是個痼疾，我想找到可以直接口說的英文夥伴或老師。<br>具體來說，目前會考慮莫彩曦的課程與 myClass 大人的英語課，<br>要更加有意識的系統化思考時間的運用。</p><p>財務方面，我已經規劃好一連串系統操作，運作順利的話，<br>未來理財會更加的輕鬆寫意才對，關鍵點會在 1/1、1/4、1/5 這幾天。<br>幾個項目:</p><ol><li>設定孝親費轉帳</li><li>主帳戶的轉移</li><li>証券戶的轉移</li><li>消費的預算制</li><li>業外的收入</li></ol><p>而身體隨著年紀漸長，需要更細心保養了，<br>我想先從健身與早睡早起開始，希望體重可以維持在 BMI 正常的水準。<br>並不像理財那樣有長期執行的經驗，希望可以有系統化的作法來維持;<br>此外，飲食也是相同重且複雜的環節，在 2021 年要綜觀全局的認真思考這件事，<br>並減少不必要的聚餐。</p><p>職涯短期我打算更加詳細的記錄我在 A 社推動的敏捷改變，<br>同時鍛鍊我的寫作與表達能力。<br>另外要有計劃的建立我的專案，<br>我想將單元測試與 TDD 的一些概念與心得分享在 YouTube 與 LBRY 上(免費)<br>另外我會想討論一下專業養成與市場需求的落差。  </p><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;大事記&quot;&gt;&lt;a href=&quot;#大事記&quot; class=&quot;headerlink&quot; title=&quot;大事記&quot;&gt;&lt;/a&gt;大事記&lt;/h2&gt;&lt;h3 id=&quot;社會&quot;&gt;&lt;a href=&quot;#社會&quot; class=&quot;headerlink&quot; title=&quot;社會&quot;&gt;&lt;/a&gt;社會&lt;/h3&gt;&lt;u
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>[活動筆記] 2020 SCRUM GUIDE UPDATE</title>
    <link href="https://blog.marsen.me/2020/11/20/2020/scrum_guide_2020/"/>
    <id>https://blog.marsen.me/2020/11/20/2020/scrum_guide_2020/</id>
    <published>2020-11-20T09:32:02.000Z</published>
    <updated>2021-01-15T06:27:39.828Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>2020/11/18 將迎來 Scrum 25 周年與 Scrum Guide 的更新，<br>活動有一些大師對談，錄影放在文末連結之中，<br>另稍微比較一下 2017 與 2020 Scrum Guide 的差異(以中文為主)，<br>特別感謝譯者這麼有效率的更新，我差不多在 19 號就可以在<a href="https://www.scrumguides.org/download.html">網站下載</a>了</p><h2 id="排版與封面"><a href="#排版與封面" class="headerlink" title="排版與封面"></a>排版與封面</h2><p>2017 版本主要視覺的位置放了兩個大師的合照，首行字為「Scrum 指南™」<br>2020 版本主要視覺的位置為「Scrum 指南」，首行字為兩位大師的名字。<br>理想我會希望使用 2020 的版本，然後兩位大師的名字縮小到角落 :D</p><h3 id="目錄"><a href="#目錄" class="headerlink" title="目錄"></a>目錄</h3><p>2020 將目的前移到目錄之前，我覺得這樣的調整很好。<br>讓人可以先讀取本指南的目的。</p><h3 id="Scrum-指南的目的"><a href="#Scrum-指南的目的" class="headerlink" title="Scrum 指南的目的"></a>Scrum 指南的目的</h3><p>篇幅相比 2017 更長了，並將 2017 版「Scrum 的運用」縮減並挪移至此處。<br>簡介了 Scrum 的起源，概述了 Scrum 的運用範圍與現況。  </p><p>另外有兩句預防性的警語，是這個段落的重點</p><ul><li>改變 Scrum 的核心設計或 Scrum 的各種理念，遺漏其中任何元素，或是不遵照 Scrum 的規則，是在掩蓋問題，並限制了 Scrum 的各種好處，甚至可能使其變得毫無用處。</li><li>這些使用 Scrum 框架內的戰術技巧有很大的變化，因此不在此描述。</li></ul><p>這個篇幅簡述了 Scrum 已是被時間與不同產業實証有用的框架，<br>但擅自修改 Scrum 可能會導致 Scrum 效用打折甚至無用，<br>並具體說明 Scrum 的戰術實作不會在此指南描述。</p><h3 id="Scrum-的定義"><a href="#Scrum-的定義" class="headerlink" title="Scrum 的定義"></a>Scrum 的定義</h3><p>相比 2017 的版本，這裡直接提到了 Scrum 中所有的角色與其職責。<br>並明確的說明「原封不動地應用 Scrum」, 並強調這份指南是<code>人之間的指引</code>，<br>而不是具體的流程、技術與方法。</p><p>這裡也是我覺得很好的地方，以前在首次與團隊成員說明 Scrum Guide 時，<br>如果按照 2017 的章節說明，我都要另外安排一個段落先簡述 Scrum 中的角色，<br>因為 2017 在角色出現的篇幅比角色的說明還要早。</p><h3 id="Scrum-的理論"><a href="#Scrum-的理論" class="headerlink" title="Scrum 的理論"></a>Scrum 的理論</h3><p>2020 的版本加上精實思維(Lean Thinking)，<br>並具體說明了檢視、調適的事件( 2017 翻譯為活動)與三大支柱的關係。  </p><p>透明性的段落強調了<code>没有透明性的檢視會產生誤導和浪費(做出讓價值減少且風險增加的決策)</code><br>很有感觸，我在團隊導入 Scrum 的首要宗旨就是看見事實。<br>(有機會再談談如何定義事實與 Ruddy 老師說的「看見全貌」的差異之所在)  </p><p>檢視性強調 Scrum 將以 5 個事件有節奏實踐檢視性(具體作法與事件在這個段落還沒提)，  </p><p><code>檢視性促成調適性。 沒有調適性的檢視是沒有意義的。Scrum 的事件旨在激發改變。</code>  </p><p>這句話作到了承先起後的作用，可以將檢視性視作三大支柱的樞鈕。  </p><p>調適性的篇幅提到了授權與自我管理，這也許是導入常常碰到的地雷。<br>團隊不被授權或缺乏自我管理的能力或意識(有點像有沒有病識感)。  </p><p>2020 的編排我很喜歡，除了一再預告事件如何產生三大支柱之外，不再僅僅以順序暗示三大支柱的關係。<br>而是明確的說明<code>透明性促成檢視性。檢視性促成調適性。</code>。<br>(有點像真善美，沒有真後面就會變成假善、假美那就豪無意義了)  </p><h3 id="Scrum-的價值觀"><a href="#Scrum-的價值觀" class="headerlink" title="Scrum 的價值觀"></a>Scrum 的價值觀</h3><p>對承諾、專注、開放、尊重、與勇氣的排版更明顯了，另外 Stakeholders 也明文納入其中了。  </p><p>誒、不對啊，這些態度不是跟四維八德一樣，小朋友都知道嗎?<br>而且應該不論是你的老闆、雞巴主管、龜毛客戶、秋條前輩到所有人都應該要有相同的態度，不是嗎?<br>這就是知易行難吧… 說個滑坡的，最近在思考尊重與尊敬的差異，<br>朋友給了我一個例子:</p><ul><li>尊重:念在你是一代宗師，你自盡吧</li><li>尊敬:我的戰鬥力只有六千，他起碼有一萬以上</li></ul><p>聽說看得懂的都是老人。</p><h3 id="Scrum-Team"><a href="#Scrum-Team" class="headerlink" title="Scrum Team"></a>Scrum Team</h3><p>引言強調一位 Product Owner(2017 在後面的段落才提到)，<br>強調了沒有子團隊與階級架構(具體實務上會影響到組織結構，實作起來並不容易，需要更多的經驗)。<br>這次沒有翻譯目標/目的了，直接使用 Product Goal 並在後面的段落具體指由 PO 開發、描述溝通。  </p><p>然後強化了對當責的描述，調整了後面篇幅的介紹順序<br>2017:PO &gt; Development Team &gt; Scrum Master<br>2020:Developers &gt; PO &gt; Scrum Master<br>我認為順序都是有暗喻性的，但解讀方式是自由的，就不過多解釋了。  </p><p>重點是責任的部份，我覺得比起 2017 更能簡單的用 Scrum Guide 說明現在角色的職責所在了。  </p><p>Developers</p><p>● 打造一份 Sprint 的計畫，也就是 Sprint Backlog；<br>● 藉由遵循完成之定義，以灌輸品質；<br>● 每天調適其邁向 Sprint Goal 的計畫；和，<br>● 作為專業人士對彼此負責。</p><p>Product Owner</p><p>● 開發並明確的描述溝通 Product Goal；<br>● 創造並清楚的描述溝通 Product Backlog items；<br>● 對 Product Backlog items 進行排序；和，<br>● 確保 Product Backlog 是透明的、可見的與可理解的</p><p>這裡特別加上了</p><p><code>Product Owner 可以自己做上述工作，或者也可以將職責委託他人，然而，Product Owner 仍肩負最終責任。</code></p><p>這句話我視為對大型組織導入 Scrum 的困難之處的回應。<br>錯誤 Scrum (其實就不是 Scrum)會產生缺乏<a href="https://www.youtube.com/watch?v=cr2rjaGmUzo">實際權限的 PO</a>，<br>或是有權無(卸)責的傳統型領導。</p><p>Scrum Master</p><p>明文<code>Scrum Master 對 Scrum Team 的效能負責</code>;職責更明確了，語句更洗鋉，贅字更少。<br>但我覺得「真正的領導者」這段文字將會產生轉型時的爭議，特別是將「僕人式領導」文字又被拿掉。<br>我會建議作為 Scrum Master 要把這件事放在心中，Title 只是浮雲啊。  </p><h3 id="Scrum-事件-原為-Scrum-活動"><a href="#Scrum-事件-原為-Scrum-活動" class="headerlink" title="Scrum 事件(原為 Scrum 活動)"></a>Scrum 事件(原為 Scrum 活動)</h3><p>Sprint</p><p>明文<code>採用時間較短的 Sprint，可以建立更多學習周期</code>，此外更加強調三大支柱與 Sprint 的關係。  </p><p>特別提醒經驗主義的重要性，更勝於實際的做法(諸如:燃盡圖、燃起圖，或是累積流量圖等…)<br>這與我的經驗也是不謀而合，主管一開始就投入過多心力在要求製作圖表，<br>而忽略了在圖表之前，進行預估其實是需要訓練的，最後圖表變成作假帳…<br>失去透明度，檢視性與調適性將無法發揮功能，Scrum/Sprint 將會失敗(或是不知道成功或失敗)。  </p><p>取消 Sprint 的章節被大幅縮減，僅以不合時宜一句代過。<br>反而釋放更多空間給 Product Owner。<br>我覺得 PO 當要取消 Sprint 時，要思考以下的問題，  </p><ul><li>要如何與其它角色互動?  </li><li>要如何持續實現 Product Goal?  </li></ul><p>這樣的文字編排方式，我覺得是很大的改善，強調在 Scrum 之中，<br>我們的所有行為都是為了實現三大支柱，而我們相信這樣的方法可以領我們到達終點之地。<br>後面的事件也都有類似的描述，我就不再補充。  </p><p>Sprint Planning</p><p>2017 版本<br>第一個討論題目：這次 Sprint 能做出什麼？<br>第二個討論題目：如何完成所選的工作？</p><p>2020 版本<br>主題一：為什麼這次 Sprint 有價值？<br>主題二：這次 Sprint 能完成（Done）什麼？<br>主題三：如何完成所挑選的工作？</p><p>明顯多了一個有關價值的主題，但是需要與 Stakeholders 在 Sprint Planning 結束前被確定下來，<br>就我實務的經驗 Stakeholders 與 PO 會比 Developers 提早決定未來的目標，<br>所以 Stakeholders 依然不是會議中必要的角色。  </p><p>Daily Scrum</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Developers 可以選擇他們想要的任何 Daily Scrum 的結構和技術，</span><br><span class="line">只要他們的 Daily Scrum 專注於實現 Sprint Goal 的進展，</span><br><span class="line">並且產生下一個工作天可執行的計畫。</span><br><span class="line">這樣可以更專注並改進自我管理（self-management）。</span><br></pre></td></tr></table></figure><p>把經典的三個問題拿掉了，這也符合我的經驗，不要流於形式，<br>而是更專注在實現 Sprint Goal，不流於形式則更能讓團隊自我管理。  </p><p>Sprint Review 與 Sprint Retrospective</p><p>這兩個段落的篇幅都縮短了，但是我覺得更言簡意賅。<br>但投影片展示的描述，我還比較喜歡 2017 版本的描述 <code>是為了引發意見的反饋和提升協同合作</code>，<br>但的確實務上往往會淪為簡報報告。  </p><p>關於 Retrospective 這個會議對我的定義，<br>我目前的團隊沒有在跑 Scrum ，但是我直接引入 Retrospective。<br>Retrospective 是一個可以雕塑團隊的會議。<br>有趣的事，團隊現在調整的越來越像 Scrum (當然依然不是 Scrum)  </p><h3 id="Scrum-Artifacts"><a href="#Scrum-Artifacts" class="headerlink" title="Scrum Artifacts"></a>Scrum Artifacts</h3><p>明文: Artifacts 的設計是為了使關鍵資訊之透明性極大化。(其實 2017 年的版本也有提到)<br>2020 版本的文字組織更簡明之外，都加上了承諾的區塊，</p><ul><li>Product Backlog 是為了實現 Product Goal 的承諾</li><li>Increment 是為了實現對完成之定義(Definition of Done) 的承諾</li><li>Sprint Backlog 是為了實現 Sprint Goal 的承諾</li></ul><h3 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h3><p>結語的部份並沒有太大幅度的修改，<br>但是我想要再一次強調 「雖然實施部分的 Scrum 是可能的，但結果就不是 Scrum 了。」  </p><h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>整體的文章的結構完整性更好了，三大支柱與活動的連結，產出與承諾的連結。<br>然後將實作(戰術)面與角色的行為(戰鬥)樣版移除，這樣給了更多空間讓團隊發揮。<br>也會促使團隊思考背後的原因(Why) ?</p><p>想起以前聽過「守、破、離」的演說，我想這次 Scrum Guide 有一點這樣的味道，<br>在 25 年前，什麼經驗都沒有情況，這樣的樣版帶來了相當大的幫助，<br>現在我們都有一些實作有一些失敗有一些成功，是時候把樣版移除了(或是回到問題的本質)。</p><ul><li>你真要的三個問題嗎 ? 背後想問到的是什麼 ?</li><li>真的不取消 Sprint 嗎 ? 為什麼不行 ?</li><li>不站立真的不能開 Daily Scrum 嗎 ?</li></ul><p><strong>20201125 補充:</strong><br>Adrian 的分享相當清晰明瞭，補充連結如下:</p><ul><li><a href="https://lnkd.in/gqfVSiW">Scrum Guide 2020 Update — Adrian</a></li><li><a href="https://lnkd.in/gBTX4vm">Scrum Guide 2020 少了什麼? — Adrian</a></li><li><a href="https://lnkd.in/gNWJG4c">Scrum Guide 2020 多了什麼? — Adrian</a></li><li><a href="https://lnkd.in/gnHcQTZ">Scrum Guide 2020 改了什麼? — Adrian</a></li></ul><h2 id="校錯"><a href="#校錯" class="headerlink" title="校錯"></a>校錯</h2><ol><li><img src="https://i.imgur.com/cXQldi5.jpg" alt="的的"></li><li><img src="https://i.imgur.com/PYZ4H8K.jpg" alt="的的"></li><li><img src="https://i.imgur.com/uLK8BRU.jpg" alt="Artifacts"></li></ol><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://www.youtube.com/watch?v=Dfxo3PZwDI8">活動影片</a></li><li><a href="https://wangterryonagile.blogspot.com/2020/11/scrum-guide-2020.html">Scrum guide 2020 翻譯後記</a></li><li><a href="https://www.scrumguides.org/docs/scrumguide/v2020/2020-Scrum-Guide-Chinese-Traditional.pdf">2020 中文版</a></li><li><a href="https://www.scrumguides.org/docs/scrumguide/v2017/2017-Scrum-Guide-Chinese-Traditional.pdf">2017 中文版</a></li><li><a href="https://www.youtube.com/watch?v=cr2rjaGmUzo">對產品負責人角色的錯誤觀念會如何毀了您的組織，以及其因應之道</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;2020/11/18 將迎來 Scrum 25 周年與 Scrum Guide 的更新，&lt;br&gt;活動有一些大師對談，錄影放在
      
    
    </summary>
    
    
    
      <category term="Agile" scheme="https://blog.marsen.me/tags/Agile/"/>
    
      <category term="Scrum" scheme="https://blog.marsen.me/tags/Scrum/"/>
    
  </entry>
  
  <entry>
    <title>[生活筆記] 收支流程設計</title>
    <link href="https://blog.marsen.me/2020/11/10/2020/finance/"/>
    <id>https://blog.marsen.me/2020/11/10/2020/finance/</id>
    <published>2020-11-10T05:49:16.000Z</published>
    <updated>2021-01-15T06:27:39.826Z</updated>
    
    <content type="html"><![CDATA[<p>耶和華所賜的福使人富足，並不加上憂慮。— 箴10:22.</p><h2 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h2><p>投資理財是現代人生活極為重要的部份，<br>但是我在學生時期並沒有學習到這方面的知識，<br>出社會也大概 10 年了。稍微作個記錄與分享。  </p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>開源節流</strong>是基本理財認識，簡單分為收入與支出。<br>收入方面，最常為工資所得，在網路時代也有很其它的賺錢方式，<br>最主要我想還是要<strong>建立系統</strong>，這裡不過多著墨，<br>我的系統屬於股票投資，但是記得你可以不只有一個系統，而<code>建立系統是需要時間與反覆思考</code>的。</p><p>支出方面，其實滿足一個人的生活所需，金額不會太大，<br>當然想過得比較滋潤的話，會比較花錢，<br>跟據你所居住的區域來說(不是要戰南北)，還是會有比例上的差異，<br>你也可以用時間來轉換成本，不過裡面藏著一些魔鬼細節，小心得不償失。  </p><blockquote><p>舉例來說:<br>如果是自行開伙，飲食的費用並不會太高(特別是家庭人數較多的情況)，<br>但是就要考量到材料準備、保鮮、整理等環節，外食也可以有便宜的選擇，<br>但是可能會是太油太鹹太甜的餐點，導致健康受到影響。</p></blockquote><p>但除此之外，孝親、偶爾為之的旅行、進修、稅、保險等等…什麼都要花錢。<br>簡單的一句，<strong>所有的支出，我都建議預算制。</strong></p><p>以下是以一個小資上班族(就是我啦)的概念去設計的，<br>不包含保險、股票、信用卡等…其它的工具。<br>如果有人喜歡，也許未來才再寫相關文章吧。</p><h3 id="帳戶分類"><a href="#帳戶分類" class="headerlink" title="帳戶分類"></a>帳戶分類</h3><h4 id="受薪帳戶-InCome-Acct"><a href="#受薪帳戶-InCome-Acct" class="headerlink" title="受薪帳戶(InCome Acct)"></a>受薪帳戶(InCome Acct)</h4><p>受薪階級通常會有<code>薪轉戶</code>，至少要有1次以上的<strong>跨行轉帳免手續費</strong>，<br>如果非工資收入(接案/紅利等…)，應該儘可能直接轉入<code>主帳戶(Main Acct)</code> 。</p><h4 id="主帳戶-Main-Acct"><a href="#主帳戶-Main-Acct" class="headerlink" title="主帳戶(Main Acct)"></a>主帳戶(Main Acct)</h4><p>目的:負責最多轉出轉入功能的帳戶，主要的活存會放在這裡，<br>應該有一定次數的<strong>跨行轉帳免手續費</strong>，或是<strong>約定帳戶免手續費</strong>，<br>依個人使用習慣，建議要有 5~10 次以上，此外要有<code>好用的APP/網銀</code>，<br>最後才是<strong>活存利率要儘可能的高</strong>，因為你大多數的生活費會停滯在此。</p><blockquote><p>目前有些網銀放 5 萬或 10 萬就有 2% 以上的利率，比定存還高。<br>10 萬放一年就有 2000 是蠻值得的，當然不要本末導致，<br>省下的跨行交易手續費與其方便性才是我們要的。<br>這個帳戶的設計上金錢會有小額高頻的流通，<br>不要為了 2% 而讓錢鎖死不流動，<br>假設股市的投資如果有 5% 報酬的話應該讓現金流向股市市場(需要考慮投資風險)，<br>當然有閒錢還是可以考慮…</p></blockquote><p>2020 年可以參考這篇文章，<a href="https://carl5202002.pixnet.net/blog/post/316738662-%E8%B7%A8%E8%A1%8C%E8%BD%89%E5%B8%B3%E5%85%8D%E6%89%8B%E7%BA%8C%E8%B2%BB">轉帳免手續費帳戶比較</a><br>雖然開戶作業有時候很麻煩，這些優惠也常常過幾年後就消失與改變。<br>但是僅僅這幾年中帶來的方便性也是很高的喔，<strong>手續費這種磨血的花費真的建議能省則省。</strong></p><h4 id="証券戶-証券銀行"><a href="#証券戶-証券銀行" class="headerlink" title="証券戶/証券銀行"></a>証券戶/証券銀行</h4><p>目的:主要的股票投資帳戶，銀行與証券戶轉帳不應有手續費，<br>還沒有投資就先虧一筆，就好像跑百米你讓人家 10 公分，<br>你覺得沒差嗎？我覺得有差，跑百米我不是 Bolt ，理財我不是連公子。<br>証券銀行轉到其它銀行有一定次數的<strong>跨行轉帳免手續費</strong><br>這裡的次數不用多 1~5 次即可，主要是我的交易頻率其實不高，<br>需要交易，通常是有大筆資金需要轉投資其它項目的時候，<br>反而是<strong>單日/周/月轉帳上限</strong>比較重要，可以在開戶的時候作約定。<br>最重要的是証券<strong>交易手續費要儘可能的低</strong>，<br>基本上會有 1.425‰*0.6(ex:富邦) 的折扣，<br><del>高交易額</del>或有活動開戶的券商可以更低 (ex:華南 1.425‰*0.3)，<br>不要小看這千分一點四二五的 3 折，以前我不知道，傻傻被扣的錢可以訂好幾年的 Spotify 了<br>最後要有 <code>好用的App</code> (實際上好像每家都一樣，都是三竹作的？)</p><h4 id="其他投資"><a href="#其他投資" class="headerlink" title="其他投資"></a>其他投資</h4><p>活存</p><blockquote><p>在低/零利率時代，活存已經不適合作投資的首選，<br>所以通常會與 <code>主帳戶(Main Acct)</code> 作結合，<br>主要用於生活上食衣住行娛樂所需的花費，<br>方便性將大於投資目的，但是仍要選擇活存利率高，<br>或是回饋高(ex:刷卡回饋/ShopBack)的消費方式</p></blockquote><p>定存</p><blockquote><p>利率要高，但是在低/零利率時代，定存已經不是良好的投資標的。<br>但建議可以將<strong>緊急預備金</strong>作為定存</p></blockquote><p>外幣:</p><blockquote><p>性質會與<strong>活存</strong>類似，但以外幣計價，應為國際通用貨幣(美金、歐元等…)，利率要高，<br>主要的目的為美股、旅遊、<del>海外置產(目前沒有)</del>，特性是交易手續費都不便宜，所以持有比例不會太多。</p></blockquote><p>美股/其它市場股票</p><blockquote><p>台股之外第一選擇，以美股為主，<br>好處是標的超多，可以賺世界上所有標的的錢，<br>缺點是美金計價所以想轉換成現鈔或是台幣手續費都很高，<br>沒特殊情況這些錢不會拿出來花，會變成純粹的投資。<br>研究中…</p></blockquote><p>黃金/貴金屬:</p><blockquote><p>有使用黃金帳戶買過，非實體黃金，<br><strong>只能賺差價而不生息</strong>，所以不愛，目前已經不再投入。</p></blockquote><h2 id="支出"><a href="#支出" class="headerlink" title="支出"></a>支出</h2><p>所有的支出應該都採取<code>預算制</code>，<br>每年編列並支出，作為個人，不應有消耗預算的行為，<br>但是可以挪移至下一年度。</p><h3 id="Fixed-Charge-固定支出"><a href="#Fixed-Charge-固定支出" class="headerlink" title="Fixed Charge (固定支出)"></a>Fixed Charge (固定支出)</h3><ul><li>保費(綁定信用卡)</li><li>稅金(分期 0 利率)</li><li>孝親費</li><li>訂閱制服務<ul><li>域名( Domain )</li><li>Spotify (綁定信用卡)</li><li>水/電/瓦斯</li><li>網路/手機電信/第四台</li></ul></li><li>生活費</li><li>投資<ul><li>定期不定額</li><li>主動式投資</li></ul></li></ul><h3 id="浮動支出"><a href="#浮動支出" class="headerlink" title="浮動支出"></a>浮動支出</h3><p>預算制設定上限，但是以實支實付為主</p><ul><li>學習費用<ul><li>買書</li><li>上課</li></ul></li><li>娛樂費用<ul><li>旅行</li><li>聚餐</li></ul></li><li>婚喪禮金<ul><li>好友/親人</li><li>普通同事/朋友，只包不去通常可以省時省錢</li></ul></li></ul><h2 id="Over-View"><a href="#Over-View" class="headerlink" title="Over View"></a>Over View</h2><p><img src="/images/2020/11/cashflow.png" alt="Cash Flow Over View"></p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="https://carl5202002.pixnet.net/blog/post/316738662-%E8%B7%A8%E8%A1%8C%E8%BD%89%E5%B8%B3%E5%85%8D%E6%89%8B%E7%BA%8C%E8%B2%BB">轉帳免手續費</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;耶和華所賜的福使人富足，並不加上憂慮。— 箴10:22.&lt;/p&gt;
&lt;h2 id=&quot;前情提要&quot;&gt;&lt;a href=&quot;#前情提要&quot; class=&quot;headerlink&quot; title=&quot;前情提要&quot;&gt;&lt;/a&gt;前情提要&lt;/h2&gt;&lt;p&gt;投資理財是現代人生活極為重要的部份，&lt;br&gt;但是我在
      
    
    </summary>
    
    
    
      <category term="生活筆記" scheme="https://blog.marsen.me/tags/%E7%94%9F%E6%B4%BB%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
  <entry>
    <title>[生活筆記] 簽署軟體工藝宣言</title>
    <link href="https://blog.marsen.me/2020/10/28/2020/softwarecraftsmanship.manifesto/"/>
    <id>https://blog.marsen.me/2020/10/28/2020/softwarecraftsmanship.manifesto/</id>
    <published>2020-10-28T03:16:17.000Z</published>
    <updated>2021-01-15T06:27:39.828Z</updated>
    
    <content type="html"><![CDATA[<p>As aspiring Software Craftsmen we are raising the bar of<br>professional software development by practicing it and helping<br>others learn the craft. Through this work we have come to value:  </p><p>Not only working software, but also <code>well-crafted software</code><br>Not only responding to change, but also <code>steadily adding value</code><br>Not only individuals and interactions, but also <code>a community of professionals</code><br>Not only customer collaboration, but also <code>productive partnerships</code></p><p>That is, in pursuit of the items on the left we have found the items on the right to be indispensable.  </p><p>作為有理想的軟件工匠，我們一直身體力行，<br>提升專業軟件開發的標準，並幫助他人學習此工藝。<br>通過這些工作，我們建立以下的價值觀：</p><p>不僅要讓軟件工作，更要精益求精<br>不僅要響應變化，更要穩步增加價值<br>不僅要有個體與互動，更要形成專家的社區<br>不僅要與客戶合作，更要建立卓有成效的伙伴關係</p><p>也就是說，左項固然值得追求，右項同樣不可或缺。</p><h2 id="簽署心得"><a href="#簽署心得" class="headerlink" title="簽署心得"></a>簽署心得</h2><p>這些價值觀我是相同認同的,<br>可是這個網站的感覺並沒有呈現出那樣價值觀啊…<br>或許還少了一點美感.  </p><p>我的簽署資訊如下,<br><code>30196   Marsen (Taiwan) 2020/10/28</code>,<br>查詢功能不能查 ID 與國家有點弱,<br>沒有正體中文的翻譯,  補充資料的部份很不錯,<br>但是也只是沒有系統的散落在那裡.<br>想給點回饋,也找不到留言區或討論區, 或是網站的 Repository.  </p><h2 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h2><ul><li><a href="http://teddy-chen-tw.blogspot.com/search/label/%E9%82%84%E5%B0%91%E4%B8%80%E6%9C%AC%E6%9B%B8">【還少一本書】Clean Agile</a></li><li><a href="http://manifesto.softwarecraftsmanship.org/">Software Craftsmanship Manifesto（軟體工藝宣言）</a></li><li><a href="http://manifesto.softwarecraftsmanship.org/#/en/reading">Software Craftsmanship Manifesto（軟體工藝宣言）#相關閱讀</a></li></ul><p>(fin)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;As aspiring Software Craftsmen we are raising the bar of&lt;br&gt;professional software development by practicing it and helping&lt;br&gt;others lear
      
    
    </summary>
    
    
    
      <category term="生活筆記" scheme="https://blog.marsen.me/tags/%E7%94%9F%E6%B4%BB%E7%AD%86%E8%A8%98/"/>
    
  </entry>
  
</feed>
